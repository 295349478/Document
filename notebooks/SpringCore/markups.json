{"EpubVersion":2,"filepath":"","floatingtheme":[],"folded":false,"markups":[{"date":"2021-12-18 16:48:22","docid":0,"fillcolor":"ffffed99","folded":false,"id":1,"markups":[{"content":"应用程序上下文：干了两件事\n\n第一件事：\n1、实际是传递ApplicationContext来调用\nAbstractApplicationContext的无参构造方法，\n返回一个资源解析器\n然后ApplicationContext为null，会创建一个\n2、setParent(parent)\n\n第二件事：\n调用AbstractRefreshableConfigApplicationContext.\nsetConfigLocations配置文件路径（涉及到的步骤如下）\n1、先调用resolvePath()\n（1）resolveRequiredPlaceholders(path)：解析路径\n  底层调用的是AbstractPropertyResolver的方法\n       （1、获取占位符处理器\n          2、使用占位符处理器，加个classpath进行，以便后续      \n          解析）\n（2）getEnvironment()：获取环境\n\n\n2、再调用trim()","date":"2021-12-18 16:48:26","docid":0,"fillcolor":"ffffed99","folded":false,"id":2,"markups":[{"content":"资源加载器","date":"2021-12-18 16:54:24","docid":0,"fillcolor":"ffffed99","id":3,"originaltext":"ResourceLoader代表了加载资源的一种方式，正是策略模式的实现。","page":3,"textblocks":[{"first":[75.52161407470703,426.689697265625,6.028297424316406,12.5],"last":[364.0658264160156,426.689697265625,9.754547119140625,12.5],"length":37,"rects":[[75.52161407470703,426.689697265625,298.2987594604492,12.5]],"start":0,"text":"ResourceLoader代表了加载资源的一种方式，正是策略模式的实现。"}],"type":5},{"date":"2022-01-15 23:08:14","docid":0,"fillcolor":"ffffed99","id":83,"markups":[{"content":"对上下文初始化\n获得资源模式处理器，就是用来解析xml文件的处理器","date":"2022-01-15 23:08:25","docid":0,"fillcolor":"ffffed99","folded":true,"id":84,"markups":[{"date":"2022-01-15 23:07:58","docid":0,"fillcolor":"ffffed99","folded":false,"id":82,"markups":[{"content":"一、\n两件事：\n1、调用父类构造方法，初始化一些成员属性\n2、获得资源模式处理器","date":"2022-01-15 23:07:37","docid":0,"fillcolor":"ffffed99","folded":false,"id":81,"markups":[{"content":"1（这是构造函数）\n初始化上下文：\n获取容器唯一的id值，创建beanFactory的时候会将这个id值设置进去\n创建factory的名字\n创建BFPP的集合\n创建标记位\n设置对象锁，容器的刷新和销毁需要使用\n配置ant路径匹配器","date":"2022-01-16 12:30:43","docid":0,"fillcolor":"ffffed99","id":87,"markups":[{"content":"2创建资源模式处理器\n用来解析系统运行的时候，所需要的资源\n\n继承于资源加载器","date":"2021-12-18 16:59:35","docid":0,"fillcolor":"ffffed99","id":5,"originaltext":"getResourcePatternResolver:","page":4,"textblocks":[{"first":[75.52161407470703,31.755126953125,5.345481872558594,9.5],"last":[204.3887481689453,31.755126953125,2.5947113037109375,9.5],"length":27,"rects":[[75.52161407470703,31.755126953125,131.46184539794922,9.5]],"start":0,"text":"getResourcePatternResolver:"}],"type":5}],"originaltext":"AbstractApplicationContext()","page":3,"textblocks":[{"first":[122.30116271972656,752.161865234375,5.293785095214844,8.779052734375],"last":[265.11572265625,752.161865234375,5.293792724609375,8.779052734375],"length":28,"rects":[[122.30116271972656,752.161865234375,148.1083526611328,8.779052734375]],"start":463,"text":"AbstractApplicationContext()"}],"type":5}],"originaltext":"this();","page":3,"textblocks":[{"first":[106.42659759521484,711.64306640625,5.293785095214844,8.779052734375],"last":[138.15650939941406,711.64306640625,5.2937774658203125,8.779052734375],"length":7,"rects":[[106.42659759521484,711.64306640625,37.02368927001953,8.779052734375]],"start":423,"text":"this();"}],"type":5},{"content":"二、\n获取父类境变量，容器的环进行合并","date":"2022-01-15 23:09:50","docid":0,"fillcolor":"ffffed99","id":85,"originaltext":"setParent(parent);","page":3,"textblocks":[{"first":[106.42659759521484,725.1494140625,5.293785095214844,8.779052734375],"last":[196.34158325195312,725.1494140625,5.2937774658203125,8.779052734375],"length":18,"rects":[[106.42659759521484,725.1494140625,95.2087631225586,8.779052734375]],"start":435,"text":"setParent(parent);"}],"type":5}],"originaltext":"构造器","page":3,"textblocks":[{"first":[75.52161407470703,634.2880859375,14.631797790527344,17.5],"last":[104.78520965576172,634.2880859375,14.631797790527344,17.5],"length":3,"rects":[[75.52161407470703,634.2880859375,43.89539337158203,17.5]],"start":45,"text":"构造器"}],"type":5}],"originaltext":"super(parent);","page":3,"textblocks":[{"first":[106.42659759521484,524.055908203125,5.293785095214844,8.779052734375],"last":[175.17941284179688,524.055908203125,5.2937774658203125,8.779052734375],"length":14,"rects":[[106.42659759521484,524.055908203125,74.04659271240234,8.779052734375]],"start":241,"text":"super(parent);"}],"type":5},{"content":"读取文件地址就是最开始填的参数\n看有没有${} 进行替换其中的属性值，可以嵌套，替换的属性值从Environment中与系统相关的环境属性值中获取\n然后将修改的地址值放到一个configLocations字符串数组中\n\n（这个${}的替换只是对文件名字的替换）","date":"2022-01-16 11:38:43","docid":0,"fillcolor":"ffffed99","folded":true,"id":86,"markups":[{"date":"2021-12-18 17:03:19","docid":0,"fillcolor":"ffffed99","folded":true,"id":6,"markups":[{"content":"将资源路径一个一个使用AbstractRefreshableConfigApplicationContext类的resolvePath方法，再使用trim方法","date":"2021-12-18 17:45:37","docid":0,"fillcolor":"ffffed99","folded":true,"id":11,"markups":[{"content":"解析给定路径，处理${}这些变量替换的符号","date":"2021-12-18 17:49:00","docid":0,"fillcolor":"ffffed99","folded":true,"id":13,"markups":[{"date":"2021-12-18 17:48:49","docid":0,"fillcolor":"ffffed99","id":12,"originaltext":"此方法的目的在于将占位符(placeholder)解析成实际的地址。","page":4,"textblocks":[{"first":[75.52161407470703,462.706298828125,9.754531860351562,12.5],"last":[330.1492004394531,462.706298828125,9.754547119140625,12.5],"length":34,"rects":[[75.52161407470703,462.706298828125,264.3821334838867,12.5]],"start":165,"text":"此方法的目的在于将占位符(placeholder)解析成实际的地址。"}],"type":5},{"content":"会走到StandardEnvironment里面\n\n：总结起来就是获得环境Environment就会把属性资源放到环境里面去\n其中属性资源包括\n1、45个系统相关的环境对象值\n2、54个系统相关的环境属性值","date":"2021-12-18 17:50:21","docid":0,"fillcolor":"ffffed99","folded":true,"id":15,"markups":[{"date":"2021-12-18 17:51:46","docid":0,"fillcolor":"ffffed99","folded":true,"id":16,"markups":[{"date":"2021-12-18 17:56:40","docid":0,"fillcolor":"ffffed99","folded":true,"id":18,"markups":[{"content":"提前设置 生产 或者 测试 等环境下需要使用的配置文件在哪里\n然后使用\ncontext.getEnvironment().setActiveProfiles(\"dev\");\n来设置要使用的配置文件","date":"2021-12-18 17:57:15","docid":0,"fillcolor":"ffffed99","id":19,"originaltext":"Spring容器管理的所有bean都是和一个profile绑定在一起的","page":5,"textblocks":[{"first":[380.6321105957031,609.024169921875,5.374755859375,12.5],"last":[195.44805908203125,623.7310180664062,9.754531860351562,13.5],"length":36,"rects":[[380.6321105957031,609.024169921875,133.14840698242188,12.5],[75.52161407470703,623.7310180664062,129.68097686767578,13.5]],"start":164,"text":"Spring容器管理的所有bean都\n是和一个profile绑定在一起的"}],"type":5},{"date":"2021-12-18 18:01:02","docid":0,"fillcolor":"ffffed99","id":20,"originaltext":"在启动代码中可以用如下代码设置活跃(当前使用的)Profile:","page":6,"textblocks":[{"first":[75.52161407470703,29.75537109375,9.754531860351562,12.5],"last":[325.3536682128906,29.75537109375,2.594696044921875,12.5],"length":32,"rects":[[75.52161407470703,29.75537109375,252.42675018310547,12.5]],"start":0,"text":"在启动代码中可以用如下代码设置活跃(当前使用的)Profile:"}],"type":5}],"originaltext":"Profile","page":5,"textblocks":[{"first":[75.52161407470703,571.006103515625,6.125846862792969,10.5],"last":[101.8393325805664,571.006103515625,5.764930725097656,10.5],"length":7,"rects":[[75.52161407470703,571.006103515625,32.08264923095703,10.5]],"start":62,"text":"Profile"}],"type":5},{"content":"运行时的参数","date":"2021-12-18 18:01:08","docid":0,"fillcolor":"ffffed99","id":21,"originaltext":"Property","page":6,"textblocks":[{"first":[75.52161407470703,163.06689453125,6.125846862792969,12.5],"last":[112.71563720703125,163.06689453125,5.550331115722656,12.5],"length":8,"rects":[[75.52161407470703,163.06689453125,42.744354248046875,12.5]],"start":105,"text":"Property"}],"type":5},{"content":"==\n因为走到StandardEnvironment里面，调用父类的构造方法AbstractEnvironment进行初始化一些属性包括：\npropertySources\npropertyResolver\n\n\n：总结起来就是获得环境Environment就会把属性资源放到环境里面去\n其中属性资源包括\n1、45个系统相关的环境对象值\n2、54个系统相关的属性值","date":"2021-12-18 18:01:38","docid":0,"fillcolor":"ffffed99","folded":false,"id":22,"markups":[{"content":"<body style=\" font-family:'Microsoft YaHei UI'; font-size:9pt; font-weight:400; font-style:normal;\">\n<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">--</p>\n<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">获得环境Environment之前调用到父类方法的前戏（也就是属性资源的装备）步骤：</p>\n<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">第一步：创建 propertySources资源集合，什么东西都没有存储，底层使用的是CopyO<span style=\" font-style:italic;\">nWriteArrayLi</span>st</p>\n<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">第二步：根据propertySources资源创建解析器<span style=\" font-family:'JetBrains Mono','monospace'; font-size:9.8pt; color:#a9b7c6; background-color:#2b2b2b;\">PropertySourcesPropertyResolver</span></p>\n<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">用来获取资源集合中的 propertySource</p>\n<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">其实就是将 propertySources 放入其中，然后好用这个解析器拿里面的资源</p></body>","date":"2021-12-18 20:21:33","docid":0,"fillcolor":"ffffed99","folded":true,"id":24,"markups":[{"content":"3、回到StandardEnvironment里面\n对 propertySources资源加入资源文件分别是资源文件和资源环境","date":"2021-12-18 20:23:25","docid":0,"fillcolor":"ffffed99","id":25,"originaltext":"customizePropertySources(this.propertySources);","page":6,"textblocks":[{"first":[106.42659759521484,325.21337890625,5.293785095214844,8.779083251953125],"last":[349.729248046875,325.21337890625,5.293792724609375,8.779083251953125],"length":47,"rects":[[106.42659759521484,325.21337890625,248.59644317626953,8.779083251953125]],"start":652,"text":"customizePropertySources(this.propertySources);"}],"type":5}],"originaltext":"private final MutablePropertySources propertySources = new MutablePropertySources(this.logger);","page":6,"textblocks":[{"first":[85.2761459350586,284.69482421875,5.293785095214844,8.779083251953125],"last":[270.3916015625,298.201171875,5.293792724609375,8.779083251953125],"length":96,"rects":[[85.2761459350586,284.69482421875,312.04569244384766,8.779083251953125],[85.2761459350586,298.201171875,190.40924835205078,8.779083251953125]],"start":520,"text":"private final MutablePropertySources propertySources = new \nMutablePropertySources(this.logger);"}],"type":5},{"content":"\n放入配置文件信息资源到PropertySources集合里面去\n\n第三步：使用StandardEnvironment的customizePropertySources方法对资源文件集合加入文件资源","date":"2021-12-18 20:18:42","docid":0,"fillcolor":"ffffed99","id":23,"originaltext":"StandardEnvironment","page":6,"textblocks":[{"first":[75.52161407470703,622.2307739257812,5.3552398681640625,13.5],"last":[172.25730895996094,622.2307739257812,3.4433441162109375,13.5],"length":19,"rects":[[75.52161407470703,622.2307739257812,100.17903900146484,13.5]],"start":423,"text":"StandardEnvironment"}],"type":5},{"content":"==\n属性资源的集合：\n是怎么存储文件资源的，其中文件资源，就是存储对mysql，redis，spring等的配置信息\n\n\n底层定义了一个类，有一个name和map集合，其中文件资源信息存储在这个map集合中\n\nPropertiesPropertySource(String name, Map<String, Object> source)","date":"2022-01-16 14:41:36","docid":0,"fillcolor":"ffffed99","folded":false,"id":89,"originaltext":"PropertySources接口","page":6,"textblocks":[{"first":[75.52161407470703,368.66162109375,6.125846862792969,9.5],"last":[165.898681640625,368.66162109375,9.754531860351562,9.5],"length":17,"rects":[[75.52161407470703,368.66162109375,100.13159942626953,9.5]],"start":311,"text":"PropertySources接口"}],"type":5},{"date":"2022-01-16 14:44:02","docid":0,"fillcolor":"ffffed99","folded":true,"id":90,"markups":[{"content":"获取环境属性值","date":"2021-12-18 20:33:32","docid":0,"fillcolor":"ffffed99","folded":false,"id":27,"originaltext":"getSystemProperties","page":7,"textblocks":[{"first":[174.4618377685547,547.1956176757812,5.345489501953125,13.5],"last":[264.1937255859375,547.1956176757812,4.652923583984375,13.5],"length":19,"rects":[[174.4618377685547,547.1956176757812,94.38481140136719,13.5]],"start":78,"text":"getSystemProperties"}],"type":5},{"date":"2021-12-19 14:57:19","docid":0,"fillcolor":"ffffed99","id":44,"originaltext":"System.getenv，可以获取jvm和OS的一些版本信息。","page":8,"textblocks":[{"first":[347.1243591308594,218.5432586669922,5.355224609375,13.5],"last":[134.04879760742188,233.8505859375,9.754531860351562,12.5],"length":33,"rects":[[347.1243591308594,218.5432586669922,163.77420043945312,13.5],[75.52161407470703,233.8505859375,68.2817153930664,12.5]],"start":95,"text":"System.getenv，可以获取jvm和OS的\n一些版本信息。"}],"type":5}],"originaltext":"PropertySource接口","page":7,"textblocks":[{"first":[75.52161407470703,244.353515625,6.125846862792969,8.5],"last":[161.0500030517578,244.353515625,9.754531860351562,8.5],"length":16,"rects":[[75.52161407470703,244.353515625,95.28292083740234,8.5]],"start":0,"text":"PropertySource接口"}],"type":5}],"originaltext":"Environment构造器","page":6,"textblocks":[{"first":[75.52161407470703,251.35791015625,6.8281707763671875,10.5],"last":[178.99085998535156,251.35791015625,12.193161010742188,10.5],"length":14,"rects":[[75.52161407470703,251.35791015625,115.66240692138672,10.5]],"start":295,"text":"Environment构造器"}],"type":5}],"originaltext":"Environment","page":4,"textblocks":[{"first":[75.52161407470703,609.27392578125,6.8281707763671875,10.5],"last":[149.30245971679688,609.27392578125,5.291839599609375,10.5],"length":11,"rects":[[75.52161407470703,609.27392578125,79.07268524169922,10.5]],"start":424,"text":"Environment"}],"type":5}],"originaltext":"getEnvironment","page":4,"textblocks":[{"first":[75.52161407470703,501.42437744140625,5.345481872558594,13.5],"last":[144.94461059570312,501.42437744140625,3.4433441162109375,13.5],"length":14,"rects":[[75.52161407470703,501.42437744140625,72.86634063720703,13.5]],"start":290,"text":"getEnvironment"}],"type":5},{"date":"2022-01-16 14:01:00","docid":0,"fillcolor":"ffffed99","folded":true,"id":88,"markups":[{"content":"处理占位符 ${} 可以嵌套\n其中替换操作会从 Environment 中的环境属性值中获取","date":"2021-12-18 21:15:59","docid":0,"fillcolor":"ffffed99","folded":false,"id":33,"markups":[{"date":"2022-01-16 15:30:44","docid":0,"fillcolor":"ffffed99","id":91,"originaltext":"createPlaceholderHelper(boolean","page":9,"textblocks":[{"first":[265.1136169433594,626.103515625,5.293792724609375,8.779052734375],"last":[423.8015441894531,626.103515625,5.293792724609375,8.779052734375],"length":31,"rects":[[265.1136169433594,626.103515625,163.98171997070312,8.779052734375]],"start":406,"text":"createPlaceholderHelper(boolean"}],"type":5},{"date":"2022-01-16 15:30:48","docid":0,"fillcolor":"ffffed99","id":92,"originaltext":"doResolvePlaceholders(String","page":10,"textblocks":[{"first":[164.61378479003906,37.830081939697266,5.2937774658203125,8.77907943725586],"last":[307.425048828125,37.830081939697266,5.293792724609375,8.77907943725586],"length":28,"rects":[[164.61378479003906,37.830081939697266,148.1050567626953,8.77907943725586]],"start":394,"text":"doResolvePlaceholders(String"}],"type":5}],"originaltext":"AbstractPropertyResolver","page":9,"textblocks":[{"first":[75.52161407470703,461.45556640625,6.17462158203125,9.5],"last":[187.6694793701172,461.45556640625,3.9798431396484375,9.5],"length":24,"rects":[[75.52161407470703,461.45556640625,116.1277084350586,9.5]],"start":31,"text":"AbstractPropertyResolver"}],"type":5},{"date":"2021-12-18 21:22:40","docid":0,"fillcolor":"ffffed99","id":34,"markups":[{"date":"2022-01-16 15:42:22","docid":0,"fillcolor":"ffffed99","id":93,"originaltext":"System.getProperty和System.getenv获取，但是由于环境变量是无法自定义的，所以其实此处只能通过System.setProperty指定","page":10,"textblocks":[{"first":[153.557861328125,573.4578247070312,5.3552398681640625,13.5],"last":[261.68170166015625,588.4646606445312,9.7545166015625,13.5],"length":82,"rects":[[153.557861328125,573.4578247070312,360.26519775390625,13.5],[75.52161407470703,588.4646606445312,195.91460418701172,13.5]],"start":177,"text":"System.getProperty和System.getenv获取，但是由于环境变量是无法自定义的，所\n以其实此处只能通过System.setProperty指定"}],"type":5}],"originaltext":"原因","page":10,"textblocks":[{"first":[95.03067779541016,216.59228515625,9.754531860351562,12.5],"last":[104.78520965576172,216.59228515625,9.754531860351562,12.5],"length":2,"rects":[[95.03067779541016,216.59228515625,19.509063720703125,12.5]],"start":54,"text":"原因"}],"type":5}],"originaltext":"解析","page":9,"textblocks":[{"first":[75.52161407470703,435.4443359375,9.754531860351562,13.5],"last":[85.2761459350586,435.4443359375,9.754531860351562,13.5],"length":2,"rects":[[75.52161407470703,435.4443359375,19.509063720703125,13.5]],"start":27,"text":"解析"}],"type":5}],"originaltext":"resolvePath","page":4,"textblocks":[{"first":[75.52161407470703,374.66455078125,3.9798507690429688,9.5],"last":[123.084716796875,374.66455078125,5.989288330078125,9.5],"length":11,"rects":[[75.52161407470703,374.66455078125,53.552391052246094,9.5]],"start":152,"text":"resolvePath"}],"type":5}],"originaltext":"setConfigLocations","page":4,"textblocks":[{"first":[295.4472351074219,174.2725067138672,4.652923583984375,13.5],"last":[376.9853210449219,174.2725067138672,4.652923583984375,13.5],"length":18,"rects":[[295.4472351074219,174.2725067138672,86.19100952148438,13.5]],"start":132,"text":"setConfigLocations"}],"type":5}],"originaltext":"设置配置文件路径","page":4,"textblocks":[{"first":[75.52161407470703,145.060546875,14.631797790527344,17.5],"last":[177.94419860839844,145.060546875,14.631790161132812,17.5],"length":8,"rects":[[75.52161407470703,145.060546875,117.05437469482422,17.5]],"start":77,"text":"设置配置文件路径"}],"type":5}],"originaltext":"setConfigLocations(configLocations);","page":3,"textblocks":[{"first":[106.42659759521484,537.562255859375,5.293785095214844,8.779052734375],"last":[291.55377197265625,537.562255859375,5.293792724609375,8.779052734375],"length":36,"rects":[[106.42659759521484,537.562255859375,190.42096710205078,8.779052734375]],"start":260,"text":"setConfigLocations(configLocations);"}],"type":5},{"date":"2022-01-16 15:44:20","docid":0,"fillcolor":"ffffed99","id":94,"markups":[{"content":"1、环境属性校验\n\n2","date":"2021-12-18 21:28:40","docid":0,"fillcolor":"ffffed99","folded":false,"id":35,"markups":[{"date":"2021-12-19 15:52:32","docid":0,"fillcolor":"ffffed99","folded":false,"id":56,"markups":[{"content":"容器刷新工作（前戏）：\n1、设置开启时间\n2、设置关闭、活跃标志位\n3、获得环境对象并设置环境属性值\n4、设置监听器集合和发布事件集合\n\n（这里面也可以子类的拓展initPropertySources()）","date":"2021-12-19 15:53:00","docid":0,"fillcolor":"ffffed99","id":58,"originaltext":"prepareRefresh();","page":10,"textblocks":[{"first":[127.58877563476562,778.42431640625,5.2937774658203125,8.779052734375],"last":[212.21826171875,778.42431640625,5.2937774658203125,8.779052734375],"length":17,"rects":[[127.58877563476562,778.42431640625,89.92326354980469,8.779052734375]],"start":1603,"text":"prepareRefresh();"}],"type":5},{"content":"（等待子类扩展实现）\n1、创建容器对象：DefaultListableBeanFactory\n顺便忽视一些Aware接口\n2、加载xml配置文件的属性到beanFactory中，封装成BeanDefinition\n\n（这里面的customizeBeanFactory可以设置beanFactory是否覆盖allowBeanDefinitionOverriding）","date":"2021-12-19 15:52:46","docid":0,"fillcolor":"ffffed99","id":57,"originaltext":"ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();","page":11,"textblocks":[{"first":[127.58877563476562,31.076663970947266,5.2937774658203125,8.77907943725586],"last":[497.8314208984375,31.076663970947266,5.293792724609375,8.77907943725586],"length":71,"rects":[[127.58877563476562,31.076663970947266,375.53643798828125,8.77907943725586]],"start":24,"text":"ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();"}],"type":5},{"content":"调用BFPP之前的前戏：容器初始化工作：\n初始化beanFactory，对各种属性的填充","date":"2021-12-19 15:53:33","docid":0,"fillcolor":"ffffed99","id":59,"originaltext":"prepareBeanFactory(beanFactory);","page":11,"textblocks":[{"first":[127.58877563476562,58.089359283447266,5.2937774658203125,8.77907943725586],"last":[291.55377197265625,58.089359283447266,5.293792724609375,8.77907943725586],"length":32,"rects":[[127.58877563476562,58.089359283447266,169.2587890625,8.77907943725586]],"start":165,"text":"prepareBeanFactory(beanFactory);"}],"type":5},{"content":"（等待子类扩展实现）\n后置处理器也就是BeanFactoryPostProcessor里面的方法","date":"2021-12-19 15:53:52","docid":0,"fillcolor":"ffffed99","id":60,"originaltext":"postProcessBeanFactory(beanFactory);","page":11,"textblocks":[{"first":[148.75094604492188,98.60791778564453,5.2937774658203125,8.779075622558594],"last":[333.86639404296875,98.60791778564453,5.293792724609375,8.779075622558594],"length":36,"rects":[[148.75094604492188,98.60791778564453,190.40924072265625,8.779075622558594]],"start":305,"text":"postProcessBeanFactory(beanFactory);"}],"type":5},{"content":"实例化并调用BeanFactoryPostProcessor\n对于单例对象一定要调用，spring的","date":"2021-12-19 15:54:10","docid":0,"fillcolor":"ffffed99","id":61,"originaltext":"invokeBeanFactoryPostProcessors(beanFactory);","page":11,"textblocks":[{"first":[148.75094604492188,125.62061309814453,5.2937774658203125,8.779075622558594],"last":[381.4783630371094,125.62061309814453,5.293792724609375,8.779075622558594],"length":45,"rects":[[148.75094604492188,125.62061309814453,238.02120971679688,8.779075622558594]],"start":431,"text":"invokeBeanFactoryPostProcessors(beanFactory);"}],"type":5},{"content":"实例化之前的前戏：\n注册beanPostProcessor在创建bean的前后增强器","date":"2021-12-19 15:54:22","docid":0,"fillcolor":"ffffed99","id":62,"originaltext":"registerBeanPostProcessors(beanFactory);","page":11,"textblocks":[{"first":[148.75094604492188,152.63330078125,5.2937774658203125,8.779083251953125],"last":[355.0285949707031,152.63330078125,5.293792724609375,8.779083251953125],"length":40,"rects":[[148.75094604492188,152.63330078125,211.57144165039062,8.779083251953125]],"start":559,"text":"registerBeanPostProcessors(beanFactory);"}],"type":5},{"content":"国际化","date":"2021-12-19 15:54:27","docid":0,"fillcolor":"ffffed99","id":63,"originaltext":"initMessageSource();","page":11,"textblocks":[{"first":[148.75094604492188,179.64599609375,5.2937774658203125,8.779083251953125],"last":[249.25498962402344,179.64599609375,5.2937774658203125,8.779083251953125],"length":20,"rects":[[148.75094604492188,179.64599609375,105.79782104492188,8.779083251953125]],"start":671,"text":"initMessageSource();"}],"type":5},{"content":"初始化事件派发器","date":"2021-12-19 15:54:43","docid":0,"fillcolor":"ffffed99","id":64,"originaltext":"initApplicationEventMulticaster();","page":11,"textblocks":[{"first":[148.75094604492188,206.65771484375,5.2937774658203125,8.779083251953125],"last":[323.3050231933594,206.65771484375,5.293792724609375,8.779083251953125],"length":34,"rects":[[148.75094604492188,206.65771484375,179.84786987304688,8.779083251953125]],"start":766,"text":"initApplicationEventMulticaster();"}],"type":5},{"content":"子类重写这个方法可以自定义容器刷新逻辑.","date":"2021-12-19 15:54:59","docid":0,"fillcolor":"ffffed99","id":65,"originaltext":"onRefresh();","page":11,"textblocks":[{"first":[148.75094604492188,233.67041015625,5.2937774658203125,8.779083251953125],"last":[206.93064880371094,233.67041015625,5.2937774658203125,8.779083251953125],"length":12,"rects":[[148.75094604492188,233.67041015625,63.473480224609375,8.779083251953125]],"start":891,"text":"onRefresh();"}],"type":5},{"content":"检查监听器并注册.","date":"2021-12-19 15:55:08","docid":0,"fillcolor":"ffffed99","id":66,"originaltext":"registerListeners();","page":11,"textblocks":[{"first":[148.75094604492188,260.68310546875,5.2937774658203125,8.779083251953125],"last":[249.25498962402344,260.68310546875,5.2937774658203125,8.779083251953125],"length":20,"rects":[[148.75094604492188,260.68310546875,105.79782104492188,8.779083251953125]],"start":975,"text":"registerListeners();"}],"type":5},{"content":"这是重点。初始化非懒加载 的单例bean，\n初始化创建非懒加载实例\n填充属性\n初始化方法调用\n调用BeanPostProecessor对实例bean进行后置处理","date":"2021-12-19 15:55:25","docid":0,"fillcolor":"ffffed99","id":67,"originaltext":"finishBeanFactoryInitialization(beanFactory);","page":11,"textblocks":[{"first":[148.75094604492188,287.69580078125,5.2937774658203125,8.779083251953125],"last":[381.4783630371094,287.69580078125,5.293792724609375,8.779083251953125],"length":45,"rects":[[148.75094604492188,287.69580078125,238.02120971679688,8.779083251953125]],"start":1077,"text":"finishBeanFactoryInitialization(beanFactory);"}],"type":5},{"content":"完成context的刷新","date":"2021-12-19 15:55:48","docid":0,"fillcolor":"ffffed99","id":68,"originaltext":"finishRefresh();","page":11,"textblocks":[{"first":[148.75094604492188,314.70849609375,5.2937774658203125,8.779083251953125],"last":[228.09280395507812,314.70849609375,5.2937774658203125,8.779083251953125],"length":16,"rects":[[148.75094604492188,314.70849609375,84.63563537597656,8.779083251953125]],"start":1190,"text":"finishRefresh();"}],"type":5}],"originaltext":"refresh()","page":10,"textblocks":[{"first":[148.73922729492188,737.90576171875,5.2937774658203125,8.779052734375],"last":[191.05397033691406,737.90576171875,5.2937774658203125,8.779052734375],"length":9,"rects":[[148.73922729492188,737.90576171875,47.6085205078125,8.779052734375]],"start":1441,"text":"refresh()"}],"type":5},{"content":"刷新之前的准备工作：\n1、设置开启事件\n2、设置关闭、活跃标志位\n3、获得环境对象\n4、初始化监听器和事件集合对象","date":"2021-12-18 22:27:08","docid":0,"fillcolor":"ffffed99","folded":false,"id":36,"markups":[{"content":"等待拓展","date":"2022-01-16 19:54:19","docid":0,"fillcolor":"ffffed99","id":95,"originaltext":"initPropertySources();","page":11,"textblocks":[{"first":[106.42659759521484,653.11572265625,5.293785095214844,8.779052734375],"last":[217.50587463378906,653.11572265625,5.2937774658203125,8.779052734375],"length":22,"rects":[[106.42659759521484,653.11572265625,116.37305450439453,8.779052734375]],"start":1941,"text":"initPropertySources();"}],"type":5},{"content":"获得环境，使用环境进行属性的校验\n会把requiredProperties里面的值拿出来校验看看环境里面有没有","date":"2021-12-18 22:28:11","docid":0,"fillcolor":"ffffed99","id":37,"originaltext":"getEnvironment().validateRequiredProperties();","page":11,"textblocks":[{"first":[106.42659759521484,693.63427734375,5.293785095214844,8.779052734375],"last":[344.4437561035156,693.63427734375,5.293792724609375,8.779052734375],"length":46,"rects":[[106.42659759521484,693.63427734375,243.31095123291016,8.779052734375]],"start":2100,"text":"getEnvironment().validateRequiredProperties();"}],"type":5},{"content":"validateRequiredProperties属性校验方法\n看看有没有缺少的属性","date":"2021-12-18 22:28:30","docid":0,"fillcolor":"ffffed99","folded":true,"id":38,"markups":[{"content":"缺少所需属性异常，会将requiredProperties中的属性放到\nmissingRequiredProperties中，然后遍历它，有就表示缺少了要抛出缺少属性异常\n","date":"2021-12-18 22:33:20","docid":0,"fillcolor":"ffffed99","id":41,"originaltext":"MissingRequiredPropertiesException","page":12,"textblocks":[{"first":[106.42659759521484,234.42138671875,5.293785095214844,8.779083251953125],"last":[280.98760986328125,234.42138671875,5.293792724609375,8.779083251953125],"length":34,"rects":[[106.42659759521484,234.42138671875,179.85480499267578,8.779083251953125]],"start":497,"text":"MissingRequiredPropertiesException"}],"type":5},{"content":"性循环从requiredProperties拿出要校验的属性","date":"2021-12-18 22:29:49","docid":0,"fillcolor":"ffffed99","id":39,"originaltext":"requiredProperties是通过setRequiredProperties方法设置的，保存在一个list里面，默认是空的，也就是不需要校验任何属性。","page":12,"textblocks":[{"first":[75.52161407470703,397.0767517089844,3.9798507690429688,14.5],"last":[182.82147216796875,412.88360595703125,9.754531860351562,13.5],"length":80,"rects":[[75.52161407470703,397.0767517089844,435.82469940185547,14.5],[75.52161407470703,412.88360595703125,117.05438995361328,13.5]],"start":107,"text":"requiredProperties是通过setRequiredProperties方法设置的，保存在一个list里面，默认是空的，也\n就是不需要校验任何属性。"}],"type":5}],"originaltext":"属性校验","page":12,"textblocks":[{"first":[75.52161407470703,29.255859375,12.193168640136719,15.5],"last":[112.10111236572266,29.255859375,12.193168640136719,15.5],"length":4,"rects":[[75.52161407470703,29.255859375,48.772666931152344,15.5]],"start":0,"text":"属性校验"}],"type":5}],"originaltext":"prepareRefresh","page":11,"textblocks":[{"first":[75.52161407470703,536.990234375,9.261924743652344,11.5],"last":[179.99264526367188,536.990234375,9.61309814453125,11.5],"length":14,"rects":[[75.52161407470703,536.990234375,114.0841293334961,11.5]],"start":0,"text":"prepareRefresh"}],"type":5},{"content":"1、HierarchicalBeanFactory\n连接父子容器\n2、ListableBeanFactory\n枚举所有的bean实例\n3、ConfigurableBeanFactory\n提供对bean实例的配置方法\n4、DefaultListableBeanFactory\n我们获取的bean容器","date":"2021-12-18 22:38:21","docid":0,"fillcolor":"ffffed99","folded":true,"id":42,"markups":[{"content":"1、销毁已有的beanFactory并关闭","date":"2021-12-19 15:26:58","docid":0,"fillcolor":"ffffed99","folded":true,"id":49,"markups":[{"content":"创建BeanFactory","date":"2021-12-19 15:58:09","docid":0,"fillcolor":"ffffed99","id":70,"originaltext":"DefaultListableBeanFactory beanFactory = createBeanFactory();","page":12,"textblocks":[{"first":[106.42659759521484,610.34619140625,5.293785095214844,8.779052734375],"last":[423.7813720703125,610.34619140625,5.293792724609375,8.779052734375],"length":61,"rects":[[106.42659759521484,610.34619140625,322.64856719970703,8.779052734375]],"start":1047,"text":"DefaultListableBeanFactory beanFactory = createBeanFactory();"}],"type":5},{"content":"BeanFactory需要一个序列号","date":"2021-12-19 15:57:54","docid":0,"fillcolor":"ffffed99","id":69,"originaltext":"beanFactory.setSerializationId(getId());","page":12,"textblocks":[{"first":[106.42659759521484,623.85205078125,5.293785095214844,8.779052734375],"last":[312.69671630859375,623.85205078125,5.293792724609375,8.779052734375],"length":40,"rects":[[106.42659759521484,623.85205078125,211.56391143798828,8.779052734375]],"start":1113,"text":"beanFactory.setSerializationId(getId());"}],"type":5},{"content":"bean的自定义配置\n1、设置beanFactory的属性值\n2、是否可以覆盖同名称的不同定义的对象以及循环依赖","date":"2021-12-19 15:26:48","docid":0,"fillcolor":"ffffed99","id":48,"originaltext":"customizeBeanFactory(beanFactory);","page":12,"textblocks":[{"first":[106.42659759521484,637.35888671875,5.293785095214844,8.779052734375],"last":[280.9668273925781,637.35888671875,5.293792724609375,8.779052734375],"length":34,"rects":[[106.42659759521484,637.35888671875,179.83402252197266,8.779052734375]],"start":1158,"text":"customizeBeanFactory(beanFactory);"}],"type":5},{"content":"开始要解析xml文件\n\n因为有多个xml的spring配置文件，所以对于不同的文件使用了很多的重载去判断\n\n这里会把ConfigLocations获取出来，最开始设置进去了，这里从xml配置文件的bean变成beanDefinition","date":"2021-12-19 15:30:20","docid":0,"fillcolor":"ffffed99","id":52,"originaltext":"loadBeanDefinitions(beanFactory);","page":12,"textblocks":[{"first":[106.42659759521484,650.86474609375,5.293785095214844,8.779052734375],"last":[275.67919921875,650.86474609375,5.293792724609375,8.779052734375],"length":33,"rects":[[106.42659759521484,650.86474609375,174.54639434814453,8.779052734375]],"start":1197,"text":"loadBeanDefinitions(beanFactory);"}],"type":5}],"originaltext":"refreshBeanFactory()","page":12,"textblocks":[{"first":[196.32774353027344,515.80224609375,5.2937774658203125,8.779052734375],"last":[296.8296813964844,515.80224609375,5.293792724609375,8.779052734375],"length":20,"rects":[[196.32774353027344,515.80224609375,105.79573059082031,8.779052734375]],"start":851,"text":"refreshBeanFactory()"}],"type":5},{"content":"1、HierarchicalBeanFactory\n连接父子容器\n2、ListableBeanFactory\n枚举所有的bean实例\n3、ConfigurableBeanFactory\n提供对bean实例的配置方法\n4、DefaultListableBeanFactory\n我们获取的bean容器","date":"2021-12-19 15:22:39","docid":0,"fillcolor":"ffffed99","id":47,"originaltext":"BeanFactory接口","page":13,"textblocks":[{"first":[75.52161407470703,32.2548828125,8.193809509277344,10.5],"last":[164.1304473876953,32.2548828125,12.193161010742188,10.5],"length":13,"rects":[[75.52161407470703,32.2548828125,100.80199432373047,10.5]],"start":0,"text":"BeanFactory接口"}],"type":5},{"content":"bean的自定义配置\n1、设置beanFactory的属性值\n2、是否可以覆盖同名称的不同定义的对象以及循环依赖","date":"2021-12-19 15:27:13","docid":0,"fillcolor":"ffffed99","id":50,"originaltext":"BeanFactory定制","page":13,"textblocks":[{"first":[75.52161407470703,528.986328125,8.193809509277344,10.5],"last":[164.1304473876953,528.986328125,12.193161010742188,10.5],"length":13,"rects":[[75.52161407470703,528.986328125,100.80199432373047,10.5]],"start":37,"text":"BeanFactory定制"}],"type":5},{"content":"读取xml文件\n1、需要知道xml的规范，也就是xml文件的dtd文件和xsd文件，没有网络它会获取本地的\n","date":"2021-12-19 15:28:30","docid":0,"fillcolor":"ffffed99","folded":true,"id":51,"markups":[{"date":"2022-01-16 21:10:15","docid":0,"fillcolor":"ffffed99","folded":true,"id":96,"markups":[{"content":"使用适配器模式匹配beanFactory\n虽然操作的是XmlBeanDefinitionReader，但是实际操作的还是beanFactory\n也就是把beanFactory装一个转接头，好用来操作\n因为不同的配置文件，比如xml、yaml，properties等，都需要不同的Read","date":"2022-01-16 21:10:30","docid":0,"fillcolor":"ffffed99","id":97,"originaltext":"XmlBeanDefinitionReader beanDefinitionReader = new XmlBeanDefinitionReader(beanFactory);","page":14,"textblocks":[{"first":[106.42659759521484,130.87353515625,5.293785095214844,8.779083251953125],"last":[275.6909484863281,144.37939453125,5.293792724609375,8.779083251953125],"length":89,"rects":[[106.42659759521484,130.87353515625,269.75650787353516,8.779083251953125],[85.2761459350586,144.37939453125,195.7085952758789,8.779083251953125]],"start":369,"text":"XmlBeanDefinitionReader beanDefinitionReader = new \nXmlBeanDefinitionReader(beanFactory);"}],"type":5},{"content":"设置环境对象","date":"2022-01-16 21:14:34","docid":0,"fillcolor":"ffffed99","id":98,"originaltext":"setEnvironment","page":14,"textblocks":[{"first":[217.50164794921875,184.89794921875,5.2937774658203125,8.779083251953125],"last":[286.26800537109375,184.89794921875,5.293792724609375,8.779083251953125],"length":14,"rects":[[217.50164794921875,184.89794921875,74.06015014648438,8.779083251953125]],"start":585,"text":"setEnvironment"}],"type":5},{"content":"设置资源加载器，它把上下文给配置进去了，这样就变成了\nXmlBeanDefinitionReader 包 上下文 和 beanFactory","date":"2022-01-16 21:14:41","docid":0,"fillcolor":"ffffed99","id":99,"originaltext":"setResourceLoader","page":14,"textblocks":[{"first":[217.50164794921875,198.40478515625,5.2937774658203125,8.779083251953125],"last":[302.13714599609375,198.40478515625,5.293792724609375,8.779083251953125],"length":17,"rects":[[217.50164794921875,198.40478515625,89.92929077148438,8.779083251953125]],"start":649,"text":"setResourceLoader"}],"type":5},{"content":"设置实体处理器\nEntity实体就是xml里面的标签对象\n：\n也就是读取本地的dtd或者xsd文件，也就是读取xml文件的标签对象的规范文件，用来完成解析xml文件的工作\n\n其中有个点就是：这些标签对象的规范文件时候并没有显式的存储，而是懒加载的形式放到了toString中，等待spring调用","date":"2022-01-16 21:14:59","docid":0,"fillcolor":"ffffed99","id":100,"originaltext":"setEntityResolver","page":14,"textblocks":[{"first":[217.50164794921875,211.91064453125,5.2937774658203125,8.779083251953125],"last":[302.13714599609375,211.91064453125,5.293792724609375,8.779083251953125],"length":17,"rects":[[217.50164794921875,211.91064453125,89.92929077148438,8.779083251953125]],"start":699,"text":"setEntityResolver"}],"type":5},{"content":"初始化BeanDefinitionReader，设置配置文件是否需要验证","date":"2022-01-16 21:39:13","docid":0,"fillcolor":"ffffed99","id":102,"originaltext":"initBeanDefinitionReader","page":14,"textblocks":[{"first":[106.42659759521484,265.93603515625,5.293785095214844,8.779083251953125],"last":[228.09042358398438,265.93603515625,5.2937774658203125,8.779083251953125],"length":24,"rects":[[106.42659759521484,265.93603515625,126.95760345458984,8.779083251953125]],"start":904,"text":"initBeanDefinitionReader"}],"type":5},{"content":"真正创建出BeanDefinition\n会用到已经被我们处理过的在上下文的configLocations","date":"2022-01-16 21:39:09","docid":0,"fillcolor":"ffffed99","id":101,"originaltext":"loadBeanDefinitions","page":14,"textblocks":[{"first":[106.42659759521484,279.44189453125,5.293785095214844,8.779083251953125],"last":[201.64175415039062,279.44189453125,5.2937774658203125,8.779083251953125],"length":19,"rects":[[106.42659759521484,279.44189453125,100.5089340209961,8.779083251953125]],"start":956,"text":"loadBeanDefinitions"}],"type":5}],"originaltext":"loadBeanDefinitions","page":14,"textblocks":[{"first":[219.45948791503906,55.71757888793945,2.4678955078125,13.499996185302734],"last":[307.03564453125,55.71757888793945,4.652923583984375,13.499996185302734],"length":19,"rects":[[219.45948791503906,55.71757888793945,92.22908020019531,13.499996185302734]],"start":38,"text":"loadBeanDefinitions"}],"type":5},{"content":"也就是读取本地的dtd或者xsd文件，也就是读取xml文件中标签对象的规范文件，用来完成解析xml文件的工作","date":"2021-12-19 15:33:53","docid":0,"fillcolor":"ffffed99","id":53,"originaltext":"EntityResolver","page":14,"textblocks":[{"first":[75.52161407470703,323.890625,5.4625396728515625,8.5],"last":[141.76463317871094,323.890625,4.428558349609375,8.5],"length":14,"rects":[[75.52161407470703,323.890625,70.67157745361328,8.5]],"start":74,"text":"EntityResolver"}],"type":5},{"content":"bean释义读取器","date":"2021-12-19 15:35:24","docid":0,"fillcolor":"ffffed99","id":54,"originaltext":"BeanDefinitionReader","page":14,"textblocks":[{"first":[75.52161407470703,626.28125,6.555046081542969,8.5],"last":[178.94891357421875,626.28125,4.428558349609375,8.5],"length":20,"rects":[[75.52161407470703,626.28125,107.8558578491211,8.5]],"start":179,"text":"BeanDefinitionReader"}],"type":5},{"content":"使用XmlBeanDefinitionReader的loadBeanDefinitions进行读取路径\n其中读取路径使用getResource(location)\n然后使用isPattern(String path)进行判断","date":"2021-12-19 15:43:07","docid":0,"fillcolor":"ffffed99","folded":true,"id":55,"markups":[{"content":"真正的解析\n对每一个xml文件地址configLocation 解析\n\n获取在super()中设置的模式解析器","date":"2022-01-17 13:31:32","docid":0,"fillcolor":"ffffed99","folded":true,"id":103,"markups":[{"content":"将xml字符串文件地址，解析成一个Resource","date":"2022-01-17 14:06:30","docid":0,"fillcolor":"ffffed99","folded":false,"id":104,"markups":[{"date":"2022-01-17 14:08:00","docid":0,"fillcolor":"ffffed99","id":105,"originaltext":"//构造器中初始化，PathMatchingResourcePatternResolver对象","page":16,"textblocks":[{"first":[106.42659759521484,472.28173828125,5.293785095214844,8.779083251953125],"last":[381.158203125,472.28173828125,8.779083251953125,8.779083251953125],"length":47,"rects":[[106.42659759521484,472.28173828125,283.5106887817383,8.779083251953125]],"start":1107,"text":"//构造器中初始化，PathMatchingResourcePatternResolver对象"}],"type":5}],"originaltext":"getResource的实现","page":16,"textblocks":[{"first":[75.52161407470703,413.931640625,5.345481872558594,8.5],"last":[151.42405700683594,413.931640625,9.754531860351562,8.5],"length":14,"rects":[[75.52161407470703,413.931640625,85.65697479248047,8.5]],"start":0,"text":"getResource的实现"}],"type":5}],"originaltext":"loadBeanDefinitions","page":15,"textblocks":[{"first":[143.4516143798828,735.65380859375,5.2937774658203125,8.779052734375],"last":[238.666748046875,735.65380859375,5.2937774658203125,8.779052734375],"length":19,"rects":[[143.4516143798828,735.65380859375,100.5089111328125,8.779052734375]],"start":774,"text":"loadBeanDefinitions"}],"type":5},{"content":"对解析好成Resource的xml路径，放入重载的loadBeanDefinitions()中，\n来解析成BeanDefinition\n\n将路径的String封装成String[]数组\n遍历每一个String，封装成Resource[]数组\n遍历Resource[]数组，将Resource变成EncodedResource\n\n然后真正的解析：\n","date":"2022-01-17 14:08:14","docid":0,"fillcolor":"ffffed99","id":106,"markups":[{"content":"解析的时候会先对Resource设置编码格式的encodedResource","date":"2022-01-17 14:22:12","docid":0,"fillcolor":"ffffed99","id":107,"originaltext":"Resource resource","page":17,"textblocks":[{"first":[249.23904418945312,601.34228515625,5.2937774658203125,8.779052734375],"last":[333.8673400878906,601.34228515625,5.293792724609375,8.779052734375],"length":17,"rects":[[249.23904418945312,601.34228515625,89.92208862304688,8.779052734375]],"start":1025,"text":"Resource resource"}],"type":5},{"content":"对封装好后的encodedResource以流的形式InputStream进行解析","date":"2022-01-17 14:23:13","docid":0,"fillcolor":"ffffed99","id":108,"markups":[{"content":"对Resource的流InputStream进行解析变成Document文档对象","date":"2022-01-17 14:35:58","docid":0,"fillcolor":"ffffed99","folded":false,"id":110,"markups":[{"content":"将流InputStream进行解析变成Document文档对象的工作","date":"2022-01-17 14:36:25","docid":0,"fillcolor":"ffffed99","folded":true,"id":111,"markups":[{"content":"解析变成Document文档对象的工作","date":"2022-01-17 14:44:12","docid":0,"fillcolor":"ffffed99","id":112,"originaltext":"loadDocument","page":18,"textblocks":[{"first":[190.7518768310547,782.6044921875,2.4678955078125,9.5],"last":[254.6830596923828,782.6044921875,3.4433441162109375,9.5],"length":12,"rects":[[190.7518768310547,782.6044921875,67.37452697753906,9.5]],"start":464,"text":"loadDocument"}],"type":5}],"originaltext":"doLoadDocument:","page":18,"textblocks":[{"first":[75.52161407470703,554.2470703125,5.979530334472656,8.5],"last":[157.36212158203125,554.2470703125,2.5947113037109375,8.5],"length":15,"rects":[[75.52161407470703,554.2470703125,84.43521881103516,8.5]],"start":158,"text":"doLoadDocument:"}],"type":5},{"content":"这里是将Document文档对象变成beanDefinition对象\n这样beanDefinition对象就出来了","date":"2022-01-17 14:55:17","docid":0,"fillcolor":"ffffed99","id":113,"markups":[{"content":"创建对Document文档对象的解析器","date":"2022-01-17 15:02:04","docid":0,"fillcolor":"ffffed99","id":114,"originaltext":"createBeanDefinitionDocumentReader:","page":19,"textblocks":[{"first":[75.52161407470703,663.548828125,4.643157958984375,9.5],"last":[251.73721313476562,663.548828125,2.5947113037109375,9.5],"length":35,"rects":[[75.52161407470703,663.548828125,178.81031036376953,9.5]],"start":92,"text":"createBeanDefinitionDocumentReader:"}],"type":5},{"date":"2022-01-17 15:04:38","docid":0,"fillcolor":"ffffed99","folded":false,"id":115,"markups":[{"content":"真正解析docnment文件对象的地方\n\n读取后放入\nbeanDefinitionMap\nbeanDefinitionNames\n\n","date":"2022-01-17 15:06:58","docid":0,"fillcolor":"ffffed99","folded":true,"id":116,"markups":[{"content":"等待拓展实现","date":"2022-01-17 15:12:10","docid":0,"fillcolor":"ffffed99","id":117,"originaltext":"preProcessXml(root);","page":20,"textblocks":[{"first":[106.42659759521484,748.40966796875,5.293785095214844,8.779052734375],"last":[206.91680908203125,748.40966796875,5.2937774658203125,8.779052734375],"length":20,"rects":[[106.42659759521484,748.40966796875,105.78398895263672,8.779052734375]],"start":1686,"text":"preProcessXml(root);"}],"type":5},{"content":"等待拓展实现","date":"2022-01-17 15:12:15","docid":0,"fillcolor":"ffffed99","id":118,"originaltext":"postProcessXml(root);","page":20,"textblocks":[{"first":[106.42659759521484,775.42138671875,5.293785095214844,8.779052734375],"last":[212.2044219970703,775.42138671875,5.2937774658203125,8.779052734375],"length":21,"rects":[[106.42659759521484,775.42138671875,111.07160186767578,8.779052734375]],"start":1758,"text":"postProcessXml(root);"}],"type":5},{"content":"从根节点一层一层的解析","date":"2022-01-17 15:14:41","docid":0,"fillcolor":"ffffed99","folded":false,"id":119,"markups":[{"date":"2022-01-17 15:18:26","docid":0,"fillcolor":"ffffed99","id":120,"originaltext":"默认命名空间解析","page":22,"textblocks":[{"first":[75.52161407470703,177.576171875,12.193168640136719,15.5],"last":[160.87376403808594,177.576171875,12.193161010742188,15.5],"length":8,"rects":[[75.52161407470703,177.576171875,97.5453109741211,15.5]],"start":29,"text":"默认命名空间解析"}],"type":5}],"originaltext":"parseBeanDefinitions","page":21,"textblocks":[{"first":[259.11163330078125,635.287109375,5.979522705078125,8.5],"last":[352.4331970214844,635.287109375,4.652923583984375,8.5],"length":20,"rects":[[259.11163330078125,635.287109375,97.9744873046875,8.5]],"start":458,"text":"parseBeanDefinitions"}],"type":5}],"originaltext":"doRegisterBeanDefinitions:","page":20,"textblocks":[{"first":[75.52161407470703,459.453125,5.979530334472656,9.5],"last":[196.7216796875,459.453125,2.5947113037109375,9.5],"length":26,"rects":[[75.52161407470703,459.453125,123.7947769165039,9.5]],"start":430,"text":"doRegisterBeanDefinitions:"}],"type":5}],"originaltext":"registerBeanDefinitions:","page":20,"textblocks":[{"first":[259.11163330078125,314.38671875,3.9798583984375,9.5],"last":[366.39190673828125,314.38671875,2.594696044921875,9.5],"length":24,"rects":[[259.11163330078125,314.38671875,109.87496948242188,9.5]],"start":405,"text":"registerBeanDefinitions:"}],"type":5}],"originaltext":"Bean解析","page":19,"textblocks":[{"first":[75.52161407470703,494.470703125,6.555046081542969,9.5],"last":[109.89585876464844,494.470703125,9.754531860351562,9.5],"length":6,"rects":[[75.52161407470703,494.470703125,44.12877655029297,9.5]],"start":35,"text":"Bean解析"}],"type":5}],"originaltext":"doLoadBeanDefinitions：","page":18,"textblocks":[{"first":[75.52161407470703,437.1923828125,5.979530334472656,8.5],"last":[182.20704650878906,437.1923828125,9.754531860351562,8.5],"length":22,"rects":[[75.52161407470703,437.1923828125,116.4399642944336,8.5]],"start":135,"text":"doLoadBeanDefinitions："}],"type":5}],"originaltext":"EncodedResource encodedResource","page":18,"textblocks":[{"first":[249.23904418945312,315.45849609375,5.2937774658203125,8.779083251953125],"last":[407.9203796386719,315.45849609375,5.293792724609375,8.779083251953125],"length":31,"rects":[[249.23904418945312,315.45849609375,163.97512817382812,8.779083251953125]],"start":509,"text":"EncodedResource encodedResource"}],"type":5}],"originaltext":"配置文件加载","page":17,"textblocks":[{"first":[75.52161407470703,411.43359375,9.754531860351562,13.5],"last":[124.29427337646484,411.43359375,9.754524230957031,13.5],"length":6,"rects":[[75.52161407470703,411.43359375,58.527183532714844,13.5]],"start":59,"text":"配置文件加载"}],"type":5}],"originaltext":"路径解析(Ant)","page":15,"textblocks":[{"first":[75.52161407470703,305.8828125,9.754531860351562,12.5],"last":[135.21934509277344,305.8828125,3.306793212890625,12.5],"length":9,"rects":[[75.52161407470703,305.8828125,63.00452423095703,12.5]],"start":2,"text":"路径解析(Ant)"}],"type":5}],"originaltext":"Bean加载","page":14,"textblocks":[{"first":[75.52161407470703,32.255859375,8.193809509277344,10.5],"last":[118.48942565917969,32.255859375,12.193161010742188,10.5],"length":6,"rects":[[75.52161407470703,32.255859375,55.160972595214844,10.5]],"start":0,"text":"Bean加载"}],"type":5}],"originaltext":"BeanFactory创建","page":12,"textblocks":[{"first":[75.52161407470703,437.3472595214844,9.832565307617188,19.5],"last":[181.85220336914062,437.3472595214844,14.631805419921875,19.5],"length":13,"rects":[[75.52161407470703,437.3472595214844,120.96239471435547,19.5]],"start":188,"text":"BeanFactory创建"}],"type":5},{"date":"2022-01-15 19:32:07","docid":0,"fillcolor":"ffffed99","folded":true,"id":71,"markups":[{"date":"2022-01-15 19:32:56","docid":0,"fillcolor":"ffffed99","id":72,"originaltext":"BeanExpressionResolver","page":32,"textblocks":[{"first":[75.52161407470703,430.69140625,8.193809509277344,10.5],"last":[218.7547149658203,430.69140625,5.5356903076171875,10.5],"length":22,"rects":[[75.52161407470703,430.69140625,148.76879119873047,10.5]],"start":119,"text":"BeanExpressionResolver"}],"type":5},{"date":"2022-01-15 19:33:19","docid":0,"fillcolor":"ffffed99","id":73,"originaltext":"PropertyEditorRegistrar","page":33,"textblocks":[{"first":[75.52161407470703,312.93865966796875,7.657310485839844,16.5],"last":[215.70645141601562,312.93865966796875,5.5356903076171875,16.5],"length":23,"rects":[[75.52161407470703,312.93865966796875,145.72052764892578,16.5]],"start":30,"text":"PropertyEditorRegistrar"}],"type":5},{"date":"2022-01-15 19:33:48","docid":0,"fillcolor":"ffffed99","id":74,"originaltext":"环境注入","page":34,"textblocks":[{"first":[75.52161407470703,29.255859375,12.193168640136719,15.5],"last":[112.10111236572266,29.255859375,12.193168640136719,15.5],"length":4,"rects":[[75.52161407470703,29.255859375,48.772666931152344,15.5]],"start":0,"text":"环境注入"}],"type":5},{"date":"2022-01-15 19:33:54","docid":0,"fillcolor":"ffffed99","id":75,"originaltext":"依赖解析忽略","page":34,"textblocks":[{"first":[75.52161407470703,358.658203125,12.193168640136719,14.5],"last":[136.48744201660156,358.658203125,12.193161010742188,14.5],"length":6,"rects":[[75.52161407470703,358.658203125,73.15898895263672,14.5]],"start":154,"text":"依赖解析忽略"}],"type":5},{"date":"2022-01-15 19:34:15","docid":0,"fillcolor":"ffffed99","id":76,"originaltext":"bean伪装","page":34,"textblocks":[{"first":[75.52161407470703,504.9765625,7.7182769775390625,10.5],"last":[118.01313018798828,504.9765625,12.193168640136719,10.5],"length":6,"rects":[[75.52161407470703,504.9765625,54.68468475341797,10.5]],"start":188,"text":"bean伪装"}],"type":5},{"date":"2022-01-15 19:35:15","docid":0,"fillcolor":"ffffed99","id":77,"originaltext":"LoadTimeWeaver","page":34,"textblocks":[{"first":[75.52161407470703,658.2468872070312,6.889137268066406,13.5],"last":[175.50555419921875,658.2468872070312,5.5356903076171875,13.5],"length":14,"rects":[[75.52161407470703,658.2468872070312,105.5196304321289,13.5]],"start":275,"text":"LoadTimeWeaver"}],"type":5},{"date":"2022-01-15 19:35:58","docid":0,"fillcolor":"ffffed99","id":78,"originaltext":"注册环境","page":35,"textblocks":[{"first":[75.52161407470703,171.82421875,12.193168640136719,14.5],"last":[112.10111236572266,171.82421875,12.193168640136719,14.5],"length":4,"rects":[[75.52161407470703,171.82421875,48.772666931152344,14.5]],"start":43,"text":"注册环境"}],"type":5}],"originaltext":"prepareBeanFactory","page":32,"textblocks":[{"first":[75.52161407470703,377.91796875,9.261924743652344,11.5],"last":[216.8355255126953,377.91796875,8.325485229492188,11.5],"length":18,"rects":[[75.52161407470703,377.91796875,149.63939666748047,11.5]],"start":56,"text":"prepareBeanFactory"}],"type":5},{"content":"我们自己定义的后置处理器","date":"2022-01-15 19:36:49","docid":0,"fillcolor":"ffffed99","id":79,"originaltext":"postProcessBeanFactory","page":35,"textblocks":[{"first":[75.52161407470703,438.447265625,9.261924743652344,12.5],"last":[246.43565368652344,438.447265625,8.325485229492188,12.5],"length":22,"rects":[[75.52161407470703,438.447265625,179.2395248413086,12.5]],"start":95,"text":"postProcessBeanFactory"}],"type":5},{"content":"spring自己的后置处理器，需要实例化并调用，执行的时候会排序执行，最后执行没有排序的BFPP","date":"2022-01-15 19:48:29","docid":0,"fillcolor":"ffffed99","id":80,"originaltext":"invokeBeanFactoryPostProcessors","page":35,"textblocks":[{"first":[75.52161407470703,494.22265625,4.462699890136719,11.5],"last":[319.5653991699219,494.22265625,7.272003173828125,11.5],"length":31,"rects":[[75.52161407470703,494.22265625,251.31578826904297,11.5]],"start":173,"text":"invokeBeanFactoryPostProcessors"}],"type":5}],"originaltext":"refresh","page":10,"textblocks":[{"first":[75.52161407470703,640.2890625,7.749977111816406,12.5],"last":[126.2890853881836,640.2890625,11.215278625488281,12.5],"length":7,"rects":[[75.52161407470703,640.2890625,61.982749938964844,12.5]],"start":306,"text":"refresh"}],"type":5}],"originaltext":"refresh();","page":3,"textblocks":[{"first":[127.58877563476562,578.0810546875,5.2937774658203125,8.779052734375],"last":[175.19325256347656,578.0810546875,5.2937774658203125,8.779052734375],"length":10,"rects":[[127.58877563476562,578.0810546875,52.89825439453125,8.779052734375]],"start":337,"text":"refresh();"}],"type":5}],"originaltext":"ClassPathXmlApplicationContext","page":3,"textblocks":[{"first":[122.30116271972656,483.537109375,5.293785095214844,8.779083251953125],"last":[275.7032470703125,483.537109375,5.293792724609375,8.779083251953125],"length":30,"rects":[[122.30116271972656,483.537109375,158.6958770751953,8.779083251953125]],"start":109,"text":"ClassPathXmlApplicationContext"}],"type":5}],"originaltext":"ClassPathXmlApplicationContext","page":2,"textblocks":[{"first":[75.52161407470703,630.1370849609375,10.873863220214844,20.5],"last":[349.1947937011719,630.1370849609375,7.4085693359375,20.5],"length":30,"rects":[[75.52161407470703,630.1370849609375,281.08174896240234,20.5]],"start":226,"text":"ClassPathXmlApplicationContext"}],"type":5}],"originaltext":"基本","page":2,"textblocks":[{"first":[75.52161407470703,229.1025390625,21.94770050048828,23.5],"last":[97.46931457519531,229.1025390625,21.94769287109375,23.5],"length":2,"rects":[[75.52161407470703,229.1025390625,43.89539337158203,23.5]],"start":181,"text":"基本"}],"type":5},{"content":"BeanDefinitionHolder是BeanDefinition对象的封装类，封装了BeanDefinition，bean的名字和别名，用来完成IOC容器的注册\n得到这个BeanDefinitionHolder以为着BeanDefinition是通过BeanDefinitionParserDelegate对xml元素的信息按照spring的bean规则进行","date":"2022-01-17 15:37:00","docid":0,"fillcolor":"ffffed99","id":121,"originaltext":"processBeanDefinition","page":23,"textblocks":[{"first":[259.11163330078125,623.279296875,5.979522705078125,8.5],"last":[356.20819091796875,623.279296875,5.989288330078125,8.5],"length":21,"rects":[[259.11163330078125,623.279296875,103.08584594726562,8.5]],"start":222,"text":"processBeanDefinition"}],"type":5}],"maxid":121,"title":"SpringCore","unimportant":[]}
{"EpubVersion":2,"filepath":"","floatingtheme":[],"folded":false,"markups":[{"content":"总结：\n1、普通的bean是怎么创建\n2、怎么从容器里面拿bean并且放入类中的属性\n3、入口在，以及入口细节\n4、bean的作用范围和生命周期","date":"2021-12-21 16:15:36","docid":0,"fillcolor":"ffffed99","id":20,"originaltext":"Spring 第二天","page":0,"textblocks":[{"first":[240.85000610351562,96.6003189086914,12.357101440429688,24.099609375],"last":[353.75,96.6003189086914,22.225006103515625,24.099609375],"length":10,"rects":[[240.85000610351562,96.6003189086914,135.125,24.099609375]],"start":83,"text":"Spring 第二天"}],"type":5},{"date":"2021-12-20 20:19:25","docid":0,"fillcolor":"ffffed99","folded":false,"id":1,"markups":[{"content":"也就是说spring需要扫描包才可以知道哪些类加了注解","date":"2021-12-20 20:19:58","docid":0,"fillcolor":"ffffed99","id":2,"originaltext":"创建 spring 的 xml 配置文件并开启对注解的支持","page":11,"textblocks":[{"first":[163.3800048828125,125.04058837890625,13.800003051757812,13.800003051757812],"last":[449.25531005859375,125.04058837890625,13.79998779296875,13.800003051757812],"length":29,"rects":[[163.3800048828125,125.04058837890625,299.67529296875,13.800003051757812]],"start":123,"text":"创建 spring 的 xml 配置文件并开启对注解的支持"}],"type":5},{"content":"创建普通bean\n\n创建bean到容器中\n\n存储在底层map集合中的key默认是类名，value是这个类的实例","date":"2021-12-20 20:20:41","docid":0,"fillcolor":"ffffed99","id":3,"originaltext":"用于创建对象的","page":12,"textblocks":[{"first":[106.9000015258789,125.04058837890625,13.800003051757812,13.800003051757812],"last":[191.59060668945312,125.04058837890625,13.800003051757812,13.800003051757812],"length":7,"rects":[[106.9000015258789,125.04058837890625,98.49060821533203,13.800003051757812]],"start":99,"text":"用于创建对象的"}],"type":5},{"content":"拿bean\n\n获取容器中的bean","date":"2021-12-20 20:21:42","docid":0,"fillcolor":"ffffed99","folded":false,"id":4,"markups":[{"content":"他会去springIOC中的容器中寻找相应类型的bean\n就算是实现类也可以\n\n如果没有相应类型的bean会报错\n若是有多个相应类型的bean，会先使用相应类型进行匹配，然后使用key进行匹配，如果都没有匹配，报错","date":"2021-12-20 20:27:13","docid":0,"fillcolor":"ffffed99","id":5,"originaltext":"@Autowired","page":12,"textblocks":[{"first":[112.93000030517578,611.25,12.833999633789062,13.5],"last":[181.26759338378906,611.25,7.6728057861328125,13.5],"length":10,"rects":[[112.93000030517578,611.25,76.0103988647461,13.5]],"start":586,"text":"@Autowired"}],"type":5},{"content":"放在类上就要与@Autowired强制绑定使用，指定id\n放在方法上可以单独使用","date":"2021-12-20 20:34:41","docid":0,"fillcolor":"ffffed99","id":6,"originaltext":"@Qualifier","page":13,"textblocks":[{"first":[112.93000030517578,80.68001556396484,12.833999633789062,15.5],"last":[173.4705810546875,80.68001556396484,6.127197265625,15.5],"length":10,"rects":[[112.93000030517578,80.68001556396484,66.66777801513672,15.5]],"start":91,"text":"@Qualifier"}],"type":5},{"content":"id获取容器中的bean，唯一一个用name的","date":"2021-12-20 20:36:17","docid":0,"fillcolor":"ffffed99","id":7,"originaltext":"@Resource","page":13,"textblocks":[{"first":[112.93000030517578,219.78001403808594,12.833999633789062,13.5],"last":[174.69876098632812,219.78001403808594,6.127197265625,13.5],"length":9,"rects":[[112.93000030517578,219.78001403808594,67.89595794677734,13.5]],"start":230,"text":"@Resource"}],"type":5},{"content":"专门用于基础数据类型的注入\nvalue可以用spring的el表达式${}","date":"2021-12-20 20:38:40","docid":0,"fillcolor":"ffffed99","id":8,"originaltext":"@Value","page":13,"textblocks":[{"first":[112.93000030517578,342.25,12.833999633789062,13.5],"last":[153.12937927246094,342.25,6.127197265625,13.5],"length":6,"rects":[[112.93000030517578,342.25,46.326576232910156,13.5]],"start":318,"text":"@Value"}],"type":5}],"originaltext":"用于注入数据的","page":12,"textblocks":[{"first":[106.9000015258789,488.890625,13.800003051757812,14.015625],"last":[191.59060668945312,488.890625,13.800003051757812,14.015625],"length":7,"rects":[[106.9000015258789,488.890625,98.49060821533203,14.015625]],"start":499,"text":"用于注入数据的"}],"type":5},{"date":"2021-12-20 20:40:25","docid":0,"fillcolor":"ffffed99","id":9,"originaltext":"用于改变作用范围的：","page":13,"textblocks":[{"first":[106.9000015258789,461.87060546875,13.800003051757812,14.015625],"last":[233.6254119873047,461.87060546875,13.800003051757812,14.015625],"length":10,"rects":[[106.9000015258789,461.87060546875,140.5254135131836,14.015625]],"start":381,"text":"用于改变作用范围的："}],"type":5},{"date":"2021-12-20 20:42:08","docid":0,"fillcolor":"ffffed99","id":10,"markups":[{"content":"bean初始化之后","date":"2022-01-24 14:47:28","docid":0,"fillcolor":"ffffed99","id":21,"originaltext":"@PostConstruct","page":14,"textblocks":[{"first":[112.93000030517578,82.28001403808594,12.833999633789062,13.5],"last":[207.04595947265625,82.28001403808594,4.59539794921875,13.5],"length":14,"rects":[[112.93000030517578,82.28001403808594,98.71135711669922,13.5]],"start":91,"text":"@PostConstruct"}],"type":5},{"content":"单例的话容器关闭，多例的话很久不用","date":"2022-01-24 14:47:35","docid":0,"fillcolor":"ffffed99","id":22,"originaltext":"@PreDestroy","page":14,"textblocks":[{"first":[112.93000030517578,171.32998657226562,12.833999633789062,15.5],"last":[186.6909637451172,171.32998657226562,6.899993896484375,15.5],"length":11,"rects":[[112.93000030517578,171.32998657226562,80.66095733642578,15.5]],"start":133,"text":"@PreDestroy"}],"type":5}],"originaltext":"和生命周期相关的：","page":13,"textblocks":[{"first":[106.9000015258789,688.2406005859375,13.800003051757812,14.015625],"last":[219.82540893554688,688.2406005859375,13.800003051757812,14.015625],"length":9,"rects":[[106.9000015258789,688.2406005859375,126.72541046142578,14.015625]],"start":555,"text":"和生命周期相关的："}],"type":5},{"date":"2021-12-20 20:42:20","docid":0,"fillcolor":"ffffed99","id":11,"originaltext":"关于 Spring 注解和 XML 的选择问题","page":14,"textblocks":[{"first":[106.9000015258789,261.11248779296875,13.800003051757812,15.859375],"last":[320.72576904296875,261.11248779296875,13.79998779296875,15.859375],"length":23,"rects":[[106.9000015258789,261.11248779296875,227.6257553100586,15.859375]],"start":169,"text":"关于 Spring 注解和 XML 的选择问题"}],"type":5},{"date":"2021-12-20 20:51:34","docid":0,"fillcolor":"ffffed99","folded":false,"id":13,"markups":[{"content":"注解spring容器入口","date":"2021-12-20 20:51:10","docid":0,"fillcolor":"ffffed99","folded":false,"id":12,"markups":[{"content":"注意当作为AnnotationConfigApplicationContext的参数时候可以不写，并不绝对，有特殊情况\n\n被写上@Configuration的类是注解的入口，它会根据这个类创建applicationContext容器\n","date":"2021-12-20 20:51:43","docid":0,"fillcolor":"ffffed99","id":14,"originaltext":"@Configuration","page":15,"textblocks":[{"first":[112.93000030517578,656.47998046875,12.833999633789062,15.5],"last":[202.22975158691406,656.47998046875,7.6728057861328125,15.5],"length":14,"rects":[[112.93000030517578,656.47998046875,96.9725570678711,15.5]],"start":1108,"text":"@Configuration"}],"type":5},{"content":"导入其他的配置类，用于父子配置，更好一些","date":"2021-12-20 21:09:16","docid":0,"fillcolor":"ffffed99","id":17,"originaltext":"@Import","page":19,"textblocks":[{"first":[112.93000030517578,172.51998901367188,12.833999633789062,15.5],"last":[163.3275909423828,172.51998901367188,4.59539794921875,15.5],"length":7,"rects":[[112.93000030517578,172.51998901367188,54.99298858642578,15.5]],"start":191,"text":"@Import"}],"type":5},{"content":"指定要扫描的包","date":"2021-12-20 20:52:23","docid":0,"fillcolor":"ffffed99","id":15,"originaltext":"@ComponentScan","page":16,"textblocks":[{"first":[112.93000030517578,301.33001708984375,12.833999633789062,9.5],"last":[217.21656799316406,301.33001708984375,7.6728057861328125,9.5],"length":14,"rects":[[112.93000030517578,301.33001708984375,111.9593734741211,9.5]],"start":319,"text":"@ComponentScan"}],"type":5},{"content":"会把方法的返回值放到容器中\nkey默认是这个方法名\nvalue就是这个方法的返回值\n\n注意：如果这个方法有参数，spring回去容器中查找有没有可以用的bean对象，查找方式和@Autowired一样","date":"2021-12-20 20:52:33","docid":0,"fillcolor":"ffffed99","id":16,"originaltext":"@Bean","page":16,"textblocks":[{"first":[112.93000030517578,655.0800170898438,12.833999633789062,13.5],"last":[148.92037963867188,655.0800170898438,7.6728057861328125,13.5],"length":5,"rects":[[112.93000030517578,655.0800170898438,43.663185119628906,13.5]],"start":784,"text":"@Bean"}],"type":5},{"content":"用于指定读取文件的名称和路径配合classpath使用\n注入xml文件","date":"2021-12-20 21:09:47","docid":0,"fillcolor":"ffffed99","id":18,"originaltext":"@PropertySource","page":17,"textblocks":[{"first":[112.93000030517578,718.1299438476562,12.833999633789062,16.5],"last":[214.26596069335938,718.1299438476562,6.127197265625,16.5],"length":15,"rects":[[112.93000030517578,718.1299438476562,107.4631576538086,16.5]],"start":957,"text":"@PropertySource"}],"type":5}],"originaltext":"新注解说明","page":15,"textblocks":[{"first":[106.9000015258789,611.390625,13.800003051757812,14.015625],"last":[163.34201049804688,611.390625,13.800003051757812,14.015625],"length":5,"rects":[[106.9000015258789,611.390625,70.24201202392578,14.015625]],"start":1093,"text":"新注解说明"}],"type":5}],"originaltext":" spring 的纯注解配置","page":15,"textblocks":[{"first":[90.69999694824219,150.83877563476562,4.50360107421875,19.364059448242188],"last":[219.8477783203125,150.83877563476562,16.199996948242188,19.364059448242188],"length":14,"rects":[[90.69999694824219,150.83877563476562,145.3477783203125,19.364059448242188]],"start":155,"text":" spring 的纯注解配置"}],"type":5}],"originaltext":"基于注解的 IOC 配置","page":9,"textblocks":[{"first":[225.8300018310547,330.95037841796875,22.225006103515625,22.225006103515625],"last":[411.4250183105469,330.95037841796875,22.225006103515625,22.225006103515625],"length":12,"rects":[[225.8300018310547,330.95037841796875,207.8200225830078,22.225006103515625]],"start":523,"text":"基于注解的 IOC 配置"}],"type":5},{"content":"junit根本不会管spring是否启动，也就是说它不会走既定的程序创建applicationContext\n\n1、@RunWith替换成spring中实现的run方法\n2、@ContextConfiguration告诉入口文件在哪或者药加载的注解文件在哪，也就是配置了@ComponentScan注解类的class在哪\n3、junit必须4.1.2及以上版本","date":"2021-12-20 21:34:54","docid":0,"fillcolor":"ffffed99","id":19,"originaltext":"Spring 整合 Junit","page":20,"textblocks":[{"first":[207.1999969482422,252.900390625,11.112503051757812,22.225006103515625],"last":[373.49102783203125,252.900390625,11.11248779296875,22.225006103515625],"length":15,"rects":[[207.1999969482422,252.900390625,177.4035186767578,22.225006103515625]],"start":89,"text":"Spring 整合 Junit"}],"type":5}],"maxid":22,"title":"spring5第二天","unimportant":[]}
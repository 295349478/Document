{"EpubVersion":2,"filepath":"","floatingtheme":[],"folded":false,"markups":[{"content":"前奏：\n发送请求的TCP/IP请求（语言的发声），而HTTP协议（语言）基于TCP/IP协议，两者想要传递数据（意思）\n\n虚拟主机的出现是因为以前主机只配置一个站点会非常的浪费，不如将一台服务器当成多台服务器使用，虚拟主机技术应运而生\n\n因为主机有固定的公网IP地址，所以配置多个站点就需要配置域名解析\n\n注意：主机号+端口号需要唯一\n\n\n课外知识：\n二级域名\n二级域名基于反向代理到一台Tomcat中\n然后搜索这个域名的信息，再请求到Nginx中\n\n短网址\n短网址使用一个Key Value实现，短网址后面的一串字符传递给我们，通过key寻找到真实的value地址，然后Redirect回去Nginx，再去寻找\n\nHttpDns\nHttpDns专门用于CS架构APP，它会预埋几个地址发送到Nginx中，访问的时候会将地址以参数的形式发送到Nginx中，Nginx接受到返回真实的地址回去","date":"2022-08-26 09:54:00","docid":0,"fillcolor":"ffffed99","id":2,"originaltext":"虚拟主机与域名解析","page":13,"textblocks":[{"first":[227.85899353027344,60.5260009765625,27.949996948242188,30.5],"last":[451.8590087890625,60.5260009765625,27.95001220703125,30.5],"length":9,"rects":[[227.85899353027344,60.5260009765625,251.9500274658203,30.5]],"start":0,"text":"虚拟主机与域名解析"}],"type":5,"uuid":"c93520b5f4d3fd91bc4f43bff41490a7"},{"content":"匹配有先后顺序，匹配到就不会走之后的匹配\n\n可以写多个域名也就是IP\n其中的IP也可是域名但是需要改host\nIP+端口唯一即可\n\n    server {\n        listen       88;\n        server_name  localhost;\n\n        location / {\n            root   /www/vod;\n            index  index.html index.htm;\n        }\n\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n    }","date":"2022-08-26 09:54:25","docid":0,"fillcolor":"ffffed99","id":3,"originaltext":"ServerName匹配规则","page":14,"textblocks":[{"first":[227.85899353027344,61.723609924316406,18.614700317382812,31.225387573242188],"last":[468.8590087890625,61.723609924316406,27.95001220703125,31.225387573242188],"length":14,"rects":[[227.85899353027344,61.723609924316406,268.9500274658203,31.225387573242188]],"start":0,"text":"ServerName匹配规则"}],"type":5,"uuid":"12dfa62501b71d37dcac3d95f5e4b2a9"},{"content":"正向代理：用户出去想访问外网的时候，需要有一个网关，就是一个代理服务器来发送请求，访问外网\n\n反向代理：就是网关与应用服务器中间的中间商\n\n（与正向的不同就在于代理服务器代理的是谁，正向代理用户发送请求，反向代理代理应用服务器接受请求）\n\n网关：其实就是网络的入口就是网关，就是代理服务器，我们对于服务器不能让别人直接访问，那么网关或者是代理服务器就是学校的大门，当然门可以有多个\n\n（网关其实就是代理服务器，有上限）\n\nnginx反向代理分为\n隧道式：nginx的大门代理服务器，进去的时候经过大门，出去的时候也要经过大门（功能较多，但是性能差一点）\n\nDR模型：nginx的大门代理服务器，进去的时候经过大门，出去的时候直接到用户中，不经过大门（功能较少，但是性能很好），当然他还是要走大道的，也就是网关，毕竟我们的网络就是一个一个网关加线路组成的\n\n（网关之后就是防火墙）\n集群：把一摸一样的服务器称为集群\n基于反向代理的负载均衡器：Nginx反向代理后可以分发请求到集群中不至于全部请求打在同一台服务器上\n\n负载均衡策略","date":"2022-08-26 09:43:58","docid":0,"fillcolor":"ffffed99","id":1,"originaltext":"反向代理","page":15,"textblocks":[{"first":[227.85899353027344,60.5260009765625,27.949996948242188,30.5],"last":[311.8590087890625,60.5260009765625,27.95001220703125,30.5],"length":4,"rects":[[227.85899353027344,60.5260009765625,111.95002746582031,30.5]],"start":0,"text":"反向代理"}],"type":5,"uuid":"3009914d171d4a0423170ed3f3d37154"},{"annotations":[{"content":" (1）location = / {}\n=为精确匹配 / ，主机名后面不能带任何字符串，比如访问 / 和 /data，则 / 匹配，/data 不匹配\n再比如 location = /abc，则只匹配/abc ，/abc/或 /abcd不匹配。若 location  /abc，则即匹配/abc 、/abcd/ 同时也匹配 /abc/。\n\n（2）location / {}\n因为所有的地址都以 / 开头，所以这条规则将匹配到所有请求 比如访问 / 和 /data, 则 / 匹配， /data 也匹配，\n但若后面是正则表达式会和最长字符串优先匹配（最长匹配）\n\n（3）location /documents/ {}\n匹配任何以 /documents/ 开头的地址，匹配符合以后，还要继续往下搜索其它 location\n只有其它 location后面的正则表达式没有匹配到时，才会采用这一条\n\n（4）location /documents/abc {}\n匹配任何以 /documents/abc 开头的地址，匹配符合以后，还要继续往下搜索其它 location\n只有其它 location后面的正则表达式没有匹配到时，才会采用这一条\n\n（5）location ^~ /images/ {}\n匹配任何以 /images/ 开头的地址，匹配符合以后，停止往下搜索正则，采用这一条\n\n（6）location ~* \\.(gif|jpg|jpeg)$ {}\n匹配所有以 gif、jpg或jpeg 结尾的请求\n然而，所有请求 /images/ 下的图片会被 location ^~ /images/ 处理，因为 ^~ 的优先级更高，所以到达不了这一条正则\n\n（7）location /images/abc {}\n最长字符匹配到 /images/abc，优先级最低，继续往下搜索其它 location，会发现 ^~ 和 ~ 存在\n\n（8）location ~ /images/abc {}\n匹配以/images/abc 开头的，优先级次之，只有去掉 location ^~ /images/ 才会采用这一条\n\n（9）location /images/abc/1.html {}\n匹配/images/abc/1.html 文件，如果和正则 ~ /images/abc/1.html 相比，正则优先级更高\n\n优先级总结：\n(location =) > (location 完整路径) > (location ^~ 路径) > (location ~,~* 正则顺序) > (location 部分起始路径) > (location /)\n","style":0}],"content":"","date":"2022-08-26 09:57:38","docid":0,"fillcolor":"ffffed99","id":4,"originaltext":"动静分离","page":16,"textblocks":[{"first":[227.85899353027344,60.5260009765625,27.949996948242188,30.5],"last":[311.8590087890625,60.5260009765625,27.95001220703125,30.5],"length":4,"rects":[[227.85899353027344,60.5260009765625,111.95002746582031,30.5]],"start":0,"text":"动静分离"}],"type":5,"uuid":"c68a4f1c751580564a39c143eebde538"},{"date":"2022-08-26 14:43:58","docid":0,"fillcolor":"ffffed99","id":5,"originaltext":"URLRewrite","page":17,"textblocks":[{"first":[227.85899353027344,60.973609924316406,20.179901123046875,31.225387573242188],"last":[363.0589904785156,60.973609924316406,15.540191650390625,31.225387573242188],"length":10,"rects":[[227.85899353027344,60.973609924316406,150.7401885986328,31.225387573242188]],"start":0,"text":"URLRewrite"}],"type":5,"uuid":"ae0f88d050d30690fff435a6cdfb7a85"}],"maxid":5,"notelinks":[],"title":"Nginx课件","unimportant":[]}
{"EpubVersion":2,"filepath":"","floatingtheme":[],"folded":false,"markups":[{"date":"2022-06-02 09:08:47","docid":0,"fillcolor":"ffffed99","folded":false,"id":1,"markups":[{"content":"Redis使用的都是字符串\nC语言不是真的字符串，用的是字符数组，所以Redis没有直接使用这些C语言的字符串\n\nRedis使用的是自己构建的字符串SDS\n\n对于key一个SDS，value一个SDS总共两个SDS ","date":"2022-06-02 09:08:52","docid":0,"fillcolor":"ffffed99","folded":false,"id":2,"markups":[{"content":"Redis为SDS创建了五种组成，以位数区分其中5已弃用。\n\n源码讲解：\n\n总的分为两部分：\n\n第一部分\n头Header：\nlen：（无符号整型）保存字符串的字节数\nalloc：（无符号整型）总大小字节数\nflags：头类型，指定这个SDS是五种的哪个\n\n第二部分\n数据：\nbuf[]：真正存储字符数组","date":"2022-06-02 09:44:40","docid":0,"fillcolor":"ffffed99","id":3,"originaltext":"源码如下","page":5,"textblocks":[{"first":[401.11602783203125,137.51998901367188,15.9840087890625,19.5],"last":[449.10003662109375,137.51998901367188,15.9840087890625,19.5],"length":4,"rects":[[401.11602783203125,137.51998901367188,63.968017578125,19.5]],"start":64,"text":"源码如下"}],"type":5,"uuid":"dcf3a55be0d4e5b6f5f654af7df6e46d"},{"content":"内存预分配两种情况：\n1、若新字符串 <1M\n扩容为：2n+1\n\n2、若新字符串 >1M\n扩容为：+1M+1\n\n注意：\n1、对于flags只记录最开始的类型\n2、不计算最后的结束标志 \"\\0\"\n3、遍历的时候不在已结束标记结束，只读取对应的长度len","date":"2022-06-02 10:00:26","docid":0,"fillcolor":"ffffed99","id":4,"originaltext":"动态扩容","page":6,"textblocks":[{"first":[365.33575439453125,137.51998901367188,15.9840087890625,19.5],"last":[413.3276062011719,137.51998901367188,15.9840087890625,19.5],"length":4,"rects":[[365.33575439453125,137.51998901367188,63.975860595703125,19.5]],"start":68,"text":"动态扩容"}],"type":5,"uuid":"baa0f1e527a72ff4b2767052be3f329f"}],"originaltext":"动态字符串SDS","page":4,"textblocks":[{"first":[63.215999603271484,84.8800048828125,24.023998260498047,26.5],"last":[216.5846710205078,84.8800048828125,14.462448120117188,26.5],"length":8,"rects":[[63.215999603271484,84.8800048828125,167.83111953735352,26.5]],"start":299,"text":"动态字符串SDS"}],"type":5,"uuid":"08935f4cc0287f0056388676ea61688b"},{"content":"特点：\n1、使用整数数组实现\n2、长度可变\n3、有序","date":"2022-06-02 10:05:57","docid":0,"fillcolor":"ffffed99","folded":true,"id":5,"markups":[{"content":"encoding：编码方式，有三种，分别对应Java中short、int、long\nlength：元素个数\ncontents：真正存储，","date":"2022-06-02 10:12:15","docid":0,"fillcolor":"ffffed99","id":6,"originaltext":"结构如下","page":8,"textblocks":[{"first":[63.19200134277344,170.27999877929688,15.959999084472656,18.5],"last":[111.0719985961914,170.27999877929688,15.959999084472656,18.5],"length":4,"rects":[[63.19200134277344,170.27999877929688,63.839996337890625,18.5]],"start":91,"text":"结构如下"}],"type":5,"uuid":"b2d86bb0c395aea5ef6dc19a4cea7917"},{"content":"对应的例子特点：\n1、其中的encoding指定的每个元素的最大的大小\n2、指定每个元素的大小是为了方便基于角标进行寻址\n\n角标为什么从0开始:\n因为角标是指当前元素距离起始位置的长度，0自然就是距离为0，自然就是第一个","date":"2022-06-02 10:19:00","docid":0,"fillcolor":"ffffed99","folded":true,"id":7,"markups":[{"content":"寻址公式\n\n角标为什么从0开始:\n因为角标是指当前元素距离起始位置的长度，0自然就是距离为0，自然就是第一个","date":"2022-06-02 10:32:59","docid":0,"fillcolor":"ffffed99","id":8,"originaltext":"startPtr + (sizeof(int16) * index)","page":9,"textblocks":[{"first":[618.719970703125,221.89999389648438,7.20001220703125,14.5],"last":[857.9839477539062,221.89999389648438,7.20001220703125,14.5],"length":34,"rects":[[618.719970703125,221.89999389648438,246.4639892578125,14.5]],"start":298,"text":"startPtr + (sizeof(int16) * index)"}],"type":5,"uuid":"75bebd1158dc9618a75b36e121f2cb30"}],"originaltext":"结构如图","page":9,"textblocks":[{"first":[660.6879272460938,137.51998901367188,15.9840087890625,19.5],"last":[708.7518310546875,137.51998901367188,15.9840087890625,19.5],"length":4,"rects":[[660.6879272460938,137.51998901367188,64.04791259765625,19.5]],"start":86,"text":"结构如图"}],"type":5,"uuid":"8b894af6999c80078b1154b1fba34a54"},{"content":"若突然来了一个超过encoding规定元素大小字节的数，那么会触发IntSet升级，将所有的元素都升级为最大元素的字节数\n\n因为两个字节只能存储有符号整数3万左右\n\nIntSet升级：\n（先不添加新元素，先升级）\n1、由新元素计算出新的encoding大小，倒序的方式将每一个元素扩容放到新的位置\n2、将新的元素放到末尾\n3、设置新的encoding，以及元素个数","date":"2022-06-02 10:34:50","docid":0,"fillcolor":"ffffed99","id":9,"originaltext":"IntSet升级","page":10,"textblocks":[{"first":[63.215999603271484,86.18000793457031,8.048038482666016,26.5],"last":[159.10000610351562,86.18000793457031,24.024002075195312,26.5],"length":8,"rects":[[63.215999603271484,86.18000793457031,119.90800857543945,26.5]],"start":252,"text":"IntSet升级"}],"type":5,"uuid":"2ef5c180586af942242ab51c444cf626"},{"content":"对于插入过程使用的是二分查询","date":"2022-06-02 10:49:58","docid":0,"fillcolor":"ffffed99","id":10,"originaltext":"源码如下","page":14,"textblocks":[{"first":[63.19200134277344,137.51998901367188,15.984001159667969,19.5],"last":[111.0719985961914,137.51998901367188,15.984001159667969,19.5],"length":4,"rects":[[63.19200134277344,137.51998901367188,63.86399841308594,19.5]],"start":39,"text":"源码如下"}],"type":5,"uuid":"bcbff33f49876e4a0969ae9d55aca1a1"},{"date":"2022-06-02 14:27:40","docid":0,"fillcolor":"ffffed99","id":11,"originaltext":"Intset可以看做是特殊的整数数组，具备一些特点：","page":16,"textblocks":[{"first":[410.92999267578125,218.4300079345703,5.2919921875,21.5],"last":[801.1700439453125,218.4300079345703,18,21.5],"length":26,"rects":[[410.92999267578125,218.4300079345703,408.24005126953125,21.5]],"start":44,"text":"Intset可以看做是特殊的整数数组，具备一些特点："}],"type":5,"uuid":"41f13ac8fe8db653020ac50d68e494b9"}],"originaltext":"IntSet","page":8,"textblocks":[{"first":[63.215999603271484,90.18000793457031,8.048038482666016,21.5],"last":[125.1258544921875,90.18000793457031,9.945938110351562,21.5],"length":6,"rects":[[63.215999603271484,90.18000793457031,71.85579299926758,21.5]],"start":128,"text":"IntSet"}],"type":5,"uuid":"c08e7280d06aef40e3bc30e4312d6e2e"},{"content":"映射关系的经典存储类型\n\n键值型数据库\n组成部分：\n1、哈希表\n2、哈希节点\n3、字典","date":"2022-06-02 14:27:53","docid":0,"fillcolor":"ffffed99","folded":true,"id":12,"markups":[{"content":"哈希表\ntable：数组的指针\nsize：数组的大小（只能是2的n次方）\nsizemask：size-1（是数组大小的掩码）\nused：entry个数","date":"2022-06-02 14:32:55","docid":0,"fillcolor":"ffffed99","id":14,"originaltext":"dictht","page":18,"textblocks":[{"first":[194.5,238.4400177001953,8.423995971679688,16.5],"last":[236.49996948242188,238.4400177001953,8.423995971679688,16.5],"length":6,"rects":[[194.5,238.4400177001953,50.42396545410156,16.5]],"start":356,"text":"dictht"}],"type":5,"uuid":"34dfb9e552b4040c2cbcd517b33a769b"},{"content":"entry数组中的元素：\n\nkey：指针，指向key\n\nv：是一个联合体，它可以是花括号中4个的任意一个元素\n（注意对于double、int类型的值，直接就是value，若是其他类型就是执行value的指针）\n\nnext：下一个entry指针","date":"2022-06-02 14:39:50","docid":0,"fillcolor":"ffffed99","id":15,"originaltext":"dictEntry","page":18,"textblocks":[{"first":[633.530029296875,238.4400177001953,8.42401123046875,16.5],"last":[700.6273193359375,238.4400177001953,8.42401123046875,16.5],"length":9,"rects":[[633.530029296875,238.4400177001953,75.52130126953125,16.5]],"start":195,"text":"dictEntry"}],"type":5,"uuid":"44191c5e18253a327b69829556765109"},{"content":"使用key和sizemask与&运算\n\n因为sizemask比size小1，所以hash值与sizemask与运算&得到的就是余数\n\n对于同样位置的entry新加入的会被放到最前面，此位置之前的entry会被放到新entry的后面","date":"2022-06-02 14:47:22","docid":0,"fillcolor":"ffffed99","id":16,"originaltext":"hash值","page":19,"textblocks":[{"first":[453.8399963378906,310.25,9.83135986328125,18.5],"last":[489.8399963378906,310.25,15.959991455078125,18.5],"length":5,"rects":[[453.8399963378906,310.25,51.959991455078125,18.5]],"start":502,"text":"hash值"}],"type":5,"uuid":"bee00462282367c11ce4eca991eee9d1"},{"content":"字典本身\ntype：字典类型\nprivdata：hash计算有用\nht：一般hash表会被创建两个，第一个用来存储，第二个是null，只有rehash的时候使用\nrehashidx：\npauserehash：","date":"2022-06-02 14:59:40","docid":0,"fillcolor":"ffffed99","id":17,"originaltext":"dict","page":21,"textblocks":[{"first":[177.5500030517578,174.13998413085938,7.1999969482421875,14.5],"last":[199.25799560546875,174.13998413085938,7.1999969482421875,14.5],"length":4,"rects":[[177.5500030517578,174.13998413085938,28.907989501953125,14.5]],"start":118,"text":"dict"}],"type":5,"uuid":"04b482d0e6e8700c0c6470b763b30af1"},{"content":"每次扩容会寻找比entry+1大的2的n次方的个数作为扩容目标","date":"2022-06-02 15:07:14","docid":0,"fillcolor":"ffffed99","folded":false,"id":18,"markups":[{"content":"使用数量/数组大小","date":"2022-06-02 15:07:22","docid":0,"fillcolor":"ffffed99","folded":false,"id":19,"markups":[{"content":">=1，并且没有存储或者持久化命令","date":"2022-06-02 15:07:37","docid":0,"fillcolor":"ffffed99","id":20,"originaltext":"哈希表的 LoadFactor >= 1","page":23,"textblocks":[{"first":[90.19200134277344,231.32675170898438,15.959999084472656,19.866561889648438],"last":[276.2879333496094,231.32675170898438,9.352569580078125,19.866561889648438],"length":20,"rects":[[90.19200134277344,231.32675170898438,195.44850158691406,19.866561889648438]],"start":183,"text":"哈希表的 LoadFactor >= 1"}],"type":5,"uuid":"3ee1132d77a8958800c7e24a51914fc5"},{"content":">5","date":"2022-06-02 15:07:40","docid":0,"fillcolor":"ffffed99","id":21,"originaltext":"哈希表的 LoadFactor > 5","page":23,"textblocks":[{"first":[90.19200134277344,263.99676513671875,15.959999084472656,19.8665771484375],"last":[264.38177490234375,263.99676513671875,9.352569580078125,19.8665771484375],"length":19,"rects":[[90.19200134277344,263.99676513671875,183.54234313964844,19.8665771484375]],"start":246,"text":"哈希表的 LoadFactor > 5"}],"type":5,"uuid":"2c774a0484de15249576d5aba54340f2"}],"originaltext":"负载因子","page":23,"textblocks":[{"first":[301.17999267578125,199.07998657226562,15.959991455078125,18.5],"last":[349.17169189453125,199.07998657226562,15.959991455078125,18.5],"length":4,"rects":[[301.17999267578125,199.07998657226562,63.951690673828125,18.5]],"start":132,"text":"负载因子"}],"type":5,"uuid":"87465441854bb544bc50d8eec423bd08"}],"originaltext":"Dict的扩容","page":23,"textblocks":[{"first":[63.215999603271484,86.18000793457031,19.02701187133789,26.5],"last":[159.5800018310547,86.18000793457031,24.024002075195312,26.5],"length":7,"rects":[[63.215999603271484,86.18000793457031,120.38800430297852,26.5]],"start":39,"text":"Dict的扩容"}],"type":5,"uuid":"7554700a09b5c1ec48e71980626cc752"},{"content":"缩小以entry为标准，entry多少，收缩到多少，但是一定是大于等于entry的2的n次方个数\n注意\n若是entry小于4，那么缩小到4，不能比4小","date":"2022-06-02 15:09:32","docid":0,"fillcolor":"ffffed99","folded":true,"id":22,"markups":[{"date":"2022-06-02 15:09:40","docid":0,"fillcolor":"ffffed99","id":23,"originaltext":"LoadFactor < 0.1","page":24,"textblocks":[{"first":[525.239990234375,137.51998901367188,8.19976806640625,19.5],"last":[644.3688354492188,137.51998901367188,9.36663818359375,19.5],"length":16,"rects":[[525.239990234375,137.51998901367188,128.4954833984375,19.5]],"start":78,"text":"LoadFactor < 0.1"}],"type":5,"uuid":"00a9e71661832177cc53a137d04ddabc"}],"originaltext":"Dict的收缩","page":24,"textblocks":[{"first":[63.215999603271484,86.18000793457031,19.02701187133789,26.5],"last":[159.5800018310547,86.18000793457031,24.024002075195312,26.5],"length":7,"rects":[[63.215999603271484,86.18000793457031,120.38800430297852,26.5]],"start":39,"text":"Dict的收缩"}],"type":5,"uuid":"a97bdb132dd64507b7b0e3fca919cf22"},{"content":"对每一个key计算新的hash值","date":"2022-06-02 15:09:47","docid":0,"fillcolor":"ffffed99","id":24,"originaltext":"Dict的rehash","page":25,"textblocks":[{"first":[63.215999603271484,86.18000793457031,19.02701187133789,26.5],"last":[200.82916259765625,86.18000793457031,15.519500732421875,26.5],"length":11,"rects":[[63.215999603271484,86.18000793457031,153.13266372680664,26.5]],"start":39,"text":"Dict的rehash"}],"type":5,"uuid":"acb81e2962bb7781f2c914f0acad4791"}],"originaltext":"Dict","page":18,"textblocks":[{"first":[63.215999603271484,89.3800048828125,19.02701187133789,22.5],"last":[101.67843627929688,89.3800048828125,9.945938110351562,22.5],"length":4,"rects":[[63.215999603271484,89.3800048828125,48.40837478637695,22.5]],"start":175,"text":"Dict"}],"type":5,"uuid":"75c61ed97e8cafcaa2151faf7bbe3b30"},{"content":"不是真正使用链表\n由特殊连续内存块组成\n实际上使用的还是数组的思想\n\n前三个是ziplist的信息，最后一个是结束标志，其他节点是正常的存储元素节点","date":"2022-06-02 14:31:25","docid":0,"fillcolor":"ffffed99","folded":true,"id":13,"markups":[{"date":"2022-06-02 16:01:38","docid":0,"fillcolor":"ffffed99","folded":true,"id":26,"markups":[{"content":"总字节数","date":"2022-06-02 16:03:31","docid":0,"fillcolor":"ffffed99","id":30,"originaltext":"zlbytes","page":33,"textblocks":[{"first":[112.2699966430664,308.385986328125,6.907676696777344,19.1300048828125],"last":[152.4945831298828,308.385986328125,6.500518798828125,19.1300048828125],"length":7,"rects":[[112.2699966430664,308.385986328125,46.72510528564453,19.1300048828125]],"start":175,"text":"zlbytes"}],"type":5,"uuid":"264be67f8178afc84bede9a747bce9c0"},{"content":"尾节点的偏移量\n就是从zlbytes节点到最后一个节点的长度","date":"2022-06-02 16:03:33","docid":0,"fillcolor":"ffffed99","id":31,"originaltext":"zltail","page":33,"textblocks":[{"first":[119.94999694824219,352.9100036621094,6.907676696777344,14.5],"last":[147.42626953125,352.9100036621094,3.7346343994140625,14.5],"length":6,"rects":[[119.94999694824219,352.9100036621094,31.210906982421875,14.5]],"start":211,"text":"zltail"}],"type":5,"uuid":"d2f3b82dd1e66413626cefd4455fc72c"},{"content":"entry个数","date":"2022-06-02 16:03:34","docid":0,"fillcolor":"ffffed99","id":32,"originaltext":"zllen","page":33,"textblocks":[{"first":[120.06999969482422,399.8919982910156,6.919486999511719,26.660003662109375],"last":[142.3895721435547,399.8919982910156,8.663421630859375,26.660003662109375],"length":5,"rects":[[120.06999969482422,399.8919982910156,30.982994079589844,26.660003662109375]],"start":278,"text":"zllen"}],"type":5,"uuid":"9e579cf3b16b4ae37ff52b617bb124eb"},{"content":"不规定，为了节省内存","date":"2022-06-02 16:03:36","docid":0,"fillcolor":"ffffed99","id":33,"originaltext":"entry","page":33,"textblocks":[{"first":[117.91000366210938,453.3399963378906,7.9606781005859375,15.5],"last":[145.70919799804688,453.3399963378906,7.427154541015625,15.5],"length":5,"rects":[[117.91000366210938,453.3399963378906,35.226348876953125,15.5]],"start":381,"text":"entry"}],"type":5,"uuid":"8c55cf3fd34115e1b6f8c6966d5b5306"},{"content":"结束标志","date":"2022-06-02 16:03:37","docid":0,"fillcolor":"ffffed99","id":34,"originaltext":"zlend","page":33,"textblocks":[{"first":[117.43000030517578,485.2864074707031,6.907676696777344,19.13201904296875],"last":[144.66758728027344,485.2864074707031,8.985595703125,19.13201904296875],"length":5,"rects":[[117.43000030517578,485.2864074707031,36.223182678222656,19.13201904296875]],"start":421,"text":"zlend"}],"type":5,"uuid":"7c86aac2cc93993232ccd15401f91831"}],"originaltext":"ZipList","page":32,"textblocks":[{"first":[63.19200134277344,136.72000122070312,10.389602661132812,20.5],"last":[110.2968521118164,136.72000122070312,6.617378234863281,20.5],"length":7,"rects":[[63.19200134277344,136.72000122070312,53.72222900390625,20.5]],"start":81,"text":"ZipList"}],"type":5,"uuid":"81f0224bf7bc91f4ff2e1e744b52da7d"},{"content":"每个entry都有三部分组成\n\n第一部分记录前一个节点的大小\n\n\n第二部分记录这个节点的大小以及数据类型\n\n第三部分真正存储数据\n\n这样做可以直接使用偏移量找到下一节点的位置，直接使用","date":"2022-06-02 16:06:54","docid":0,"fillcolor":"ffffed99","folded":true,"id":35,"markups":[{"content":"前面一个节点的长长度\n\n如果前一个数据长大于254用5个字节存储\n小于使用1个字节存储","date":"2022-06-02 16:07:02","docid":0,"fillcolor":"ffffed99","id":36,"originaltext":"previous_entry_length","page":34,"textblocks":[{"first":[85.72799682617188,233.17999267578125,10.198440551757812,20.5],"last":[244.5140380859375,233.17999267578125,9.83135986328125,20.5],"length":21,"rects":[[85.72799682617188,233.17999267578125,168.61740112304688,20.5]],"start":160,"text":"previous_entry_length"}],"type":5,"uuid":"9dd89448335b7fc1b81f8ed8be6e9dd7"},{"content":"记录保存\n1、数据的数据类型\n2、真正数据的长度","date":"2022-06-02 16:07:06","docid":0,"fillcolor":"ffffed99","folded":true,"id":37,"markups":[{"content":"使用这些开头的都是字符串\n\n开头越高占用的编码长度越长（1，2，5）\n\n切记保存的是：类型加长度（长度单位是字节） ","date":"2022-06-06 09:15:24","docid":0,"fillcolor":"ffffed99","id":57,"originaltext":"字符串","page":36,"textblocks":[{"first":[85.75199890136719,169.3800048828125,15.959999084472656,20.5],"last":[117.6719970703125,169.3800048828125,15.960006713867188,20.5],"length":3,"rects":[[85.75199890136719,169.3800048828125,47.8800048828125,20.5]],"start":77,"text":"字符串"}],"type":5,"uuid":"a0e8a50949a29789f26d089affb76d7a"},{"content":"只有使用11开头的是整数\n\n\n直接使用编码对整型位数进行分类，若是整型数据小于1101则直接在encoding中存储","date":"2022-06-06 09:15:12","docid":0,"fillcolor":"ffffed99","id":56,"originaltext":"整数","page":37,"textblocks":[{"first":[85.75199890136719,169.3800048828125,15.959999084472656,20.5],"last":[101.71199798583984,169.3800048828125,15.959999084472656,20.5],"length":2,"rects":[[85.75199890136719,169.3800048828125,31.919998168945312,20.5]],"start":77,"text":"整数"}],"type":5,"uuid":"eff5ecb4e3bd1daa070cbb9453f471ed"}],"originaltext":"encoding","page":34,"textblocks":[{"first":[85.72799682617188,322.15997314453125,9.04931640625,21.5],"last":[146.99842834472656,322.15997314453125,10.214401245117188,21.5],"length":8,"rects":[[85.72799682617188,322.15997314453125,71.48483276367188,21.5]],"start":297,"text":"encoding"}],"type":5,"uuid":"564f7d56d6bfa7f859c59a9589c1916a"},{"content":"真正存储数据","date":"2022-06-02 16:07:08","docid":0,"fillcolor":"ffffed99","id":38,"originaltext":"contents","page":34,"textblocks":[{"first":[85.72799682617188,356.10675048828125,7.9959564208984375,19.8665771484375],"last":[144.4927215576172,356.10675048828125,7.3894805908203125,19.8665771484375],"length":8,"rects":[[85.72799682617188,356.10675048828125,66.15420532226562,19.8665771484375]],"start":354,"text":"contents"}],"type":5,"uuid":"49a029a42d9964d3cf1b141442292a98"}],"originaltext":"Entry","page":34,"textblocks":[{"first":[153.5500030517578,135.9199981689453,8.79119873046875,21.5],"last":[184.9745635986328,135.9199981689453,8.455535888671875,21.5],"length":5,"rects":[[153.5500030517578,135.9199981689453,39.880096435546875,21.5]],"start":49,"text":"Entry"}],"type":5,"uuid":"e6f08a3efa69469e74c0f4b12d693a5c"},{"content":"由于每个entry都有着previous_entry_length记录前一个节点的长度，大小规定是254小用1个字节，大或者都等于使用5个字节\n\n如果开始的时候使用250字节存储很多数据，之后突然在最前面添加一个大于或者等于254字节的数据，导致后面的节点组要增加，变成级联更新的情况","date":"2022-06-06 09:32:36","docid":0,"fillcolor":"ffffed99","id":58,"originaltext":"ZipList的连锁更新问题","page":39,"textblocks":[{"first":[63.215999603271484,83.7800064086914,15.615596771240234,29.5],"last":[287.8599853515625,83.7800064086914,24.02398681640625,29.5],"length":14,"rects":[[63.215999603271484,83.7800064086914,248.66797256469727,29.5]],"start":283,"text":"ZipList的连锁更新问题"}],"type":5,"uuid":"f09f8f48c6d0c9be113dde87615b3a28"}],"originaltext":"ZipList","page":32,"textblocks":[{"first":[63.215999603271484,84.58000183105469,15.615596771240234,28.5],"last":[133.87060546875,84.58000183105469,9.945938110351562,28.5],"length":7,"rects":[[63.215999603271484,84.58000183105469,80.60054397583008,28.5]],"start":158,"text":"ZipList"}],"type":5,"uuid":"795d0ade3513e8aa836c88a0001699e9"},{"content":"本质上是一个双端链表\n\n每个链表挂靠一个zipList","date":"2022-06-02 16:07:25","docid":0,"fillcolor":"ffffed99","folded":true,"id":39,"markups":[{"content":"正：限制entry的个数\n负：限制ZipList的大小（默认值-2）","date":"2022-06-06 09:49:13","docid":0,"fillcolor":"ffffed99","id":59,"originaltext":"list-max-ziplist-size","page":47,"textblocks":[{"first":[600,135.9199981689453,4.25177001953125,21.5],"last":[736.4566040039062,135.9199981689453,9.06292724609375,21.5],"length":21,"rects":[[600,135.9199981689453,145.51953125,21.5]],"start":86,"text":"list-max-ziplist-size"}],"type":5,"uuid":"5815ed35644528498097d63e3c9e5492"},{"content":"可以配欸之是否压缩，0不压缩","date":"2022-06-06 09:51:30","docid":0,"fillcolor":"ffffed99","id":60,"originaltext":"list-compress-depth","page":48,"textblocks":[{"first":[616.9400024414062,136.72000122070312,4.25177001953125,20.5],"last":[760.4326171875,136.72000122070312,9.84613037109375,20.5],"length":19,"rects":[[616.9400024414062,136.72000122070312,153.3387451171875,20.5]],"start":86,"text":"list-compress-depth"}],"type":5,"uuid":"266f7baebb9b5a4273edeb3fab9a0ef5"}],"originaltext":"QuickList","page":46,"textblocks":[{"first":[63.215999603271484,87.7800064086914,19.651630401611328,24.5],"last":[164.28497314453125,87.7800064086914,9.945938110351562,24.5],"length":9,"rects":[[63.215999603271484,87.7800064086914,111.01491165161133,24.5]],"start":299,"text":"QuickList"}],"type":5,"uuid":"2e69e5d451c5e5a331fdd679bebcdbc4"},{"content":"善于从中间查询数据\n设计理念就是从一个元素跳过中间元素直达到需要的元素\n\n非常像链表化的红黑树，深度最深为32","date":"2022-06-02 16:07:35","docid":0,"fillcolor":"ffffed99","folded":true,"id":40,"markups":[{"content":"一个跳表\n包含头尾指针\n个数\n以及最大的索引层级也就是深度","date":"2022-06-02 16:14:38","docid":0,"fillcolor":"ffffed99","id":41,"originaltext":"zskiplist","page":54,"textblocks":[{"first":[176.58999633789062,248.50997924804688,7.1999969482421875,14.5],"last":[234.51397705078125,248.50997924804688,7.1999969482421875,14.5],"length":9,"rects":[[176.58999633789062,248.50997924804688,65.12397766113281,14.5]],"start":142,"text":"zskiplist"}],"type":5,"uuid":"07a10c81399af62aa8162fa1062d58f8"},{"content":"跳表的节点\n存储的值value\n节点的分数score\n前指针\n后指针数组，每一个后指针都附带由索引跨度","date":"2022-06-02 16:14:42","docid":0,"fillcolor":"ffffed99","id":42,"originaltext":"zskiplistNode","page":54,"textblocks":[{"first":[540.4600219726562,231.70999145507812,7.20001220703125,14.5],"last":[627.4000244140625,231.70999145507812,7.20001220703125,14.5],"length":13,"rects":[[540.4600219726562,231.70999145507812,94.1400146484375,14.5]],"start":298,"text":"zskiplistNode"}],"type":5,"uuid":"701f9f9cf8fe01f69d4e6fe5303fc0a8"}],"originaltext":"SkipList","page":53,"textblocks":[{"first":[63.215999603271484,85.8800048828125,14.462451934814453,22.5],"last":[146.98770141601562,85.8800048828125,9.945938110351562,22.5],"length":8,"rects":[[63.215999603271484,85.8800048828125,93.7176399230957,22.5]],"start":106,"text":"SkipList"}],"type":5,"uuid":"12f2993497e3bf01ab394c61c86a74d8"},{"content":"包含五个部分\n\n1、五大类型\n2、底层编码\n3、垃圾回收\n4、引用计数器\n5、指向上面六种实际存储的数据结构","date":"2022-06-02 16:29:52","docid":0,"fillcolor":"ffffed99","id":43,"originaltext":"RedisObject","page":60,"textblocks":[{"first":[63.215999603271484,84.58000183105469,16.768756866455078,28.5],"last":[197.3660125732422,84.58000183105469,9.945938110351562,28.5],"length":11,"rects":[[63.215999603271484,84.58000183105469,144.09595108032227,28.5]],"start":93,"text":"RedisObject"}],"type":5,"uuid":"a5accff155c36c7907b9dffa748d7265"},{"date":"2022-06-02 16:30:06","docid":0,"fillcolor":"ffffed99","folded":false,"id":44,"markups":[{"content":"\n1、使用RAW，也就是SDS实现，最大512M，RedisObject和SDS分开存储\n\n2、当小于44字节的时候使用EMBSTR编码，将SDS和RedisObject存储在同一块内存\n\n3、如果ptr存储的是整数值并且小于等于8字节，直接使用INT编码，抛弃SDS直接将ptr的8个字节存储整数值\n","date":"2022-06-02 16:30:50","docid":0,"fillcolor":"ffffed99","folded":true,"id":45,"markups":[{"content":"3种\n都是SDS","date":"2022-06-02 16:45:51","docid":0,"fillcolor":"ffffed99","id":47,"originaltext":"String","page":69,"textblocks":[{"first":[63.215999603271484,84.58000183105469,14.462451934814453,28.5],"last":[119.8165512084961,84.58000183105469,15.975959777832031,28.5],"length":6,"rects":[[63.215999603271484,84.58000183105469,72.57651138305664,28.5]],"start":39,"text":"String"}],"title":"总结","type":5,"uuid":"8b45510f81d13093b70baa0d6a3dc8af"}],"originaltext":"String","page":64,"textblocks":[{"first":[63.215999603271484,84.58000183105469,14.462451934814453,28.5],"last":[119.8165512084961,84.58000183105469,15.975959777832031,28.5],"length":6,"rects":[[63.215999603271484,84.58000183105469,72.57651138305664,28.5]],"start":190,"text":"String"}],"type":5,"uuid":"8170527e42ce157972a8393e9de4ab8f"},{"content":"1种\n\n底层使用双端列表\n3.2之后统一使用QuickList实现\n\nQuickList实现：\n使用LinkedList将多个ZipList串起来","date":"2022-06-02 16:38:15","docid":0,"fillcolor":"ffffed99","folded":false,"id":46,"markups":[{"content":"一种是QuickList","date":"2022-06-02 17:12:20","docid":0,"fillcolor":"ffffed99","id":52,"originaltext":"List","page":72,"textblocks":[{"first":[63.215999603271484,89.3800048828125,13.141124725341797,22.5],"last":[95.24000549316406,89.3800048828125,9.945938110351562,22.5],"length":4,"rects":[[63.215999603271484,89.3800048828125,41.96994400024414,22.5]],"start":759,"text":"List"}],"title":"总结","type":5,"uuid":"4d77219033dbda29689d14105c958069"}],"originaltext":"List","page":70,"textblocks":[{"first":[63.215999603271484,89.3800048828125,13.141124725341797,22.5],"last":[95.24000549316406,89.3800048828125,9.945938110351562,22.5],"length":4,"rects":[[63.215999603271484,89.3800048828125,41.96994400024414,22.5]],"start":67,"text":"List"}],"type":5,"uuid":"6b24a00f8e733a9cde9c4409bd7158f9"},{"content":"特点：\n1、无序\n2、唯一\n3、接近数据的集合概念\n\n底层使用的是Dict","date":"2022-06-02 16:48:39","docid":0,"fillcolor":"ffffed99","folded":false,"id":48,"markups":[{"content":"1、使用Dict，只使用key，value设置为null\n\n2、当存储的数据为整数并且没有超过set-max-intset-entries的时候使用intSet编码","date":"2022-06-02 16:52:13","docid":0,"fillcolor":"ffffed99","id":49,"originaltext":"Set","page":74,"textblocks":[{"first":[63.215999603271484,90.18000793457031,14.462451934814453,21.5],"last":[91.5356216430664,90.18000793457031,9.945938110351562,21.5],"length":3,"rects":[[63.215999603271484,90.18000793457031,38.265560150146484,21.5]],"start":39,"text":"Set"}],"title":"实现特点","type":5,"uuid":"2c97ce3dbf62edcee2d7afaea845e1ba"},{"content":"两种\n\n1、IntSet\n2、dict","date":"2022-06-02 17:12:11","docid":0,"fillcolor":"ffffed99","id":51,"originaltext":"Set","page":77,"textblocks":[{"first":[63.215999603271484,90.18000793457031,14.462451934814453,21.5],"last":[91.5356216430664,90.18000793457031,9.945938110351562,21.5],"length":3,"rects":[[63.215999603271484,90.18000793457031,38.265560150146484,21.5]],"start":46,"text":"Set"}],"title":"总结","type":5,"uuid":"ea6f0a5cad4e31d438dc8dfd401ad88d"}],"originaltext":"Set","page":73,"textblocks":[{"first":[63.215999603271484,90.18000793457031,14.462451934814453,21.5],"last":[91.5356216430664,90.18000793457031,9.945938110351562,21.5],"length":3,"rects":[[63.215999603271484,90.18000793457031,38.265560150146484,21.5]],"start":39,"text":"Set"}],"type":5,"uuid":"75cdfe128773e23ef7689aeb5c8c5f01"},{"content":"本身通过skipList实现，如果较小的化使用ZipList的修改版实现","date":"2022-06-02 16:54:23","docid":0,"fillcolor":"ffffed99","folded":false,"id":50,"markups":[{"content":"两种种\n1、dict+skipList（数据重复存储）\n3、zipList","date":"2022-06-06 11:17:13","docid":0,"fillcolor":"ffffed99","id":62,"originaltext":"满足两个条件","page":81,"textblocks":[{"first":[111.0719985961914,166.44000244140625,15.959999084472656,18.5],"last":[190.8720245361328,166.44000244140625,15.960006713867188,18.5],"length":6,"rects":[[111.0719985961914,166.44000244140625,95.7600326538086,18.5]],"start":110,"text":"满足两个条件"}],"type":5,"uuid":"ed3b7404cb1af6bc9cc5eb16aca48348"}],"originaltext":"ZSet","page":79,"textblocks":[{"first":[63.215999603271484,86.8800048828125,15.615596771240234,21.5],"last":[107.20394897460938,86.8800048828125,9.945938110351562,21.5],"length":4,"rects":[[63.215999603271484,86.8800048828125,53.93388748168945,21.5]],"start":39,"text":"ZSet"}],"type":5,"uuid":"15203d23437a48f10ed5366ddfed1bdf"},{"content":"默认使用zipSkipList实现","date":"2022-06-02 17:20:32","docid":0,"fillcolor":"ffffed99","folded":false,"id":53,"markups":[{"content":"两种\n1、zipList\n2、dict（当entry数量大于512字节或者单个entry大于64字节）","date":"2022-06-06 11:22:04","docid":0,"fillcolor":"ffffed99","id":63,"originaltext":"Hash","page":86,"textblocks":[{"first":[63.215999603271484,91.8800048828125,19.723705291748047,16.5],"last":[108.69343566894531,91.8800048828125,15.519500732421875,16.5],"length":4,"rects":[[63.215999603271484,91.8800048828125,60.9969367980957,16.5]],"start":39,"text":"Hash"}],"type":5,"uuid":"1c4785dbf15e5b41b6aec5ffbdb1720d"}],"originaltext":"Hash","page":84,"textblocks":[{"first":[63.215999603271484,91.8800048828125,19.723705291748047,16.5],"last":[108.69343566894531,91.8800048828125,15.519500732421875,16.5],"length":4,"rects":[[63.215999603271484,91.8800048828125,60.9969367980957,16.5]],"start":39,"text":"Hash"}],"type":5,"uuid":"edda97ea009b951a3c5f4a13dd7ed7e3"}],"originaltext":"五种数据结构","page":62,"textblocks":[{"first":[63.215999603271484,84.8800048828125,24.023998260498047,26.5],"last":[183.21600341796875,84.8800048828125,24.024002075195312,26.5],"length":6,"rects":[[63.215999603271484,84.8800048828125,144.02400588989258,26.5]],"start":86,"text":"五种数据结构"}],"type":5,"uuid":"badbcb33bbe3b2390d2cb876c95dfacc"}],"originaltext":"Redis数据结构","page":2,"textblocks":[{"first":[419.260009765625,222.8280029296875,20.922119140625,36.19000244140625],"last":[597.4120483398438,222.8280029296875,32.03997802734375,36.19000244140625],"length":9,"rects":[[419.260009765625,222.8280029296875,210.1920166015625,36.19000244140625]],"start":0,"text":"Redis数据结构"}],"type":5,"uuid":"eb95459d1ac6b41e91608793ef3eac1f"},{"content":"分为两阶段\n第一阶段：将用户空间提交命令，内核空间收到命令，寻找数据将数据拷贝到内核空间的缓冲区\n\n开始标记：用户空间提交命令给内核空间\n结束标记：内核空间的缓冲区拷贝完所有数据\n\n\n第二阶段：将内核空间的缓冲区中的数据全部拷贝到用户空间的缓冲区\n\n开始标记：内核空间的缓冲区拷贝完所有数据\n\n结束标记：用户空间的缓冲区拷贝完所有的数据","date":"2022-06-02 17:22:38","docid":0,"fillcolor":"ffffed99","folded":false,"id":54,"markups":[{"content":"内核的本质也是应用\n用户空间通过调用内核来调用系统资源，实际上用户应用和内核应用是一个维度的东西，只不过管理不同\n\n两者是寻址空间，思想上相当于linux的超级用户和普通用户的切换\n\nIO的话会使用到缓冲区进行数据的交换\n\n\n请求提交：\n用户空间请求到内核空间，内核空间将请求提交，等待网卡中数据的提供\n\n数据下载：\n网卡中数据拷贝到内核空间的缓冲区，拷贝完成，将内核空间中缓冲区的数据拷贝到用户空间的缓冲区","date":"2022-06-06 11:56:12","docid":0,"fillcolor":"ffffed99","id":64,"originaltext":"用户空间和内核空间","page":99,"textblocks":[{"first":[63.215999603271484,84.8800048828125,24.023998260498047,26.5],"last":[255.21600341796875,84.8800048828125,24.02398681640625,26.5],"length":9,"rects":[[63.215999603271484,84.8800048828125,216.02399063110352,26.5]],"start":366,"text":"用户空间和内核空间"}],"type":5,"uuid":"5df114c392fd965d768656aebc555023"},{"content":"原始的IO\n\n\n用户空间命令不能直接读取数据\n\n用户调用用户空间的命令，用户空间提交命令到内核空间\n内核空间获取命令请求对应的旬斋对应的指令去获取数据，并加数据放到缓冲区\n\n数据就绪，用户空间开始读取数据","date":"2022-06-06 14:09:36","docid":0,"fillcolor":"ffffed99","folded":true,"id":67,"markups":[{"content":"用户应用只会请求数据然后等待数据返回，进行处理\n\n\n两阶段都会阻塞","date":"2022-06-06 14:09:39","docid":0,"fillcolor":"ffffed99","id":68,"originaltext":"阶段一：","page":103,"textblocks":[{"first":[63.19200134277344,170.97999572753906,15.959999084472656,18.5],"last":[111.0719985961914,170.97999572753906,15.959999084472656,18.5],"length":4,"rects":[[63.19200134277344,170.97999572753906,63.839996337890625,18.5]],"start":68,"text":"阶段一："}],"type":5,"uuid":"06ab50cb9af86a93fd817eb7e0466c4c"},{"content":"收到用户应用的命令，内控开始寻找数据，找到将数据拷贝到内核缓存空间\n\n内核缓存空间将数据拷贝到用户缓存空间\n\n（只有数据全部拷贝到用户缓存空间，用户空间才不会阻塞）\n\n两阶段都会阻塞","date":"2022-06-06 14:09:43","docid":0,"fillcolor":"ffffed99","id":69,"originaltext":"阶段二：","page":103,"textblocks":[{"first":[63.19200134277344,288.6300048828125,15.959999084472656,18.5],"last":[111.0719985961914,288.6300048828125,15.959999084472656,18.5],"length":4,"rects":[[63.19200134277344,288.6300048828125,63.839996337890625,18.5]],"start":127,"text":"阶段二："}],"type":5,"uuid":"12afe014f557cae94edcd2188f7d4171"}],"originaltext":"阻塞IO","page":102,"textblocks":[{"first":[63.215999603271484,86.8800048828125,24.023998260498047,21.5],"last":[119.26000213623047,86.8800048828125,19.651634216308594,21.5],"length":4,"rects":[[63.215999603271484,86.8800048828125,75.69563674926758,21.5]],"start":54,"text":"阻塞IO"}],"type":5,"uuid":"c5dfcb21173a7f29c242012a80bbbac2"},{"content":"由于不停的调用命令，有可能还不如阻塞IO\n\n没有提升多少","date":"2022-06-06 14:22:22","docid":0,"fillcolor":"ffffed99","folded":true,"id":70,"markups":[{"content":"会不断的提交请求到内核空间，如果内核空间缓冲区没有数据或者用户不全，直接返回error，第一次获取到命令内核空间就回去准备数据到缓冲区\n\n该阶段不会阻塞","date":"2022-06-06 14:24:11","docid":0,"fillcolor":"ffffed99","id":71,"originaltext":"阶段一：","page":105,"textblocks":[{"first":[63.19200134277344,170.97999572753906,15.959999084472656,18.5],"last":[111.0719985961914,170.97999572753906,15.959999084472656,18.5],"length":4,"rects":[[63.19200134277344,170.97999572753906,63.839996337890625,18.5]],"start":84,"text":"阶段一："}],"type":5,"uuid":"aa8db4dcdace7f5064f8e70d9b2deb17"},{"content":"内核空间缓冲区拷贝完成，开始将数据拷贝到用户空间的缓冲数据中\n\n该阶段会阻塞","date":"2022-06-06 14:24:14","docid":0,"fillcolor":"ffffed99","id":72,"originaltext":"阶段二：","page":105,"textblocks":[{"first":[63.19200134277344,345.75,15.984001159667969,18.5],"last":[111.0719985961914,345.75,15.984001159667969,18.5],"length":4,"rects":[[63.19200134277344,345.75,63.86399841308594,18.5]],"start":173,"text":"阶段二："}],"type":5,"uuid":"52346da2c40cc98a9b21a9d24a4b80d3"},{"date":"2022-06-06 14:35:47","docid":0,"fillcolor":"ffffed99","id":74,"originaltext":"可以看到，非阻塞IO模型中，用户进程在第一个阶段是非阻塞，第二个阶段是阻塞状态。虽然是非阻塞，但性能并没有得到提高。而且忙等机制会导致CPU空转，CPU使用率暴增。","page":105,"textblocks":[{"first":[63.19200134277344,462.4960021972656,14.040000915527344,17.5],"last":[330.57366943359375,488.19598388671875,14.040008544921875,16.5],"length":83,"rects":[[63.19200134277344,462.4960021972656,827.7758331298828,17.5],[63.19200134277344,488.19598388671875,281.4216766357422,16.5]],"start":231,"text":"可以看到，非阻塞IO模型中，用户进程在第一个阶段是非阻塞，第二个阶段是阻塞状态。虽然是非阻塞，但性能并没有得到提高。而且\n忙等机制会导致CPU空转，CPU使用率暴增。"}],"type":5,"uuid":"f5919e3ccfa81b56b2a7327a58dfbf56"}],"originaltext":"非阻塞IO","page":105,"textblocks":[{"first":[63.215999603271484,86.18000793457031,24.023998260498047,26.5],"last":[143.25999450683594,86.18000793457031,19.651626586914062,26.5],"length":5,"rects":[[63.215999603271484,86.18000793457031,99.69562149047852,26.5]],"start":39,"text":"非阻塞IO"}],"type":5,"uuid":"dbec19c9927621fcc38d139bf3f00de8"},{"content":"从非阻塞IO的升级版，对第一阶段进行了调整\n\n第一阶段是需要等待数据拷贝到内核缓冲区才能开始第二阶段，所以在用户空间知道内核空间数据是否准备好是调优的关键","date":"2022-06-06 14:33:56","docid":0,"fillcolor":"ffffed99","folded":true,"id":73,"markups":[{"content":"之前阻塞和非阻塞的处理方案","date":"2022-06-06 14:37:27","docid":0,"fillcolor":"ffffed99","folded":true,"id":77,"markups":[{"content":"直接开始第二阶段","date":"2022-06-06 14:36:46","docid":0,"fillcolor":"ffffed99","id":76,"originaltext":"有数据","page":107,"textblocks":[{"first":[257.739990234375,193.6199951171875,14.040008544921875,17.5],"last":[285.6936340332031,193.6199951171875,14.040008544921875,17.5],"length":3,"rects":[[257.739990234375,193.6199951171875,41.99365234375,17.5]],"start":181,"text":"有数据"}],"type":5,"uuid":"53074753e30f3584371a8db01935cb02"},{"content":"阻塞IO直接阻塞CPU\n非阻塞IO直接空转","date":"2022-06-06 14:36:44","docid":0,"fillcolor":"ffffed99","id":75,"originaltext":"没有数据","page":107,"textblocks":[{"first":[257.739990234375,165.05999755859375,14.040008544921875,17.5],"last":[299.7400207519531,165.05999755859375,14.040008544921875,17.5],"length":4,"rects":[[257.739990234375,165.05999755859375,56.0400390625,17.5]],"start":120,"text":"没有数据"}],"type":5,"uuid":"f8e989760ca0cc5ada5d69ee816d8add"}],"originaltext":"无数据时","page":107,"textblocks":[{"first":[630.2208251953125,136.48001098632812,14.03997802734375,17.5],"last":[672.2144165039062,136.48001098632812,14.03997802734375,17.5],"length":4,"rects":[[630.2208251953125,136.48001098632812,56.0335693359375,17.5]],"start":92,"text":"无数据时"}],"type":5,"uuid":"942a384e6ac197a30562ee5ff3f3820f"},{"date":"2022-06-06 14:44:48","docid":0,"fillcolor":"ffffed99","folded":true,"id":78,"markups":[{"content":"每一个东西都被视为文件，携带一个FD文件描述符\n\n关键在于FD文件描述符，只要可读就表示可以开始第二阶段，开销比较小可以监听很多的FD","date":"2022-06-06 14:45:03","docid":0,"fillcolor":"ffffed99","id":79,"originaltext":"文件描述符","page":108,"textblocks":[{"first":[63.19200134277344,136.72000122070312,15.984001159667969,20.5],"last":[127.03199768066406,136.72000122070312,15.983993530273438,20.5],"length":5,"rects":[[63.19200134277344,136.72000122070312,79.82398986816406,20.5]],"start":46,"text":"文件描述符"}],"type":5,"uuid":"8fb4ca33e93fd81184f699ce9f04d0fe"},{"content":"基本思想","date":"2022-06-06 14:45:05","docid":0,"fillcolor":"ffffed99","id":80,"markups":[{"content":"对比上面的第一阶段，虽然还是阻塞，但是它是监听了多个路段，只要有一个数据的FD可读就表示，内核缓冲区数据拷贝好了，可以开始第二阶段了","date":"2022-06-06 14:59:57","docid":0,"fillcolor":"ffffed99","id":81,"originaltext":"阶段一","page":108,"textblocks":[{"first":[63.19200134277344,258.4800109863281,14.040000915527344,16.5],"last":[91.27200317382812,258.4800109863281,14.040000915527344,16.5],"length":3,"rects":[[63.19200134277344,258.4800109863281,42.12000274658203,16.5]],"start":219,"text":"阶段一"}],"type":5,"uuid":"7ff4573ed3d42e3518575c7ff714b9f3"},{"content":"跟之前的第二阶段一样，不同在于因为同时监听多个FD数据，用户空间有可能循环读取内核缓冲区","date":"2022-06-06 15:00:00","docid":0,"fillcolor":"ffffed99","id":82,"originaltext":"阶段二","page":108,"textblocks":[{"first":[63.19200134277344,385.47998046875,14.064002990722656,17.5],"last":[91.27200317382812,385.47998046875,14.064002990722656,17.5],"length":3,"rects":[[63.19200134277344,385.47998046875,42.144004821777344,17.5]],"start":310,"text":"阶段二"}],"type":5,"uuid":"8b22f8db84f9566337819d63afd13e0a"}],"originaltext":"IO多路复用","page":108,"textblocks":[{"first":[63.19200134277344,199.07998657226562,5.3466033935546875,18.5],"last":[129.552001953125,199.07998657226562,15.960006713867188,18.5],"length":6,"rects":[[63.19200134277344,199.07998657226562,82.32000732421875,18.5]],"start":156,"text":"IO多路复用"}],"type":5,"uuid":"43945e67847bd2bfc5986c86398ea8eb"}],"originaltext":"IO多路复用","page":108,"textblocks":[{"first":[63.215999603271484,84.8800048828125,8.048038482666016,26.5],"last":[162.93600463867188,84.8800048828125,24.024002075195312,26.5],"length":6,"rects":[[63.215999603271484,84.8800048828125,123.7440071105957,26.5]],"start":39,"text":"IO多路复用"}],"title":"方法","type":5,"uuid":"8b93466a0c341978e17611e74a727aaa"},{"content":"FD是无符号的整数","date":"2022-06-06 15:04:25","docid":0,"fillcolor":"ffffed99","folded":true,"id":83,"markups":[{"date":"2022-06-06 15:04:47","docid":0,"fillcolor":"ffffed99","id":84,"originaltext":"select","page":109,"textblocks":[{"first":[85.75199890136719,203.07998657226562,7.3894805908203125,12.5],"last":[123.36972045898438,203.07998657226562,5.9530792236328125,12.5],"length":6,"rects":[[85.75199890136719,203.07998657226562,43.57080078125,12.5]],"start":137,"text":"select"}],"type":5,"uuid":"73a4e188d8570fb951a94bb867e1ee5a"},{"date":"2022-06-06 15:04:49","docid":0,"fillcolor":"ffffed99","id":85,"originaltext":"poll","page":109,"textblocks":[{"first":[85.75199890136719,235.72000122070312,10.198440551757812,16.5],"last":[110.37828063964844,235.72000122070312,4.245361328125,16.5],"length":4,"rects":[[85.75199890136719,235.72000122070312,28.87164306640625,16.5]],"start":146,"text":"poll"}],"type":5,"uuid":"6298124e3be588c82a89e47b55e8eae2"},{"date":"2022-06-06 15:04:51","docid":0,"fillcolor":"ffffed99","id":86,"originaltext":"epoll","page":109,"textblocks":[{"first":[85.75199890136719,264.2900085449219,9.04931640625,19.5],"last":[119.37971496582031,264.2900085449219,4.245361328125,19.5],"length":5,"rects":[[85.75199890136719,264.2900085449219,37.873077392578125,19.5]],"start":153,"text":"epoll"}],"type":5,"uuid":"89f6fffa91f98709c7d243d782240bea"},{"content":"总体的不同：\nselct和poll不知道可读FD的来源，只知道有的FD可以读取了\n所以需要去寻找\n\nepoll直接定位可读FD是谁","date":"2022-06-06 15:05:36","docid":0,"fillcolor":"ffffed99","id":87,"originaltext":"差异","page":109,"textblocks":[{"first":[66,297.030029296875,15.984001159667969,18.5],"last":[81.95999908447266,297.030029296875,15.984001159667969,18.5],"length":2,"rects":[[66,297.030029296875,31.944000244140625,18.5]],"start":159,"text":"差异"}],"type":5,"uuid":"ed4fd074257dbb7097f3de60038844b4"}],"originaltext":"IO多路复用","page":109,"textblocks":[{"first":[63.19200134277344,137.51998901367188,5.354637145996094,19.5],"last":[129.552001953125,137.51998901367188,15.983993530273438,19.5],"length":6,"rects":[[63.19200134277344,137.51998901367188,82.343994140625,19.5]],"start":46,"text":"IO多路复用"}],"title":"三种模式","type":5,"uuid":"ca3e347d68cdac4241627ab3472a68da"},{"content":"注意点：\n1、将对应的事件的FD进行了分类读事件，听事件，异常事件\n2、等待时间进行了设置null一直等待，0不阻塞等待，>0 等待固定时间\n3、最大存储1024个fd\n\n（监听集合只要需要监听就将对应的位置为1）\n过程：\n1、首先创建要监听的集合，执行selct\n2、将这个集合拷贝到内核缓存中\n3、遍历内核缓存中的监听集合，没有就绪，就休眠\n4、有fd=1就绪或者超时，就遍历集合将没有就绪的变成0，就绪的不动\n5、然后将集合拷贝到用户空间并返回对应有多少个就绪 DF，并覆盖对应的监听集合\n6、用户空间遍历集合只要对应的fd=1就绪，就去开始对应的第二阶段","date":"2022-06-06 15:09:49","docid":0,"fillcolor":"ffffed99","folded":true,"id":88,"markups":[{"content":"缺陷\n1、多次拷贝\n2、多次遍历\n3、监听数量fd小于1024","date":"2022-06-06 15:37:31","docid":0,"fillcolor":"ffffed99","id":89,"originaltext":"select模式存在的问题","page":111,"textblocks":[{"first":[532.9400024414062,453.52398681640625,6.33599853515625,13.5],"last":[633.7815551757812,453.52398681640625,10.55999755859375,13.5],"length":13,"rects":[[532.9400024414062,453.52398681640625,111.40155029296875,13.5]],"start":798,"text":"select模式存在的问题"}],"type":5,"uuid":"9db40fe9a1afd6bbefca26adb5e3b45f"}],"originaltext":"IO多路复用-select","page":110,"textblocks":[{"first":[63.215999603271484,86.18000793457031,8.048038482666016,26.5],"last":[256.5511169433594,86.18000793457031,9.9459228515625,26.5],"length":13,"rects":[[63.215999603271484,86.18000793457031,203.2810401916504,26.5]],"start":39,"text":"IO多路复用-select"}],"type":5,"uuid":"3bc70ed0ec3a8507f595cb13e6cf5268"},{"content":"对seelect的改进\n过程\n1、创建对应数组，转存到内核空间变成链表形式\n2、内核空间接收，遍历整个FD，如没有，休眠\n3、存在FD就绪，超时，再次遍历这个链表，有就改变FD结构，发生的时间类型写入，并返回附带个数\n4、用户空间接收个数，大于0遍历整个返回的链表，找到对应FD","date":"2022-06-06 16:09:55","docid":0,"fillcolor":"ffffed99","folded":true,"id":90,"markups":[{"content":"换汤不换药，整个步骤还是走了select，只不过存储的结构改变了\n1、结构改变\nselect使用了位数组\npoll使用特定结构数组\n2、内核空间改变\npoll使用链表存储，节点越多，性能越低\n","date":"2022-06-06 16:58:46","docid":0,"fillcolor":"ffffed99","id":91,"originaltext":"与select对比","page":112,"textblocks":[{"first":[63.167999267578125,380.489990234375,15.959999084472656,12.5],"last":[138.77000427246094,380.489990234375,15.960006713867188,12.5],"length":9,"rects":[[63.167999267578125,380.489990234375,91.56201171875,12.5]],"start":599,"text":"与select对比"}],"type":5,"uuid":"0e01ba9ffa0a4d55414eeaa5b95a378a"}],"originaltext":"IO多路复用-poll","page":112,"textblocks":[{"first":[63.215999603271484,83.7800064086914,8.048038482666016,29.5],"last":[236.1787567138672,83.7800064086914,7.1110992431640625,29.5],"length":11,"rects":[[63.215999603271484,83.7800064086914,180.07385635375977,29.5]],"start":39,"text":"IO多路复用-poll"}],"type":5,"uuid":"da2588cb54ffe98190113a5b0dc8972c"},{"content":"在内核空间一个epoll\n1、红黑树记录监听的FD\n2、链表记录就绪的FD\n\n过程\n1、调用create创建对应的eventpoll\n2、添加一个FD到红黑树中，并添加对应的回调函数，一旦触发，对应的FD会被添加到链表中\n3、检查链表是否位空null，不为空就返回数量，附带超时\n（注意对于就绪FD的获取，因为wait函数中传递了空数组的应用，会将就绪FD放到整个空数组中，所以间接获取了就绪FD）\n\n如此就获取到了就绪FD及其数量","date":"2022-06-06 17:00:39","docid":0,"fillcolor":"ffffed99","id":92,"originaltext":"IO多路复用-epoll","page":113,"textblocks":[{"first":[63.215999603271484,83.7800064086914,8.048038482666016,29.5],"last":[250.0646209716797,83.7800064086914,7.1110992431640625,29.5],"length":12,"rects":[[63.215999603271484,83.7800064086914,193.95972061157227,29.5]],"start":39,"text":"IO多路复用-epoll"}],"type":5,"uuid":"60bc763444856c048901689f838a2ffb"},{"date":"2022-06-06 17:08:52","docid":0,"fillcolor":"ffffed99","id":94,"originaltext":"总结","page":114,"textblocks":[{"first":[153.1699981689453,244.19000244140625,39.96000671386719,50.5],"last":[193.1300048828125,244.19000244140625,39.959991455078125,50.5],"length":2,"rects":[[153.1699981689453,244.19000244140625,79.91999816894531,50.5]],"start":41,"text":"总结"}],"type":5,"uuid":"64b338d1411a8a0d59e9f676bdf3acd1"}],"originaltext":"IO多路复用","page":107,"textblocks":[{"first":[63.215999603271484,84.8800048828125,8.048038482666016,26.5],"last":[162.93600463867188,84.8800048828125,24.024002075195312,26.5],"length":6,"rects":[[63.215999603271484,84.8800048828125,123.7440071105957,26.5]],"start":39,"text":"IO多路复用"}],"type":5,"uuid":"74658befa0b32eecca79460fb773abac"},{"content":"调用epoll的wait得到的通知有两种：\n1、LT水平触发：没读取全部数据，还存在部分数据未读取，会重复通知，等待读取\n2、ET边沿触发：只给一次机会，没有读取完整，直接跳过，不给机会连接\n\n（ET直接循环读取即可）\n\n\n本质是在内核空间上就绪链表是否断开的决定，如果是ET，那么就绪链表被拷贝后直接断开，不会再此连接，LT会检查一遍，如果没有拷贝完成会重新连接","date":"2022-06-06 17:08:46","docid":0,"fillcolor":"ffffed99","id":93,"originaltext":"IO多路复用-事件通知机制","page":115,"textblocks":[{"first":[63.215999603271484,84.8800048828125,8.048038482666016,26.5],"last":[317.4999694824219,84.8800048828125,24.02398681640625,26.5],"length":13,"rects":[[63.215999603271484,84.8800048828125,278.30795669555664,26.5]],"start":39,"text":"IO多路复用-事件通知机制"}],"type":5,"uuid":"67b4bc8de347ef4307ffbb3bf907e378"},{"content":"对于web服务过程只要分清楚第一阶段和第二阶段即可\n\n中间的间隔在于数据是否在内核区域的缓冲区准备好","date":"2022-06-06 17:43:40","docid":0,"fillcolor":"ffffed99","id":95,"originaltext":"IO多路复用-web服务流程","page":116,"textblocks":[{"first":[63.215999603271484,86.18000793457031,8.048038482666016,26.5],"last":[319.55999755859375,86.18000793457031,24.02398681640625,26.5],"length":14,"rects":[[63.215999603271484,86.18000793457031,280.3679847717285,26.5]],"start":51,"text":"IO多路复用-web服务流程"}],"type":5,"uuid":"85d75a5e98887df6b6c67dca216985af"},{"date":"2022-06-07 09:11:16","docid":0,"fillcolor":"ffffed99","folded":true,"id":96,"markups":[{"content":"直接调用一个sigaction行数，建立一个信号处理函数\n\n只要有数据就会递交SIGIO信号，做到第一阶段真正的无阻塞\n\n非阻塞IO的第一阶段是空转","date":"2022-06-07 09:17:28","docid":0,"fillcolor":"ffffed99","id":97,"originaltext":"阶段一","page":118,"textblocks":[{"first":[63.167999267578125,194.14999389648438,14.040000915527344,16.5],"last":[91.24800109863281,194.14999389648438,14.040000915527344,16.5],"length":3,"rects":[[63.167999267578125,194.14999389648438,42.12000274658203,16.5]],"start":155,"text":"阶段一"}],"type":5,"uuid":"931ef59a1a25fecd5353a3c9b77026cd"},{"content":"照常进行，阻塞","date":"2022-06-07 09:17:30","docid":0,"fillcolor":"ffffed99","id":98,"originaltext":"阶段二","page":118,"textblocks":[{"first":[63.167999267578125,320.1499938964844,14.040000915527344,17.5],"last":[91.24800109863281,320.1499938964844,14.040000915527344,17.5],"length":3,"rects":[[63.167999267578125,320.1499938964844,42.12000274658203,17.5]],"start":248,"text":"阶段二"}],"type":5,"uuid":"59ab20e3a24ec2bcd6a69e4c09505e5f"},{"content":"1、SIGIO收到IO影响，会变慢，导致信号队列溢出\n\n2、内核和用户信号交互较频繁，影响性能","date":"2022-06-07 09:19:46","docid":0,"fillcolor":"ffffed99","id":99,"originaltext":"当有大量IO操作时，信号较多，SIGIO处理函数不能及时处理可能导致信号队列溢出，而且内核空间与用户空间的频繁信号交互性能也较低。","page":118,"textblocks":[{"first":[63.167999267578125,469.41998291015625,12,14.5],"last":[792.9100341796875,469.41998291015625,12,14.5],"length":65,"rects":[[63.167999267578125,469.41998291015625,741.7420349121094,14.5]],"start":305,"text":"当有大量IO操作时，信号较多，SIGIO处理函数不能及时处理可能导致信号队列溢出，而且内核空间与用户空间的频繁信号交互性能也较低。"}],"type":5,"uuid":"72242bf5be51e5a671bbbad610a0f97f"}],"originaltext":"信号驱动IO","page":118,"textblocks":[{"first":[63.215999603271484,86.18000793457031,24.023998260498047,26.5],"last":[167.25999450683594,86.18000793457031,19.651626586914062,26.5],"length":6,"rects":[[63.215999603271484,86.18000793457031,123.69562149047852,26.5]],"start":39,"text":"信号驱动IO"}],"type":5,"uuid":"6e7c9edcb30e60484838e43afc25a50a"},{"content":"直接放开，做到完全无阻塞\n\n缺点：\n放开交互，在高并发场景下，内核空间压力会剧增\n\n\n所以使用异步IO一定需要考虑限流","date":"2022-06-07 09:22:49","docid":0,"fillcolor":"ffffed99","id":100,"originaltext":"异步IO","page":120,"textblocks":[{"first":[63.215999603271484,86.8800048828125,24.023998260498047,21.5],"last":[119.26000213623047,86.8800048828125,19.651634216308594,21.5],"length":4,"rects":[[63.215999603271484,86.8800048828125,75.69563674926758,21.5]],"start":39,"text":"异步IO"}],"type":5,"uuid":"d0c5afc0d874c0c240c34fdd093a9a9b"},{"content":"判断同步和异步的标准在于第二阶段是否同步\n\n（与是否阻塞无关）","date":"2022-06-07 09:26:47","docid":0,"fillcolor":"ffffed99","id":101,"originaltext":"同步和异步","page":121,"textblocks":[{"first":[63.215999603271484,85.8800048828125,24.023998260498047,25.5],"last":[159.21600341796875,85.8800048828125,24.024002075195312,25.5],"length":5,"rects":[[63.215999603271484,85.8800048828125,120.02400588989258,25.5]],"start":99,"text":"同步和异步"}],"type":5,"uuid":"d6c216c76606983577faea772a7cf45e"},{"content":"整体来说\n核心业务处理就是命令之类的使用的还是多路复用+单线程\n\n只有解析命令和写响应结果用了多线程","date":"2022-06-07 09:29:42","docid":0,"fillcolor":"ffffed99","folded":true,"id":102,"markups":[{"content":"在核心业务部分就是命令处理是单线程\n\n整个Redis就是多线程，6.0版本引入\n例如：异步删除命令unlink","date":"2022-06-07 09:30:26","docid":0,"fillcolor":"ffffed99","id":103,"originaltext":"Redis到底是单线程还是多线程？","page":123,"textblocks":[{"first":[63.19200134277344,137.51998901367188,10.437553405761719,19.5],"last":[279.66192626953125,137.51998901367188,15.9840087890625,19.5],"length":17,"rects":[[63.19200134277344,137.51998901367188,232.4539337158203,19.5]],"start":49,"text":"Redis到底是单线程还是多线程？"}],"type":5,"uuid":"04b8228da6b2a0e022b4b725bba0975c"},{"content":"1、内存操作，速度较快，性能限制不是单线程，而是网络速度\n\n2、上下文切换耗费的性能比内存中单线程转多线程提升的性能，大得多\n\n3、多线程引发了安全问题\n\n（完全没有必要整个转多线程)","date":"2022-06-07 09:35:56","docid":0,"fillcolor":"ffffed99","id":104,"originaltext":"1. 为什么Redis要选择单线程？","page":124,"textblocks":[{"first":[410.92999267578125,137.77000427246094,10.548004150390625,21.5],"last":[646.033935546875,137.77000427246094,18,21.5],"length":18,"rects":[[410.92999267578125,137.77000427246094,253.10394287109375,21.5]],"start":42,"text":"1. 为什么Redis要选择单线程？"}],"type":5,"uuid":"71049a2b121143d11d2a626b528409f0"}],"originaltext":"Redis网络模型","page":123,"textblocks":[{"first":[63.215999603271484,86.18000793457031,16.768756866455078,26.5],"last":[200.25999450683594,86.18000793457031,24.024002075195312,26.5],"length":9,"rects":[[63.215999603271484,86.18000793457031,161.06799697875977,26.5]],"start":39,"text":"Redis网络模型"}],"type":5,"uuid":"dcf61ea5b9d1bbc6b61839d3c7b45793"}],"originaltext":"Redis网络模型","page":93,"textblocks":[{"first":[419.260009765625,223.62799072265625,20.922119140625,35.19000244140625],"last":[597.4120483398438,223.62799072265625,32.03997802734375,35.19000244140625],"length":9,"rects":[[419.260009765625,223.62799072265625,210.1920166015625,35.19000244140625]],"start":0,"text":"Redis网络模型"}],"type":5,"uuid":"3c379f3ed4e6b8177af6b75e83b4bce6"},{"date":"2022-06-07 09:41:14","docid":0,"fillcolor":"ffffed99","folded":false,"id":105,"markups":[{"content":"这是CS架构客户端和服务端接收和响应的协议，参考HTTP协议\n\nRESP3有客户端缓存，但是RESP2没有\n\n所以RESP2可以参考成HTTP无状态协议","date":"2022-06-07 09:41:21","docid":0,"fillcolor":"ffffed99","id":106,"originaltext":"RESP协议","page":131,"textblocks":[{"first":[63.215999603271484,86.8800048828125,16.768756866455078,21.5],"last":[147.82000732421875,86.8800048828125,24.024002075195312,21.5],"length":6,"rects":[[63.215999603271484,86.8800048828125,108.62800979614258,21.5]],"start":400,"text":"RESP协议"}],"type":5,"uuid":"dcbfbfa7d6ab299469c3b937faa7d31a"},{"date":"2022-06-07 09:52:20","docid":0,"fillcolor":"ffffed99","folded":true,"id":107,"markups":[{"content":"开头：+\n结束：\\r\\n\n注意：自定义的字符串不允许出现\\r\\n","date":"2022-06-07 09:53:07","docid":0,"fillcolor":"ffffed99","id":108,"originaltext":"单行字符串","page":132,"textblocks":[{"first":[85.75199890136719,170.17999267578125,15.959999084472656,19.5],"last":[149.59201049804688,170.17999267578125,15.960006713867188,19.5],"length":5,"rects":[[85.75199890136719,170.17999267578125,79.80001831054688,19.5]],"start":79,"text":"单行字符串"}],"type":5,"uuid":"5a1402183aeaefcd36c608522cb53b47"},{"content":"开头：-\n结束：\\r\\n\n注意：自定义的字符串不允许出现\\r\\n","date":"2022-06-07 09:53:10","docid":0,"fillcolor":"ffffed99","id":109,"originaltext":"错误（Errors）","page":132,"textblocks":[{"first":[85.75199890136719,202.92001342773438,15.959999084472656,18.5],"last":[178.27000427246094,202.92001342773438,15.960006713867188,18.5],"length":10,"rects":[[85.75199890136719,202.92001342773438,108.47801208496094,18.5]],"start":145,"text":"错误（Errors）"}],"type":5,"uuid":"923f6d7560064285a2c06fd176da8da6"},{"content":"开头：：\n结束：\\r\\n\n注意：自定义的数值不允许出现\\r\\n","date":"2022-06-07 09:53:12","docid":0,"fillcolor":"ffffed99","id":110,"originaltext":"数值","page":132,"textblocks":[{"first":[85.75199890136719,263.99676513671875,15.959999084472656,19.8665771484375],"last":[101.71199798583984,263.99676513671875,15.959999084472656,19.8665771484375],"length":2,"rects":[[85.75199890136719,263.99676513671875,31.919998168945312,19.8665771484375]],"start":215,"text":"数值"}],"type":5,"uuid":"ee43c2f44ac378e6e24d87c7aa8feacb"},{"content":"开头：$\n结束：\\r\\n\n注意：首个数字代表字符串的长度\\r\\n，第二个\\r\\n才是真正的结束标志\n\n其中\n0表示空字符串\n-1表示不存在\n最大存储512M","date":"2022-06-07 09:53:15","docid":0,"fillcolor":"ffffed99","id":111,"originaltext":"多行字符串","page":132,"textblocks":[{"first":[85.75199890136719,297.0299987792969,15.959999084472656,18.5],"last":[149.59201049804688,297.0299987792969,15.960006713867188,18.5],"length":5,"rects":[[85.75199890136719,297.0299987792969,79.80001831054688,18.5]],"start":264,"text":"多行字符串"}],"type":5,"uuid":"4d33768c151f66339888638111d0fc4b"},{"content":"开头：*\n结束：\\r\\n\n注意：后面接的就是数组，跟多行字符串一样首个\\r\\n之前是数组的长度也就是个数，后面接上面4种类型\n（UTF-8中中文占3个字节","date":"2022-06-07 09:53:18","docid":0,"fillcolor":"ffffed99","id":112,"originaltext":"数组","page":132,"textblocks":[{"first":[85.75199890136719,386.416748046875,15.959999084472656,19.8665771484375],"last":[101.71199798583984,386.416748046875,15.959999084472656,19.8665771484375],"length":2,"rects":[[85.75199890136719,386.416748046875,31.919998168945312,19.8665771484375]],"start":362,"text":"数组"}],"type":5,"uuid":"ec5a2eb774311064ebf47aee3adc6c9a"}],"originaltext":"RESP协议-数据类型","page":132,"textblocks":[{"first":[63.215999603271484,84.8800048828125,16.768756866455078,26.5],"last":[254.25999450683594,84.8800048828125,24.024002075195312,26.5],"length":11,"rects":[[63.215999603271484,84.8800048828125,215.06799697875977,26.5]],"start":401,"text":"RESP协议-数据类型"}],"type":5,"uuid":"c6646a923ac4758007d0f94ec7537f8d"}],"originaltext":"Redis通信协议","page":129,"textblocks":[{"first":[419.260009765625,223.62799072265625,20.922119140625,35.19000244140625],"last":[597.4120483398438,223.62799072265625,32.03997802734375,35.19000244140625],"length":9,"rects":[[419.260009765625,223.62799072265625,210.1920166015625,35.19000244140625]],"start":0,"text":"Redis通信协议"}],"type":5,"uuid":"e83bd901cd9abbe7ea2deb29f34bff9c"},{"date":"2022-06-07 10:05:07","docid":0,"fillcolor":"ffffed99","folded":false,"id":113,"markups":[{"date":"2022-06-07 10:09:06","docid":0,"fillcolor":"ffffed99","folded":false,"id":114,"markups":[{"date":"2022-06-07 10:09:41","docid":0,"fillcolor":"ffffed99","id":115,"originaltext":"内存过期策略","page":139,"textblocks":[{"first":[85.75199890136719,362.33001708984375,15.959999084472656,18.5],"last":[165.55201721191406,362.33001708984375,15.960006713867188,18.5],"length":6,"rects":[[85.75199890136719,362.33001708984375,95.76002502441406,18.5]],"start":183,"text":"内存过期策略"}],"type":5,"uuid":"71937f74769495ff719f174b7da40881"},{"date":"2022-06-07 10:09:42","docid":0,"fillcolor":"ffffed99","id":116,"originaltext":"内存淘汰策略","page":139,"textblocks":[{"first":[85.75199890136719,394.9700012207031,15.959999084472656,18.5],"last":[165.55201721191406,394.9700012207031,15.960006713867188,18.5],"length":6,"rects":[[85.75199890136719,394.9700012207031,95.76002502441406,18.5]],"start":192,"text":"内存淘汰策略"}],"type":5,"uuid":"f7f8a47aa47faafb678bf200f1a8642e"}],"originaltext":"Redis内存回收","page":139,"textblocks":[{"first":[63.215999603271484,86.18000793457031,16.768756866455078,26.5],"last":[200.25999450683594,86.18000793457031,24.024002075195312,26.5],"length":9,"rects":[[63.215999603271484,86.18000793457031,161.06799697875977,26.5]],"start":199,"text":"Redis内存回收"}],"type":5,"uuid":"760494580fe5b5ff3628a743d7ff2c01"},{"content":"一般来说expire设置存活时间就是经典的过期策略\n\n问题在于怎么确定一个key是否过期？以及删除？\n\n所以过期主要指的就是TTL的相关知识点","date":"2022-06-07 10:09:48","docid":0,"fillcolor":"ffffed99","folded":false,"id":117,"markups":[{"content":"Redis本事就是一个使用key-value存储的结构\n所有的数据都存储在Dict中\n\n会另起一个Dict存储key-TTL也就是过期时间\n\n也就是一共两个Dict，一个存储数据，一个而存储过期时间","date":"2022-06-07 10:21:31","docid":0,"fillcolor":"ffffed99","folded":true,"id":120,"markups":[{"date":"2022-06-07 10:46:25","docid":0,"fillcolor":"ffffed99","id":121,"originaltext":"过期策略-DB结构","page":144,"textblocks":[{"first":[63.215999603271484,84.8800048828125,24.023998260498047,26.5],"last":[229.08399963378906,84.8800048828125,24.024002075195312,26.5],"length":9,"rects":[[63.215999603271484,84.8800048828125,189.8920021057129,26.5]],"start":39,"text":"过期策略-DB结构"}],"type":5,"uuid":"ea78abc955f88cfa8b36a42db8e5bd0e"}],"originaltext":"过期策略-DB结构","page":143,"textblocks":[{"first":[63.215999603271484,84.8800048828125,24.023998260498047,26.5],"last":[229.08399963378906,84.8800048828125,24.024002075195312,26.5],"length":9,"rects":[[63.215999603271484,84.8800048828125,189.8920021057129,26.5]],"start":159,"text":"过期策略-DB结构"}],"type":5,"uuid":"cbbef858c0a49ef82e6bb1de967a9a61"},{"date":"2022-06-07 10:48:14","docid":0,"fillcolor":"ffffed99","folded":false,"id":122,"markups":[{"date":"2022-06-07 10:48:20","docid":0,"fillcolor":"ffffed99","id":123,"originaltext":"利用两个Dict分别记录key-value对及key-ttl对","page":145,"textblocks":[{"first":[454.489990234375,247.14999389648438,18.02398681640625,22.5],"last":[806.02001953125,247.14999389648438,18.02398681640625,22.5],"length":31,"rects":[[454.489990234375,247.14999389648438,369.55401611328125,22.5]],"start":83,"text":"利用两个Dict分别记录key-value对及key-ttl对"}],"type":5,"uuid":"fcb864c6fb428ef3620807d6874e9ffc"}],"originaltext":"① Redis是如何知道一个key是否过期呢？","page":145,"textblocks":[{"first":[410.92999267578125,198.8300018310547,18,23.5],"last":[729.0700073242188,198.8300018310547,18,23.5],"length":23,"rects":[[410.92999267578125,198.8300018310547,336.1400146484375,23.5]],"start":57,"text":"① Redis是如何知道一个key是否过期呢？"}],"type":5,"uuid":"08601a4ee9df3b163c13d196ca65d46b"},{"date":"2022-06-07 10:48:25","docid":0,"fillcolor":"ffffed99","folded":true,"id":124,"markups":[{"date":"2022-06-07 10:48:31","docid":0,"fillcolor":"ffffed99","id":125,"originaltext":"惰性删除","page":145,"textblocks":[{"first":[454.489990234375,342.7200012207031,18,20.5],"last":[508.489990234375,342.7200012207031,18,20.5],"length":4,"rects":[[454.489990234375,342.7200012207031,72,20.5]],"start":136,"text":"惰性删除"}],"type":5,"uuid":"3a56bbb00638fe98dc26227a7ffff3aa"},{"date":"2022-06-07 10:48:32","docid":0,"fillcolor":"ffffed99","id":126,"originaltext":"周期删除","page":145,"textblocks":[{"first":[454.489990234375,391.260009765625,18,20.5],"last":[508.489990234375,391.260009765625,18,20.5],"length":4,"rects":[[454.489990234375,391.260009765625,72,20.5]],"start":143,"text":"周期删除"}],"type":5,"uuid":"4cd6a40c9377cbe88f9d20f5dc553be6"}],"originaltext":"② 是不是TTL到期就立即删除了呢？","page":145,"textblocks":[{"first":[410.92999267578125,297.20001220703125,18,20.5],"last":[684.1699829101562,297.20001220703125,18,20.5],"length":18,"rects":[[410.92999267578125,297.20001220703125,291.239990234375,20.5]],"start":115,"text":"② 是不是TTL到期就立即删除了呢？"}],"type":5,"uuid":"e16568ab04685c1d20a5373954f62676"},{"content":"访问key的时候，才判断TTL是否过期，过期就删除","date":"2022-06-07 10:48:44","docid":0,"fillcolor":"ffffed99","id":127,"originaltext":"过期策略-惰性删除","page":146,"textblocks":[{"first":[63.215999603271484,84.8800048828125,24.023998260498047,26.5],"last":[241.66000366210938,84.8800048828125,24.02398681640625,26.5],"length":9,"rects":[[63.215999603271484,84.8800048828125,202.46799087524414,26.5]],"start":104,"text":"过期策略-惰性删除"}],"type":5,"uuid":"fccb105667a8e8776af126f29624e912"},{"content":"定期抽取部分过期key删除\n\n这个周期两种模式：\n\n两个策略key的过期比例小于10%都不会再进行\n\n相同点：执行的步骤都是一样的，都是抽取20个key\n\n不同点：执行频率不同\n\nSlow：100ms一次，一次不超过25ms\nfast：2ms一次，一次不超过1ms","date":"2022-06-07 10:53:59","docid":0,"fillcolor":"ffffed99","id":129,"originaltext":"过期策略-周期删除","page":148,"textblocks":[{"first":[63.215999603271484,84.8800048828125,24.023998260498047,26.5],"last":[241.66000366210938,84.8800048828125,24.02398681640625,26.5],"length":9,"rects":[[63.215999603271484,84.8800048828125,202.46799087524414,26.5]],"start":208,"text":"过期策略-周期删除"}],"type":5,"uuid":"7d1374534d7550da5d30e3fcf4818f40"}],"originaltext":"过期策略","page":141,"textblocks":[{"first":[63.215999603271484,84.8800048828125,24.023998260498047,26.5],"last":[135.21600341796875,84.8800048828125,24.024002075195312,26.5],"length":4,"rects":[[63.215999603271484,84.8800048828125,96.02400588989258,26.5]],"start":165,"text":"过期策略"}],"type":5,"uuid":"45690f2b12bf62dc0e3ca506f34e503e"},{"content":"过期后淘汰\n\n主要指的是内存区域满了后key的处理\n\n只要配置了上限，并且没有执行lua脚本的时候\n直接一刀切，只要使用命令就检查命令是否足够","date":"2022-06-07 11:03:46","docid":0,"fillcolor":"ffffed99","folded":false,"id":130,"markups":[{"content":"这个策略真正意义上来是4种\n针对全部key或者设置了TTL的key：\n邪魔外道\n随机\nlru：最近时间最长\nlfu：频率最低","date":"2022-06-07 11:06:19","docid":0,"fillcolor":"ffffed99","folded":false,"id":131,"markups":[{"date":"2022-06-07 11:06:26","docid":0,"fillcolor":"ffffed99","id":132,"originaltext":"noeviction：","page":152,"textblocks":[{"first":[85.75199890136719,169.16000366210938,8.648635864257812,16.5],"last":[155.8300018310547,169.16000366210938,14.039993286132812,16.5],"length":11,"rects":[[85.75199890136719,169.16000366210938,84.11799621582031,16.5]],"start":66,"text":"noeviction："}],"type":5,"uuid":"5f64327e10fc99aaf4a51a1b06131c8c"},{"date":"2022-06-07 11:06:29","docid":0,"fillcolor":"ffffed99","id":133,"originaltext":"volatile-ttl：","page":152,"textblocks":[{"first":[85.75199890136719,196.4199981689453,7.371002197265625,18.5],"last":[154.38999938964844,196.4199981689453,14.039993286132812,18.5],"length":13,"rects":[[85.75199890136719,196.4199981689453,82.67799377441406,18.5]],"start":114,"text":"volatile-ttl："}],"type":5,"uuid":"ddbab22a00e4678d2e984eee5ecec379"},{"date":"2022-06-07 11:06:35","docid":0,"fillcolor":"ffffed99","id":134,"originaltext":"allkeys-random：","page":152,"textblocks":[{"first":[85.75199890136719,224.17999267578125,7.764122009277344,19.5],"last":[189.30999755859375,224.17999267578125,14.039993286132812,19.5],"length":15,"rects":[[85.75199890136719,224.17999267578125,117.59799194335938,19.5]],"start":166,"text":"allkeys-random："}],"type":5,"uuid":"012bb093d8dc9908180b8e6aca450856"},{"date":"2022-06-07 11:06:38","docid":0,"fillcolor":"ffffed99","id":135,"originaltext":"volatile-random：","page":152,"textblocks":[{"first":[85.75199890136719,253.5699920654297,7.371002197265625,18.500015258789062],"last":[193.02999877929688,253.5699920654297,14.039993286132812,18.500015258789062],"length":16,"rects":[[85.75199890136719,253.5699920654297,121.3179931640625,18.500015258789062]],"start":218,"text":"volatile-random："}],"type":5,"uuid":"0626202bde5c209aacd5a65851a46c6f"},{"date":"2022-06-07 11:06:40","docid":0,"fillcolor":"ffffed99","id":136,"originaltext":"allkeys-lru：","page":152,"textblocks":[{"first":[85.75199890136719,282.1300048828125,7.764122009277344,18.5],"last":[154.14999389648438,282.1300048828125,14.039993286132812,18.5],"length":12,"rects":[[85.75199890136719,282.1300048828125,82.43798828125,18.5]],"start":278,"text":"allkeys-lru："}],"type":5,"uuid":"0351fa348edf27e9c0c22ffebed7e823"},{"date":"2022-06-07 11:06:44","docid":0,"fillcolor":"ffffed99","id":137,"originaltext":"volatile-lru：","page":152,"textblocks":[{"first":[85.75199890136719,309.8899841308594,7.371002197265625,19.5],"last":[157.8699951171875,309.8899841308594,14.039993286132812,19.5],"length":13,"rects":[[85.75199890136719,309.8899841308594,86.15798950195312,19.5]],"start":312,"text":"volatile-lru："}],"type":5,"uuid":"3e833e6a61851738e7929fcec70447b2"},{"date":"2022-06-07 11:06:46","docid":0,"fillcolor":"ffffed99","id":138,"originaltext":"allkeys-lfu：","page":152,"textblocks":[{"first":[85.75199890136719,339.25,7.764122009277344,18.5],"last":[153.6699981689453,339.25,14.039993286132812,18.5],"length":12,"rects":[[85.75199890136719,339.25,81.95799255371094,18.5]],"start":352,"text":"allkeys-lfu："}],"type":5,"uuid":"2db456c32ed0c8ea665fb88a6a97249e"},{"date":"2022-06-07 11:06:49","docid":0,"fillcolor":"ffffed99","id":139,"originaltext":"volatile-lfu：","page":152,"textblocks":[{"first":[85.75199890136719,367.83001708984375,7.371002197265625,18.5],"last":[157.38999938964844,367.83001708984375,14.039993286132812,18.5],"length":13,"rects":[[85.75199890136719,367.83001708984375,85.67799377441406,18.5]],"start":386,"text":"volatile-lfu："}],"type":5,"uuid":"729b951f4dad2d9d47821175e793a2f3"},{"content":"最后一次访问时间的长短\n\n越长，淘汰优先级越高","date":"2022-06-07 11:21:35","docid":0,"fillcolor":"ffffed99","id":140,"originaltext":"LRU","page":152,"textblocks":[{"first":[85.75199890136719,431.3320007324219,7.679878234863281,16.5],"last":[103.23179626464844,431.3320007324219,10.895042419433594,16.5],"length":3,"rects":[[85.75199890136719,431.3320007324219,28.374839782714844,16.5]],"start":437,"text":"LRU"}],"type":5,"uuid":"be60121a599782b365345bf0dea6f892"},{"content":"频率越低，淘汰优先级越高","date":"2022-06-07 11:21:48","docid":0,"fillcolor":"ffffed99","id":141,"originaltext":"LFU","page":152,"textblocks":[{"first":[85.75199890136719,456.8160095214844,7.679878234863281,19.5],"last":[101.26619720458984,456.8160095214844,10.895042419433594,19.5],"length":3,"rects":[[85.75199890136719,456.8160095214844,26.40924072265625,19.5]],"start":501,"text":"LFU"}],"type":5,"uuid":"66cbbd98042f7a5449f86b8c96edd686"}],"originaltext":"8种不同策略","page":152,"textblocks":[{"first":[135.91000366210938,135.9199981689453,9.366622924804688,21.5],"last":[209.1100311279297,135.9199981689453,15.983993530273438,21.5],"length":6,"rects":[[135.91000366210938,135.9199981689453,89.18402099609375,21.5]],"start":46,"text":"8种不同策略"}],"type":5,"uuid":"019770e6e84667e7e72ba4add57c7b50"},{"content":"RedisObject里面就有一个lru，高16位记录时间，低8位记录次数","date":"2022-06-07 11:37:31","docid":0,"fillcolor":"ffffed99","id":142,"originaltext":"逻辑访问次数","page":153,"textblocks":[{"first":[251.3800048828125,332.510009765625,15.9840087890625,19.5],"last":[331.4119567871094,332.510009765625,15.9840087890625,19.5],"length":6,"rects":[[251.3800048828125,332.510009765625,96.01596069335938,19.5]],"start":81,"text":"逻辑访问次数"}],"type":5,"uuid":"3ae25fba30cb9f4b115587c6ab58e0b5"}],"originaltext":"淘汰策略","page":151,"textblocks":[{"first":[63.215999603271484,84.8800048828125,24.023998260498047,26.5],"last":[135.21600341796875,84.8800048828125,24.024002075195312,26.5],"length":4,"rects":[[63.215999603271484,84.8800048828125,96.02400588989258,26.5]],"start":131,"text":"淘汰策略"}],"type":5,"uuid":"e298f6dba1e3166bece26cb7ce7f098c"}],"originaltext":"Redis内存策略","page":138,"textblocks":[{"first":[419.260009765625,223.62799072265625,20.922119140625,35.19000244140625],"last":[597.4120483398438,223.62799072265625,32.03997802734375,35.19000244140625],"length":9,"rects":[[419.260009765625,223.62799072265625,210.1920166015625,35.19000244140625]],"start":0,"text":"Redis内存策略"}],"type":5,"uuid":"24bf40b0793166fafb7aa2b318ec50f6"}],"maxid":142,"notelinks":[],"title":"Redis原理篇","unimportant":[]}
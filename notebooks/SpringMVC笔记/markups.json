{"EpubVersion":2,"filepath":"","floatingtheme":[],"folded":false,"markups":[{"date":"2021-12-26 14:21:27","docid":0,"fillcolor":"ffffed99","folded":true,"id":1,"markups":[{"date":"2021-12-26 14:23:27","docid":0,"fillcolor":"ffffed99","folded":true,"id":4,"markups":[{"date":"2021-12-26 14:23:48","docid":0,"fillcolor":"ffffed99","folded":true,"id":5,"markups":[{"date":"2021-12-26 14:21:36","docid":0,"fillcolor":"ffffed99","id":2,"originaltext":"JavaBean分为两类：","page":2,"textblocks":[{"first":[77.02230834960938,224.09423828125,2.604461669921875,8.5],"last":[157.5876922607422,224.09423828125,9.754531860351562,8.5],"length":13,"rects":[[77.02230834960938,224.09423828125,90.31991577148438,8.5]],"start":149,"text":"JavaBean分为两类："}],"type":5}],"originaltext":"M：Model","page":2,"textblocks":[{"first":[77.02230834960938,198.2837371826172,8.808341979980469,13.5],"last":[121.73544311523438,198.2837371826172,2.4678955078125,13.5],"length":7,"rects":[[77.02230834960938,198.2837371826172,47.1810302734375,13.5]],"start":115,"text":"M：Model"}],"type":5},{"date":"2021-12-26 14:23:54","docid":0,"fillcolor":"ffffed99","id":6,"originaltext":"V：View","page":2,"textblocks":[{"first":[77.02230834960938,281.8724365234375,5.803947448730469,12.5],"last":[106.3270263671875,281.8724365234375,7.589027404785156,12.5],"length":6,"rects":[[77.02230834960938,281.8724365234375,36.89374542236328,12.5]],"start":252,"text":"V：View"}],"type":5},{"date":"2021-12-26 14:24:03","docid":0,"fillcolor":"ffffed99","id":7,"originaltext":"C：Controller","page":2,"textblocks":[{"first":[77.02230834960938,304.08294677734375,6.1551055908203125,13.5],"last":[134.68972778320312,304.08294677734375,3.9798431396484375,13.5],"length":12,"rects":[[77.02230834960938,304.08294677734375,61.64726257324219,13.5]],"start":296,"text":"C：Controller"}],"type":5},{"date":"2021-12-26 14:22:06","docid":0,"fillcolor":"ffffed99","id":3,"originaltext":"MVC的工作流程：","page":2,"textblocks":[{"first":[77.02230834960938,326.893310546875,8.808341979980469,12.5],"last":[146.5614471435547,326.893310546875,9.754531860351562,12.5],"length":9,"rects":[[77.02230834960938,326.893310546875,79.29367065429688,12.5]],"start":340,"text":"MVC的工作流程："}],"type":5}],"originaltext":"1、什么是MVC","page":2,"textblocks":[{"first":[77.02230834960938,146.81103515625,8.354759216308594,14.5],"last":[167.20980834960938,146.81103515625,9.320449829101562,14.5],"length":8,"rects":[[77.02230834960938,146.81103515625,99.50794982910156,14.5]],"start":73,"text":"1、什么是MVC"}],"type":5}],"originaltext":"一、SpringMVC简介","page":2,"textblocks":[{"first":[77.02230834960938,100.0433349609375,21.94769287109375,27.5],"last":[261.2736511230469,100.0433349609375,21.94769287109375,27.5],"length":13,"rects":[[77.02230834960938,100.0433349609375,206.19903564453125,27.5]],"start":58,"text":"一、SpringMVC简介"}],"type":5},{"content":"对于\n请求转发：转发ｕｒｌ和ｒｅｑｕｅｓｔ的信息可以传递，如果从Ｓｅｒｖｌｅｔ看那么就是Ｓｅｒｖｌｅｔ之间的切换\n重定向：让浏览器重新再发一个ＨＴＴＰ给新的Ｓｅｒｖｌｅｔ","date":"2021-12-26 14:47:03","docid":0,"fillcolor":"ffffed99","folded":true,"id":8,"markups":[{"content":"ｊｓｐ本质就是一个ｓｅｒｖｌｅｔ，需要指定的ｓｅｒｖｌｅｔ解析\n／＊包括ｊｓｐ页面","date":"2021-12-26 14:47:11","docid":0,"fillcolor":"ffffed99","id":9,"originaltext":"/所匹配的请求可以是/login或.html或.js或.css方式的请求路径        但是/不能匹配.jsp请求路径的请求","page":4,"textblocks":[{"first":[129.08946228027344,307.205078125,5.2937774658203125,8.779083251953125],"last":[260.8870849609375,320.0941467285156,8.779083251953125,8.779083251953125],"length":65,"rects":[[129.08946228027344,307.205078125,267.30738830566406,8.779083251953125],[86.77684020996094,320.0941467285156,182.8893280029297,8.779083251953125]],"start":603,"text":"/所匹配的请求可以是/login或.html或.js或.css方式的请求路径\n        但是/不能匹配.jsp请求路径的请求"}],"type":5},{"content":"以／开头的是绝对路径，绝对路径分为\n浏览器解析：超链接中的就是浏览器解析的，回从端口中访问，少一个上下文路径\n服务器解析：","date":"2021-12-26 15:15:54","docid":0,"fillcolor":"ffffed99","id":12,"originaltext":"<a th:href=\"@{/hello}\">HelloWorld</a><br/>","page":7,"textblocks":[{"first":[107.92729949951172,145.88037109375,5.293785095214844,8.779083251953125],"last":[324.7567138671875,145.88037109375,5.293792724609375,8.779083251953125],"length":42,"rects":[[107.92729949951172,145.88037109375,222.12320709228516,8.779083251953125]],"start":699,"text":"<a th:href=\"@{/hello}\">HelloWorld</a><br/>"}],"type":5},{"content":"请求　－＞　DispatcherServlet　－＞　加载ＳｐｒｉｎｇＭＶＣ配置文件　－＞　扫描组件为Ｍｏｄｅ也就是带＠Ｃｏｎｔｒｏｌｌｅｒ的ｂｅａｎ　－＞　找到相应的方法进行处理　－＞　使用相应视图解析器解析视图　－＞　转发到对应页面","date":"2021-12-26 15:14:31","docid":0,"fillcolor":"ffffed99","id":10,"originaltext":"7、总结","page":7,"textblocks":[{"first":[77.02230834960938,305.33526611328125,8.354759216308594,18.5],"last":[114.63774871826172,305.33526611328125,14.631797790527344,18.5],"length":4,"rects":[[77.02230834960938,305.33526611328125,52.24723815917969,18.5]],"start":17,"text":"7、总结"}],"type":5}],"originaltext":"二、HelloWorld","page":2,"textblocks":[{"first":[77.02230834960938,673.5083618164062,21.94769287109375,23.5],"last":[229.119873046875,673.5083618164062,13.892898559570312,23.5],"length":12,"rects":[[77.02230834960938,673.5083618164062,165.99046325683594,23.5]],"start":931,"text":"二、HelloWorld"}],"type":5},{"date":"2021-12-26 15:15:00","docid":0,"fillcolor":"ffffed99","folded":false,"id":11,"markups":[{"date":"2021-12-26 15:47:31","docid":0,"fillcolor":"ffffed99","id":13,"originaltext":"1、@RequestMapping注解的功能","page":7,"textblocks":[{"first":[77.02230834960938,477.8658142089844,8.354759216308594,19.5],"last":[294.60601806640625,477.8658142089844,14.631805419921875,19.5],"length":22,"rects":[[77.02230834960938,477.8658142089844,232.21551513671875,19.5]],"start":305,"text":"1、@RequestMapping注解的功能"}],"type":5},{"date":"2021-12-26 15:47:35","docid":0,"fillcolor":"ffffed99","id":14,"originaltext":"2、@RequestMapping注解的位置","page":7,"textblocks":[{"first":[77.02230834960938,570.1588134765625,8.354759216308594,19.5],"last":[294.60601806640625,570.1588134765625,14.631805419921875,19.5],"length":22,"rects":[[77.02230834960938,570.1588134765625,232.21551513671875,19.5]],"start":439,"text":"2、@RequestMapping注解的位置"}],"type":5},{"date":"2021-12-26 15:47:40","docid":0,"fillcolor":"ffffed99","id":15,"originaltext":"3、@RequestMapping注解的value属性","page":8,"textblocks":[{"first":[77.02230834960938,29.157812118530273,8.354759216308594,19.500001907348633],"last":[334.4933776855469,29.157812118530273,14.631805419921875,19.500001907348633],"length":27,"rects":[[77.02230834960938,29.157812118530273,272.1028747558594,19.500001907348633]],"start":0,"text":"3、@RequestMapping注解的value属性"}],"type":5},{"date":"2021-12-26 15:47:44","docid":0,"fillcolor":"ffffed99","id":16,"originaltext":"4、@RequestMapping注解的method属性","page":8,"textblocks":[{"first":[77.02230834960938,314.2901306152344,8.354759216308594,19.5],"last":[351.90435791015625,314.2901306152344,14.631805419921875,19.5],"length":28,"rects":[[77.02230834960938,314.2901306152344,289.51385498046875,19.5]],"start":177,"text":"4、@RequestMapping注解的method属性"}],"type":5},{"date":"2021-12-26 15:47:51","docid":0,"fillcolor":"ffffed99","id":17,"originaltext":"5、@RequestMapping注解的params属性（了解）","page":9,"textblocks":[{"first":[77.02230834960938,106.4434585571289,8.354759216308594,19.5],"last":[408.3525390625,106.4434585571289,14.631805419921875,19.5],"length":32,"rects":[[77.02230834960938,106.4434585571289,345.9620361328125,19.5]],"start":153,"text":"5、@RequestMapping注解的params属性（了解）"}],"type":5},{"date":"2021-12-26 15:47:58","docid":0,"fillcolor":"ffffed99","id":18,"originaltext":"6、@RequestMapping注解的headers属性（了解）","page":9,"textblocks":[{"first":[77.02230834960938,551.4000244140625,8.354759216308594,19.5],"last":[412.0533447265625,551.4000244140625,14.631805419921875,19.5],"length":33,"rects":[[77.02230834960938,551.4000244140625,349.662841796875,19.5]],"start":666,"text":"6、@RequestMapping注解的headers属性（了解）"}],"type":5},{"date":"2021-12-26 15:48:09","docid":0,"fillcolor":"ffffed99","id":19,"originaltext":"7、SpringMVC支持ant风格的路径","page":9,"textblocks":[{"first":[77.02230834960938,772.7530517578125,8.354759216308594,19.5],"last":[291.5410461425781,772.7530517578125,14.631805419921875,19.5],"length":21,"rects":[[77.02230834960938,772.7530517578125,229.15054321289062,19.5]],"start":1078,"text":"7、SpringMVC支持ant风格的路径"}],"type":5},{"date":"2021-12-26 15:52:56","docid":0,"fillcolor":"ffffed99","id":21,"originaltext":"8、SpringMVC支持路径中的占位符（重点）","page":10,"textblocks":[{"first":[77.02230834960938,123.30078125,8.354759216308594,17.5],"last":[354.5263671875,123.30078125,14.631805419921875,17.5],"length":24,"rects":[[77.02230834960938,123.30078125,292.1358642578125,17.5]],"start":68,"text":"8、SpringMVC支持路径中的占位符（重点）"}],"type":5}],"originaltext":"三、@RequestMapping注解","page":7,"textblocks":[{"first":[77.02230834960938,433.19775390625,21.94769287109375,27.5],"last":[346.9747009277344,433.19775390625,21.94769287109375,27.5],"length":19,"rects":[[77.02230834960938,433.19775390625,291.90008544921875,27.5]],"start":284,"text":"三、@RequestMapping注解"}],"type":5},{"date":"2021-12-26 15:52:48","docid":0,"fillcolor":"ffffed99","folded":false,"id":20,"markups":[{"date":"2021-12-26 15:56:48","docid":0,"fillcolor":"ffffed99","folded":false,"id":22,"originaltext":"1、通过ServletAPI获取","page":10,"textblocks":[{"first":[77.02230834960938,453.15411376953125,8.354759216308594,18.5],"last":[219.16079711914062,453.15411376953125,14.631805419921875,18.5],"length":16,"rects":[[77.02230834960938,453.15411376953125,156.77029418945312,18.5]],"start":306,"text":"1、通过ServletAPI获取"}],"type":5},{"date":"2021-12-26 15:57:12","docid":0,"fillcolor":"ffffed99","folded":true,"id":25,"markups":[{"date":"2021-12-26 15:56:55","docid":0,"fillcolor":"ffffed99","id":23,"originaltext":"注","page":11,"textblocks":[{"first":[91.2789306640625,122.546875,9.754531860351562,9.5],"last":[91.2789306640625,122.546875,9.754531860351562,9.5],"length":1,"rects":[[91.2789306640625,122.546875,9.754531860351562,9.5]],"start":0,"text":"注"}],"type":5}],"originaltext":"2、通过控制器方法的形参获取请求参数","page":10,"textblocks":[{"first":[77.02230834960938,641.5419921875,8.354759216308594,17.5],"last":[319.4829406738281,641.5419921875,14.631805419921875,17.5],"length":18,"rects":[[77.02230834960938,641.5419921875,257.0924377441406,17.5]],"start":398,"text":"2、通过控制器方法的形参获取请求参数"}],"type":5},{"date":"2021-12-26 15:57:02","docid":0,"fillcolor":"ffffed99","id":24,"originaltext":"3、@RequestParam","page":11,"textblocks":[{"first":[77.02230834960938,233.099609375,8.354759216308594,11.5],"last":[206.0865020751953,233.099609375,14.368423461914062,11.5],"length":15,"rects":[[77.02230834960938,233.099609375,143.4326171875,11.5]],"start":130,"text":"3、@RequestParam"}],"type":5},{"date":"2021-12-26 15:58:48","docid":0,"fillcolor":"ffffed99","id":26,"originaltext":"4、@RequestHeader","page":11,"textblocks":[{"first":[77.02230834960938,461.9560546875,8.354759216308594,11.5],"last":[219.16734313964844,461.9560546875,6.6428375244140625,11.5],"length":16,"rects":[[77.02230834960938,461.9560546875,148.78787231445312,11.5]],"start":521,"text":"4、@RequestHeader"}],"type":5},{"date":"2021-12-26 15:58:55","docid":0,"fillcolor":"ffffed99","id":27,"originaltext":"5、@CookieValue","page":11,"textblocks":[{"first":[77.02230834960938,537.2921752929688,8.354759216308594,16.5],"last":[195.17117309570312,537.2921752929688,8.64739990234375,16.5],"length":14,"rects":[[77.02230834960938,537.2921752929688,126.7962646484375,16.5]],"start":645,"text":"5、@CookieValue"}],"type":5},{"date":"2021-12-26 15:59:02","docid":0,"fillcolor":"ffffed99","id":28,"originaltext":"6、通过POJO获取请求参数","page":11,"textblocks":[{"first":[77.02230834960938,613.27734375,8.354759216308594,17.5],"last":[239.7510528564453,613.27734375,14.631790161132812,17.5],"length":14,"rects":[[77.02230834960938,613.27734375,177.36053466796875,17.5]],"start":766,"text":"6、通过POJO获取请求参数"}],"type":5},{"date":"2021-12-26 15:59:27","docid":0,"fillcolor":"ffffed99","id":29,"originaltext":"7、解决获取请求参数的乱码问题","page":12,"textblocks":[{"first":[77.02230834960938,292.87890625,8.354759216308594,17.5],"last":[275.5875244140625,292.87890625,14.631805419921875,17.5],"length":15,"rects":[[77.02230834960938,292.87890625,213.197021484375,17.5]],"start":0,"text":"7、解决获取请求参数的乱码问题"}],"type":5}],"originaltext":"四、SpringMVC获取请求参数","page":10,"textblocks":[{"first":[77.02230834960938,407.6865234375,21.94769287109375,27.5],"last":[349.064453125,407.6865234375,21.94769287109375,27.5],"length":17,"rects":[[77.02230834960938,407.6865234375,293.9898376464844,27.5]],"start":287,"text":"四、SpringMVC获取请求参数"}],"type":5},{"content":"都会被封装到ＭｏｄｅｌＡｎｄＶｉｅｗ中","date":"2021-12-26 16:00:16","docid":0,"fillcolor":"ffffed99","folded":true,"id":30,"markups":[{"date":"2021-12-26 16:00:28","docid":0,"fillcolor":"ffffed99","id":31,"originaltext":"1、使用ServletAPI向request域对象共享数据","page":12,"textblocks":[{"first":[77.02230834960938,720.2281494140625,8.354759216308594,19.5],"last":[363.3854675292969,720.2281494140625,14.631805419921875,19.5],"length":29,"rects":[[77.02230834960938,720.2281494140625,300.9949645996094,19.5]],"start":146,"text":"1、使用ServletAPI向request域对象共享数据"}],"type":5},{"date":"2021-12-26 16:00:53","docid":0,"fillcolor":"ffffed99","id":32,"originaltext":"2、使用ModelAndView向request域对象共享数据","page":13,"textblocks":[{"first":[77.02230834960938,119.9488296508789,8.354759216308594,19.49999237060547],"last":[397.46441650390625,119.9488296508789,14.631805419921875,19.49999237060547],"length":31,"rects":[[77.02230834960938,119.9488296508789,335.07391357421875,19.49999237060547]],"start":0,"text":"2、使用ModelAndView向request域对象共享数据"}],"type":5},{"date":"2021-12-26 16:00:59","docid":0,"fillcolor":"ffffed99","id":33,"originaltext":"3、使用Model向request域对象共享数据","page":13,"textblocks":[{"first":[77.02230834960938,363.8121032714844,8.354759216308594,19.5],"last":[333.35028076171875,363.8121032714844,14.631805419921875,19.5],"length":24,"rects":[[77.02230834960938,363.8121032714844,270.95977783203125,19.5]],"start":33,"text":"3、使用Model向request域对象共享数据"}],"type":5},{"date":"2021-12-26 16:01:17","docid":0,"fillcolor":"ffffed99","id":34,"originaltext":"4、使用map向request域对象共享数据","page":13,"textblocks":[{"first":[77.02230834960938,486.1187438964844,8.354759216308594,19.5],"last":[320.5903015136719,486.1187438964844,14.631805419921875,19.5],"length":22,"rects":[[77.02230834960938,486.1187438964844,258.1997985839844,19.5]],"start":59,"text":"4、使用map向request域对象共享数据"}],"type":5},{"date":"2021-12-26 16:01:54","docid":0,"fillcolor":"ffffed99","id":35,"originaltext":"5、使用ModelMap向request域对象共享数据","page":13,"textblocks":[{"first":[77.02230834960938,608.4263916015625,8.354759216308594,19.5],"last":[365.2430114746094,608.4263916015625,14.631805419921875,19.5],"length":27,"rects":[[77.02230834960938,608.4263916015625,302.8525085449219,19.5]],"start":83,"text":"5、使用ModelMap向request域对象共享数据"}],"type":5},{"date":"2021-12-26 16:02:11","docid":0,"fillcolor":"ffffed99","id":36,"originaltext":"6、Model、ModelMap、Map的关系","page":13,"textblocks":[{"first":[77.02230834960938,731.5330200195312,8.354759216308594,18.5],"last":[312.76715087890625,731.5330200195312,14.631805419921875,18.5],"length":23,"rects":[[77.02230834960938,731.5330200195312,250.37664794921875,18.5]],"start":112,"text":"6、Model、ModelMap、Map的关系"}],"type":5},{"date":"2021-12-26 16:09:00","docid":0,"fillcolor":"ffffed99","id":37,"originaltext":"7、向session域共享数据","page":14,"textblocks":[{"first":[77.02230834960938,108.04296875,8.354759216308594,17.5],"last":[226.76962280273438,108.04296875,14.631805419921875,17.5],"length":15,"rects":[[77.02230834960938,108.04296875,164.37911987304688,17.5]],"start":0,"text":"7、向session域共享数据"}],"type":5},{"date":"2021-12-26 16:09:04","docid":0,"fillcolor":"ffffed99","id":38,"originaltext":"8、向application域共享数据","page":14,"textblocks":[{"first":[77.02230834960938,228.74960327148438,8.354759216308594,19.5],"last":[255.3044891357422,228.74960327148438,14.631790161132812,19.5],"length":19,"rects":[[77.02230834960938,228.74960327148438,192.91397094726562,19.5]],"start":17,"text":"8、向application域共享数据"}],"type":5}],"originaltext":"五、域对象共享数据","page":12,"textblocks":[{"first":[77.02230834960938,677.060546875,21.94769287109375,24.5],"last":[252.60389709472656,677.060546875,21.947708129882812,24.5],"length":9,"rects":[[77.02230834960938,677.060546875,197.529296875,24.5]],"start":135,"text":"五、域对象共享数据"}],"type":5},{"date":"2021-12-26 16:09:18","docid":0,"fillcolor":"ffffed99","folded":true,"id":39,"markups":[{"date":"2021-12-26 16:24:14","docid":0,"fillcolor":"ffffed99","folded":true,"id":45,"markups":[{"date":"2021-12-26 17:04:13","docid":0,"fillcolor":"ffffed99","id":66,"originaltext":"会通过转发的方式实现跳转","page":14,"textblocks":[{"first":[398.921875,561.751953125,9.7545166015625,12.5],"last":[506.22174072265625,561.751953125,9.7545166015625,12.5],"length":12,"rects":[[398.921875,561.751953125,117.05438232421875,12.5]],"start":351,"text":"会通过转发的方式实现跳转"}],"type":5}],"originaltext":"1、ThymeleafView","page":14,"textblocks":[{"first":[77.02230834960938,516.9334106445312,8.354759216308594,18.5],"last":[199.6631317138672,516.9334106445312,12.524826049804688,18.5],"length":15,"rects":[[77.02230834960938,516.9334106445312,135.1656494140625,18.5]],"start":251,"text":"1、ThymeleafView"}],"type":5},{"date":"2021-12-26 16:24:08","docid":0,"fillcolor":"ffffed99","id":44,"originaltext":"2、转发视图","page":14,"textblocks":[{"first":[77.02230834960938,791.861328125,8.354759216308594,17.5],"last":[143.90133666992188,791.861328125,14.631805419921875,17.5],"length":6,"rects":[[77.02230834960938,791.861328125,81.51083374023438,17.5]],"start":364,"text":"2、转发视图"}],"type":5},{"date":"2021-12-26 16:24:22","docid":0,"fillcolor":"ffffed99","folded":true,"id":46,"markups":[{"date":"2021-12-26 16:24:42","docid":0,"fillcolor":"ffffed99","id":47,"originaltext":"注","page":15,"textblocks":[{"first":[91.2789306640625,651.7939453125,9.754531860351562,12.5],"last":[91.2789306640625,651.7939453125,9.754531860351562,12.5],"length":1,"rects":[[91.2789306640625,651.7939453125,9.754531860351562,12.5]],"start":436,"text":"注"}],"type":5}],"originaltext":"3、重定向视图","page":15,"textblocks":[{"first":[77.02230834960938,342.9013671875,8.354759216308594,17.5],"last":[158.53314208984375,342.9013671875,14.631805419921875,17.5],"length":7,"rects":[[77.02230834960938,342.9013671875,96.14263916015625,17.5]],"start":229,"text":"3、重定向视图"}],"type":5},{"date":"2021-12-26 16:24:46","docid":0,"fillcolor":"ffffed99","id":48,"originaltext":"4、视图控制器view-controller","page":15,"textblocks":[{"first":[77.02230834960938,715.07421875,8.354759216308594,17.5],"last":[277.650634765625,715.07421875,6.642822265625,17.5],"length":22,"rects":[[77.02230834960938,715.07421875,207.27114868164062,17.5]],"start":497,"text":"4、视图控制器view-controller"}],"type":5}],"originaltext":"六、SpringMVC的视图","page":14,"textblocks":[{"first":[77.02230834960938,364.21502685546875,21.94769287109375,26.5],"last":[283.2213439941406,364.21502685546875,21.94769287109375,26.5],"length":14,"rects":[[77.02230834960938,364.21502685546875,228.146728515625,26.5]],"start":38,"text":"六、SpringMVC的视图"}],"type":5},{"date":"2021-12-26 16:10:08","docid":0,"fillcolor":"ffffed99","folded":true,"id":41,"markups":[{"date":"2021-12-26 16:25:48","docid":0,"fillcolor":"ffffed99","folded":false,"id":49,"markups":[{"date":"2021-12-26 16:25:57","docid":0,"fillcolor":"ffffed99","id":50,"originaltext":"HiddenHttpMethodFilter","page":17,"textblocks":[{"first":[100.00595092773438,167.8212890625,11.193328857421875,14.5],"last":[274.28533935546875,167.8212890625,6.642822265625,14.5],"length":22,"rects":[[100.00595092773438,167.8212890625,180.92221069335938,14.5]],"start":148,"text":"HiddenHttpMethodFilter"}],"type":5}],"originaltext":"RESTful的实现","page":16,"textblocks":[{"first":[100.00595092773438,569.5068359375,9.656990051269531,17.5],"last":[183.4029083251953,569.5068359375,14.631790161132812,17.5],"length":10,"rects":[[100.00595092773438,569.5068359375,98.02874755859375,17.5]],"start":676,"text":"RESTful的实现"}],"type":5}],"originaltext":"七、RESTful","page":16,"textblocks":[{"first":[77.02230834960938,207.841796875,21.94769287109375,19.5],"last":[195.40818786621094,207.841796875,6.6940460205078125,19.5],"length":9,"rects":[[77.02230834960938,207.841796875,125.07992553710938,19.5]],"start":119,"text":"七、RESTful"}],"type":5},{"content":"请求报文中信数据 和 Java对象 之间的转换需要这个","date":"2021-12-26 16:10:01","docid":0,"fillcolor":"ffffed99","folded":true,"id":40,"markups":[{"date":"2021-12-26 16:27:42","docid":0,"fillcolor":"ffffed99","id":51,"originaltext":"1、@RequestBody","page":24,"textblocks":[{"first":[77.02230834960938,264.81719970703125,8.354759216308594,18.5],"last":[200.73126220703125,264.81719970703125,8.32550048828125,18.5],"length":14,"rects":[[77.02230834960938,264.81719970703125,132.03445434570312,18.5]],"start":176,"text":"1、@RequestBody"}],"type":5},{"date":"2021-12-26 16:27:49","docid":0,"fillcolor":"ffffed99","id":52,"originaltext":"2、RequestEntity","page":24,"textblocks":[{"first":[77.02230834960938,564.9558715820312,8.354759216308594,18.5],"last":[194.4249267578125,564.9558715820312,8.32550048828125,18.5],"length":15,"rects":[[77.02230834960938,564.9558715820312,125.72811889648438,18.5]],"start":320,"text":"2、RequestEntity"}],"type":5},{"date":"2021-12-26 16:28:23","docid":0,"fillcolor":"ffffed99","folded":true,"id":53,"markups":[{"date":"2021-12-26 16:39:34","docid":0,"fillcolor":"ffffed99","id":59,"linecolor":"ffff0000","originaltext":"将该方法的返回值直接作为响应报文的响应体","page":25,"textblocks":[{"first":[289.5977783203125,83.53125,9.7545166015625,13.5],"last":[474.9338684082031,83.53125,9.754547119140625,13.5],"length":20,"rects":[[289.5977783203125,83.53125,195.09063720703125,13.5]],"start":127,"text":"将该方法的返回值直接作为响应报文的响应体"}],"type":5,"underline":true}],"originaltext":"3、@ResponseBody","page":25,"textblocks":[{"first":[77.02230834960938,54.71953201293945,8.354759216308594,18.499996185302734],"last":[210.71014404296875,54.71953201293945,8.32550048828125,18.499996185302734],"length":15,"rects":[[77.02230834960938,54.71953201293945,142.01333618164062,18.499996185302734]],"start":83,"text":"3、@ResponseBody"}],"type":5},{"date":"2021-12-26 16:29:06","docid":0,"fillcolor":"ffffed99","id":54,"originaltext":"6、@RestController注解","page":26,"textblocks":[{"first":[77.02230834960938,507.18048095703125,8.354759216308594,18.5],"last":[233.9640655517578,507.18048095703125,14.631790161132812,18.5],"length":19,"rects":[[77.02230834960938,507.18048095703125,171.57354736328125,18.5]],"start":30,"text":"6、@RestController注解"}],"type":5},{"content":"自制的响应报文","date":"2021-12-26 16:29:15","docid":0,"fillcolor":"ffffed99","id":55,"originaltext":"7、ResponseEntity","page":26,"textblocks":[{"first":[77.02230834960938,576.9617309570312,8.354759216308594,18.5],"last":[204.40382385253906,576.9617309570312,8.325485229492188,18.5],"length":16,"rects":[[77.02230834960938,576.9617309570312,135.70700073242188,18.5]],"start":151,"text":"7、ResponseEntity"}],"type":5}],"originaltext":"八、HttpMessageConverter","page":24,"textblocks":[{"first":[77.02230834960938,126.302734375,21.94769287109375,15.5],"last":[364.6688232421875,126.302734375,9.964263916015625,15.5],"length":22,"rects":[[77.02230834960938,126.302734375,297.61077880859375,15.5]],"start":0,"text":"八、HttpMessageConverter"}],"type":5},{"date":"2021-12-26 16:10:17","docid":0,"fillcolor":"ffffed99","folded":true,"id":42,"markups":[{"content":"自制的响应报文，来设置下载","date":"2021-12-26 16:42:52","docid":0,"fillcolor":"ffffed99","id":60,"originaltext":"1、文件下载","page":26,"textblocks":[{"first":[77.02230834960938,674.55859375,8.354759216308594,17.5],"last":[143.90133666992188,674.55859375,14.631805419921875,17.5],"length":6,"rects":[[77.02230834960938,674.55859375,81.51083374023438,17.5]],"start":232,"text":"1、文件下载"}],"type":5},{"content":"获取响应头，对响应头获取文件名已经存储位置","date":"2021-12-26 16:44:00","docid":0,"fillcolor":"ffffed99","id":61,"markups":[{"date":"2021-12-26 16:44:39","docid":0,"fillcolor":"ffffed99","id":62,"originaltext":"文件上传要求form表单的请求方式必须为post，并且添加属性enctype=\"multipart/form-data\"","page":27,"textblocks":[{"first":[77.02230834960938,359.61016845703125,9.754531860351562,13.5],"last":[480.510009765625,359.61016845703125,3.91156005859375,13.5],"length":60,"rects":[[77.02230834960938,359.61016845703125,407.3992614746094,13.5]],"start":8,"text":"文件上传要求form表单的请求方式必须为post，并且添加属性enctype=\"multipart/form-data\""}],"type":5}],"originaltext":"2、文件上传","page":27,"textblocks":[{"first":[77.02230834960938,329.3984375,8.354759216308594,17.5],"last":[143.90133666992188,329.3984375,14.631805419921875,17.5],"length":6,"rects":[[77.02230834960938,329.3984375,81.51083374023438,17.5]],"start":0,"text":"2、文件上传"}],"type":5}],"originaltext":"九、文件上传和下载","page":26,"textblocks":[{"first":[77.02230834960938,631.291015625,21.94769287109375,24.5],"last":[252.60389709472656,631.291015625,21.947708129882812,24.5],"length":9,"rects":[[77.02230834960938,631.291015625,197.529296875,24.5]],"start":221,"text":"九、文件上传和下载"}],"type":5},{"date":"2021-12-26 16:10:23","docid":0,"fillcolor":"ffffed99","folded":true,"id":43,"markups":[{"date":"2021-12-26 16:47:49","docid":0,"fillcolor":"ffffed99","id":63,"originaltext":"1、拦截器的配置","page":28,"textblocks":[{"first":[77.02230834960938,265.8671875,8.354759216308594,17.5],"last":[173.16494750976562,265.8671875,14.631805419921875,17.5],"length":8,"rects":[[77.02230834960938,265.8671875,110.77444458007812,17.5]],"start":7,"text":"1、拦截器的配置"}],"type":5},{"date":"2021-12-26 16:47:55","docid":0,"fillcolor":"ffffed99","id":64,"originaltext":"2、拦截器的三个抽象方法","page":28,"textblocks":[{"first":[77.02230834960938,553.25,8.354759216308594,17.5],"last":[231.692138671875,553.25,14.631805419921875,17.5],"length":12,"rects":[[77.02230834960938,553.25,169.3016357421875,17.5]],"start":118,"text":"2、拦截器的三个抽象方法"}],"type":5},{"content":"mappedHandler.applyPreHandle(processedRequest, response)\n\n实际使用控制器方法\nmv = ha.handle(processedRequest, response, mappedHandler.getHandler());\n\nmappedHandler.applyPostHandle(processedRequest, response, mv);\n\nprocessDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);\n\n\n\n因为在PreHandle遍历执行期间定义了一个变量执行一个拦截器＋１，然后在PostHandle中又用这个变量进行了－－操作来遍历，而AfterCompletion也是进行了－－操作来遍历拦截器的\n\n如果在PreHandle遍历执行期间有一个拦住了，那么会根据执行期间设置的值进行－－操作来遍历执行AfterCompletion方法","date":"2021-12-26 16:49:40","docid":0,"fillcolor":"ffffed99","id":65,"originaltext":"3、多个拦截器的执行顺序","page":28,"textblocks":[{"first":[77.02230834960938,691.314453125,8.354759216308594,17.5],"last":[231.692138671875,691.314453125,14.631805419921875,17.5],"length":12,"rects":[[77.02230834960938,691.314453125,169.3016357421875,17.5]],"start":344,"text":"3、多个拦截器的执行顺序"}],"type":5}],"originaltext":"十、拦截器","page":28,"textblocks":[{"first":[77.02230834960938,220.599609375,21.94769287109375,24.5],"last":[164.81309509277344,220.599609375,21.94769287109375,24.5],"length":5,"rects":[[77.02230834960938,220.599609375,109.73847961425781,24.5]],"start":0,"text":"十、拦截器"}],"type":5},{"date":"2021-12-26 16:30:50","docid":0,"fillcolor":"ffffed99","folded":true,"id":56,"markups":[{"date":"2021-12-26 17:44:37","docid":0,"fillcolor":"ffffed99","folded":true,"id":69,"markups":[{"content":"spring自己的异常处理器","date":"2021-12-26 17:44:46","docid":0,"fillcolor":"ffffed99","id":70,"originaltext":"DefaultHandlerExceptionResolver","page":29,"textblocks":[{"first":[274.8421325683594,164.47030639648438,7.111053466796875,14.5],"last":[423.8620300292969,164.47030639648438,3.9798583984375,14.5],"length":31,"rects":[[274.8421325683594,164.47030639648438,152.999755859375,14.5]],"start":216,"text":"DefaultHandlerExceptionResolver"}],"type":5},{"content":"我们要自定义的异常处理器","date":"2021-12-26 17:44:49","docid":0,"fillcolor":"ffffed99","id":71,"originaltext":"SimpleMappingExceptionResolver","page":29,"textblocks":[{"first":[77.02230834960938,180.2761688232422,5.3552398681640625,13.5],"last":[227.12506103515625,180.2761688232422,3.9798431396484375,13.5],"length":30,"rects":[[77.02230834960938,180.2761688232422,154.0825958251953,13.5]],"start":249,"text":"SimpleMappingExceptionResolver"}],"type":5}],"originaltext":"HandlerExceptionResolver接口的实现类","page":29,"textblocks":[{"first":[77.02230834960938,164.47030639648438,7.198844909667969,14.5],"last":[245.5785369873047,164.47030639648438,9.754531860351562,14.5],"length":30,"rects":[[77.02230834960938,164.47030639648438,178.31076049804688,14.5]],"start":184,"text":"HandlerExceptionResolver接口的实现类"}],"type":5}],"originaltext":"十一、异常处理器","page":29,"textblocks":[{"first":[77.02230834960938,69.279296875,21.94769287109375,24.5],"last":[230.65618896484375,69.279296875,21.94769287109375,24.5],"length":8,"rects":[[77.02230834960938,69.279296875,175.58157348632812,24.5]],"start":100,"text":"十一、异常处理器"}],"type":5},{"date":"2021-12-26 16:30:56","docid":0,"fillcolor":"ffffed99","folded":false,"id":57,"markups":[{"date":"2021-12-26 17:51:18","docid":0,"fillcolor":"ffffed99","folded":false,"id":73,"markups":[{"date":"2021-12-26 17:51:13","docid":0,"fillcolor":"ffffed99","id":72,"originaltext":"当我们的类扩展了AbstractAnnotationConfigDispatcherServletInitializer并将其部署到Servlet3.0容器的时候，容器会自动发现它，并用它来配置Servlet上下文","page":30,"textblocks":[{"first":[326.0677185058594,89.48320007324219,9.754547119140625,13.5],"last":[234.90951538085938,119.796875,9.754531860351562,12.5],"length":109,"rects":[[326.0677185058594,89.48320007324219,78.03622436523438,13.5],[77.02230834960938,104.49101257324219,440.1922912597656,13.5],[77.02230834960938,119.796875,167.64173889160156,12.5]],"start":309,"text":"当我们的类扩展了\nAbstractAnnotationConfigDispatcherServletInitializer并将其部署到Servlet3.0容器的时候，容器会自\n动发现它，并用它来配置Servlet上下文"}],"type":5}],"originaltext":"1、创建初始化类，代替web.xml","page":29,"textblocks":[{"first":[77.02230834960938,767.8515625,8.354759216308594,17.5],"last":[289.1219482421875,767.8515625,4.46270751953125,17.5],"length":18,"rects":[[77.02230834960938,767.8515625,216.56234741210938,17.5]],"start":404,"text":"1、创建初始化类，代替web.xml"}],"type":5},{"date":"2021-12-26 17:51:24","docid":0,"fillcolor":"ffffed99","id":74,"originaltext":"2、创建SpringConfig配置类，代替spring的配置文件","page":30,"textblocks":[{"first":[77.02230834960938,762.9996337890625,8.354759216308594,19.5],"last":[413.8180236816406,762.9996337890625,14.631805419921875,19.5],"length":33,"rects":[[77.02230834960938,762.9996337890625,351.4275207519531,19.5]],"start":420,"text":"2、创建SpringConfig配置类，代替spring的配置文件"}],"type":5},{"date":"2021-12-26 17:51:32","docid":0,"fillcolor":"ffffed99","id":75,"originaltext":"3、创建WebConfig配置类，代替SpringMVC的配置文件","page":31,"textblocks":[{"first":[77.02230834960938,106.4449234008789,8.354759216308594,19.5],"last":[432.97222900390625,106.4449234008789,14.631805419921875,19.5],"length":33,"rects":[[77.02230834960938,106.4449234008789,370.58172607421875,19.5]],"start":0,"text":"3、创建WebConfig配置类，代替SpringMVC的配置文件"}],"type":5}],"originaltext":"十二、注解配置SpringMVC","page":29,"textblocks":[{"first":[77.02230834960938,698.072265625,21.94769287109375,27.5],"last":[335.0834045410156,698.072265625,13.980682373046875,27.5],"length":16,"rects":[[77.02230834960938,698.072265625,272.0417785644531,27.5]],"start":351,"text":"十二、注解配置SpringMVC"}],"type":5},{"date":"2021-12-26 16:31:03","docid":0,"fillcolor":"ffffed99","folded":false,"id":58,"markups":[{"date":"2021-12-26 23:33:21","docid":0,"fillcolor":"ffffed99","folded":true,"id":76,"markups":[{"content":"整个流程的控制中心","date":"2021-12-26 23:33:47","docid":0,"fillcolor":"ffffed99","id":77,"originaltext":"DispatcherServlet：前端控制器","page":32,"textblocks":[{"first":[99.53276824951172,727.2320556640625,7.111053466796875,14.5],"last":[228.54583740234375,727.2320556640625,9.754531860351562,14.5],"length":23,"rects":[[99.53276824951172,727.2320556640625,138.7676010131836,14.5]],"start":43,"text":"DispatcherServlet：前端控制器"}],"type":5},{"content":"其中的Handler也可以认为是控制器\n匹配requestMapping和Handler","date":"2021-12-26 23:33:51","docid":0,"fillcolor":"ffffed99","id":78,"originaltext":"HandlerMapping：处理器映射器","page":32,"textblocks":[{"first":[99.53276824951172,773.8015747070312,7.198844909667969,13.5],"last":[234.5486297607422,773.8015747070312,9.754531860351562,13.5],"length":21,"rects":[[99.53276824951172,773.8015747070312,144.77039337158203,13.5]],"start":121,"text":"HandlerMapping：处理器映射器"}],"type":5},{"content":"DispatcherServlet中被调用来处理请求","date":"2021-12-26 23:37:04","docid":0,"fillcolor":"ffffed99","id":79,"originaltext":"Handler：处理器","page":33,"textblocks":[{"first":[99.53276824951172,29.755859375,7.198844909667969,12.5],"last":[165.29379272460938,29.755859375,9.754531860351562,12.5],"length":11,"rects":[[99.53276824951172,29.755859375,75.51555633544922,12.5]],"start":0,"text":"Handler：处理器"}],"type":5},{"content":"调用Handler处理请求","date":"2021-12-26 23:38:03","docid":0,"fillcolor":"ffffed99","id":80,"originaltext":"HandlerAdapter：处理器适配器","page":33,"textblocks":[{"first":[99.53276824951172,74.4273452758789,7.198844909667969,14.5],"last":[231.00791931152344,74.4273452758789,9.754531860351562,14.5],"length":21,"rects":[[99.53276824951172,74.4273452758789,141.22968292236328,14.5]],"start":65,"text":"HandlerAdapter：处理器适配器"}],"type":5},{"content":"用来创建视图","date":"2021-12-26 23:40:09","docid":0,"fillcolor":"ffffed99","id":81,"originaltext":"ViewResolver：视图解析器","page":33,"textblocks":[{"first":[99.53276824951172,120.99882507324219,5.803947448730469,13.5],"last":[208.48573303222656,120.99882507324219,9.754531860351562,13.5],"length":18,"rects":[[99.53276824951172,120.99882507324219,118.7074966430664,13.5]],"start":137,"text":"ViewResolver：视图解析器"}],"type":5},{"content":"被ViewResolve创建，返回给用户","date":"2021-12-26 23:40:24","docid":0,"fillcolor":"ffffed99","id":82,"originaltext":"View：视图","page":33,"textblocks":[{"first":[99.53276824951172,181.0261688232422,5.803947448730469,13.5],"last":[140.36814880371094,181.0261688232422,9.754531860351562,13.5],"length":7,"rects":[[99.53276824951172,181.0261688232422,50.58991241455078,13.5]],"start":241,"text":"View：视图"}],"type":5}],"originaltext":"1、SpringMVC常用组件","page":32,"textblocks":[{"first":[77.02230834960938,699.818359375,8.354759216308594,14.5],"last":[222.84017944335938,699.818359375,14.631805419921875,14.5],"length":15,"rects":[[77.02230834960938,699.818359375,160.44967651367188,14.5]],"start":26,"text":"1、SpringMVC常用组件"}],"type":5},{"content":"继承Servlet，其中我们知道Servlet的初始化会调用init方法\n查看DispatcherServlet继承体系可以知道\n实际的初始化真正的开始从HttpServletBean开始\nHttpServletBean会调用initServletBean，但是在HttpServletBean这是个空的方法，查看下面的继承体系是否有实现， FrameworkServlet中存在对初始化方法的实际操作\n\n所以对于DispatcherServlet的初始化，最终会追到父类FrameworkServlet的initServletBean()方法\ninitServletBean()方法：\nthis.webApplicationContext = initWebApplicationContext();\ninitFrameworkServlet();\n\n做了两件事：\n1、初始化webApplicationContext（子容器）\n2、初始化initFrameworkServlet()第二个方法也就是这个方法是个空方法\n\n1、\n获取了容器：webApplicationContext\n注意：\n在spring中容器就是applicationContext（父容器）\n而在Web环境下就是webApplicationContext（子容器）\n初始化操作createWebApplicationContext(rootContext);\n通过反射创建容器，然后设置父容器\n\nonRefresh(wac);\n对各种组件的初始化比如HandlerMapping、HandlerAdapter等\n\nString attrName = getServletContextAttributeName();\ngetServletContext().setAttribute(attrName, wac);\n其中的key为：\nFrameworkServlet.class.getName() + \".CONTEXT.\"+\ngetServletName()\n对于第一件事总结：创建容器 -> 刷新 -> 放到Servlet域中传递\n\n总结：\nDispatcherServlet的初始化，最终会追到父类FrameworkServlet的initServletBean()方法\n会进行WebIOC容器的的初始化、刷新，并放到Servlet域中传递\n\n\n","date":"2021-12-26 23:40:59","docid":0,"fillcolor":"ffffed99","id":83,"originaltext":"2、DispatcherServlet初始化过程","page":33,"textblocks":[{"first":[77.02230834960938,229.5515594482422,8.354759216308594,18.5],"last":[289.1119384765625,229.5515594482422,14.631805419921875,18.5],"length":24,"rects":[[77.02230834960938,229.5515594482422,226.721435546875,18.5]],"start":267,"text":"2、DispatcherServlet初始化过程"}],"type":5},{"content":"HttpServlet中重写的service处理方法\n注意点：在HttpServlet中重写了service处理方法，它会将请求变成全部HTTP样式的，然后调用HTTP样式的service处理方法\n会查看这个请求是方法是怎样的比如get、post等，不同的方法调用不同给的do方法\n\n\n因为是处理请求，Servlet中处理请求的方法是service(ServletRequest req, ServletResponse res)，所以查看这个方法的重写即可，其中重写的方法是\nFrameworkServlet的service(HttpServletRequest request, HttpServletResponse response)\n\n其中service方法会判断这个请求是否为 null 或者 PATCH\n是：调用processRequest(request, response);\n\n否：调用HttpServlet中重写了service处理方法，但是doGet、doPost等方法在FrameworkServlet中全部重写了，查看其中方法可知都会调用到processRequest(request, response);方法\n\n由上可知最后都是调用：processRequest(request, response);\n 实际操作：\n调用doService(request, response);方法，发现这个方法是空的，只在DispatcherServlet中实现，\n其中实际操作调用doDispatch(request, response);方法\n\n总结：serive方法的实际操作在DispatcherServlet中的doDispatch(request, response);方法\n\n","date":"2021-12-27 15:57:04","docid":0,"fillcolor":"ffffed99","folded":false,"id":84,"markups":[{"date":"2021-12-27 16:22:53","docid":0,"fillcolor":"ffffed99","folded":true,"id":85,"markups":[{"content":"是一个执行链\n1、匹配到的控制器方法（Controller里面的一个方法）\n2、拦截器集合\n3、拦截器索引（返回false之前的索引）","date":"2021-12-27 16:26:19","docid":0,"fillcolor":"ffffed99","folded":true,"id":86,"markups":[{"date":"2021-12-27 16:33:54","docid":0,"fillcolor":"ffffed99","id":87,"originaltext":"mappedHandler","page":39,"textblocks":[{"first":[171.402099609375,360.48095703125,5.2937774658203125,8.779083251953125],"last":[234.87887573242188,360.48095703125,5.2937774658203125,8.779083251953125],"length":13,"rects":[[171.402099609375,360.48095703125,68.77055358886719,8.779083251953125]],"start":707,"text":"mappedHandler"}],"type":5}],"originaltext":"HandlerExecutionChain mappedHandler = null;","page":39,"textblocks":[{"first":[107.92729949951172,157.88720703125,5.293785095214844,8.779083251953125],"last":[330.065673828125,157.88720703125,5.293792724609375,8.779083251953125],"length":43,"rects":[[107.92729949951172,157.88720703125,227.43216705322266,8.779083251953125]],"start":231,"text":"HandlerExecutionChain mappedHandler = null;"}],"type":5},{"date":"2021-12-27 16:34:12","docid":0,"fillcolor":"ffffed99","id":88,"originaltext":"通过控制器方法创建相应的处理器适配器，调用所对应的控制器方法","page":39,"textblocks":[{"first":[166.10911560058594,536.06298828125,8.779083251953125,8.779052734375],"last":[420.7026062011719,536.06298828125,8.779083251953125,8.779052734375],"length":30,"rects":[[166.10911560058594,536.06298828125,263.37257385253906,8.779052734375]],"start":1232,"text":"通过控制器方法创建相应的处理器适配器，调用所对应的控制器方法"}],"type":5},{"date":"2021-12-27 16:34:17","docid":0,"fillcolor":"ffffed99","id":89,"originaltext":"调用拦截器的preHandle()","page":39,"textblocks":[{"first":[166.12083435058594,738.65673828125,8.779083251953125,8.779052734375],"last":[271.6925354003906,738.65673828125,5.293792724609375,8.779052734375],"length":17,"rects":[[166.12083435058594,738.65673828125,110.86549377441406,8.779052734375]],"start":1852,"text":"调用拦截器的preHandle()"}],"type":5},{"content":"最底层还是使用了request.getParameter(\"key\") 来获取值","date":"2021-12-27 16:34:23","docid":0,"fillcolor":"ffffed99","id":90,"originaltext":"由处理器适配器调用具体的控制器方法，最终获得ModelAndView对象","page":40,"textblocks":[{"first":[166.12083435058594,44.584476470947266,8.779083251953125,8.77907943725586],"last":[431.5162353515625,44.584476470947266,8.779083251953125,8.77907943725586],"length":36,"rects":[[166.12083435058594,44.584476470947266,274.1744842529297,8.77907943725586]],"start":86,"text":"由处理器适配器调用具体的控制器方法，最终获得ModelAndView对象"}],"type":5},{"date":"2021-12-27 16:34:28","docid":0,"fillcolor":"ffffed99","id":91,"originaltext":"调用拦截器的postHandle()","page":40,"textblocks":[{"first":[166.12083435058594,166.14111328125,8.779083251953125,8.779083251953125],"last":[276.98223876953125,166.14111328125,5.293792724609375,8.779083251953125],"length":18,"rects":[[166.12083435058594,166.14111328125,116.15519714355469,8.779083251953125]],"start":379,"text":"调用拦截器的postHandle()"}],"type":5},{"date":"2021-12-27 16:34:39","docid":0,"fillcolor":"ffffed99","folded":true,"id":92,"markups":[{"content":"把模型放在请求域中","date":"2021-12-27 16:35:21","docid":0,"fillcolor":"ffffed99","id":93,"originaltext":"处理模型数据和渲染视图","page":41,"textblocks":[{"first":[144.9586639404297,341.72119140625,8.779083251953125,8.779083251953125],"last":[232.74942016601562,341.72119140625,8.779083251953125,8.779083251953125],"length":11,"rects":[[144.9586639404297,341.72119140625,96.56983947753906,8.779083251953125]],"start":1048,"text":"处理模型数据和渲染视图"}],"type":5},{"date":"2021-12-27 16:35:26","docid":0,"fillcolor":"ffffed99","id":94,"originaltext":"调用拦截器的afterCompletion()","page":41,"textblocks":[{"first":[144.9586639404297,598.34033203125,8.779083251953125,8.779052734375],"last":[282.2687072753906,598.34033203125,5.293792724609375,8.779052734375],"length":23,"rects":[[144.9586639404297,598.34033203125,142.6038360595703,8.779052734375]],"start":1594,"text":"调用拦截器的afterCompletion()"}],"type":5},{"content":"异常处理","date":"2021-12-27 16:39:35","docid":0,"fillcolor":"ffffed99","id":95,"originaltext":"if (exception != null)","page":41,"textblocks":[{"first":[107.92729949951172,125.62158966064453,5.293785095214844,8.779075622558594],"last":[218.97889709472656,125.62158966064453,5.2937774658203125,8.779075622558594],"length":22,"rects":[[107.92729949951172,125.62158966064453,116.34537506103516,8.779075622558594]],"start":442,"text":"if (exception != null)"}],"type":5}],"originaltext":"后续处理：处理模型数据和渲染视图","page":40,"textblocks":[{"first":[144.9586639404297,355.22900390625,8.779083251953125,8.779083251953125],"last":[276.6448669433594,355.22900390625,8.779083251953125,8.779083251953125],"length":16,"rects":[[144.9586639404297,355.22900390625,140.4652862548828,8.779083251953125]],"start":883,"text":"后续处理：处理模型数据和渲染视图"}],"type":5}],"originaltext":"doDispatch()","page":39,"textblocks":[{"first":[87.60597229003906,59.51953125,6.17462158203125,12.5],"last":[145.88931274414062,59.51953125,3.306793212890625,12.5],"length":12,"rects":[[87.60597229003906,59.51953125,61.59013366699219,12.5]],"start":2,"text":"doDispatch()"}],"type":5}],"originaltext":"3、DispatcherServlet调用组件处理请求","page":36,"textblocks":[{"first":[77.02230834960938,740.4879150390625,8.354759216308594,19.5],"last":[333.00732421875,740.4879150390625,14.631805419921875,19.5],"length":27,"rects":[[77.02230834960938,740.4879150390625,270.6168212890625,19.5]],"start":315,"text":"3、DispatcherServlet调用组件处理请求"}],"type":5},{"date":"2021-12-27 16:43:05","docid":0,"fillcolor":"ffffed99","folded":false,"id":96,"markups":[{"date":"2021-12-27 16:55:23","docid":0,"fillcolor":"ffffed99","id":97,"originaltext":"1) 用户向服务器发送请求，请求被SpringMVC 前端控制器 DispatcherServlet捕获。","page":41,"textblocks":[{"first":[77.02230834960938,696.4644775390625,5.57958984375,14.5],"last":[428.0520935058594,696.4644775390625,9.754547119140625,14.5],"length":53,"rects":[[77.02230834960938,696.4644775390625,360.7843322753906,14.5]],"start":18,"text":"1) 用户向服务器发送请求，请求被SpringMVC 前端控制器 DispatcherServlet捕获。"}],"type":5},{"date":"2021-12-27 16:55:28","docid":0,"fillcolor":"ffffed99","folded":true,"id":98,"markups":[{"date":"2021-12-27 16:55:32","docid":0,"fillcolor":"ffffed99","folded":false,"id":99,"markups":[{"content":"经历过 DispatcherServlet寻找没找到，就回去找默认的Serlvetilai处理请求","date":"2021-12-27 16:55:34","docid":0,"fillcolor":"ffffed99","id":100,"originaltext":"i. 再判断是否配置了mvc:default-servlet-handler","page":41,"textblocks":[{"first":[77.02230834960938,766.345703125,2.4678955078125,12.5],"last":[283.91400146484375,766.345703125,3.9798583984375,12.5],"length":38,"rects":[[77.02230834960938,766.345703125,210.87155151367188,12.5]],"start":139,"text":"i. 再判断是否配置了mvc:default-servlet-handler"}],"type":5},{"date":"2021-12-27 16:55:42","docid":0,"fillcolor":"ffffed99","id":101,"originaltext":"ii. 如果没配置，则控制台报映射查找不到，客户端展示404错误","page":41,"textblocks":[{"first":[77.02230834960938,789.107421875,2.4678955078125,12.5],"last":[337.9274597167969,789.107421875,9.754547119140625,12.5],"length":32,"rects":[[77.02230834960938,789.107421875,270.6596984863281,12.5]],"start":178,"text":"ii. 如果没配置，则控制台报映射查找不到，客户端展示404错误"}],"type":5},{"date":"2021-12-27 16:55:53","docid":0,"fillcolor":"ffffed99","id":102,"originaltext":"iii. 如果有配置，则访问目标资源（一般为静态资源，如：JS,CSS,HTML），找不到客户端也会展示404错误","page":42,"textblocks":[{"first":[77.02230834960938,222.2937469482422,2.4678955078125,13.5],"last":[86.77684020996094,237.6015625,9.754531860351562,12.5],"length":58,"rects":[[77.02230834960938,222.2937469482422,436.4980163574219,13.5],[77.02230834960938,237.6015625,19.509063720703125,12.5]],"start":0,"text":"iii. 如果有配置，则访问目标资源（一般为静态资源，如：JS,CSS,HTML），找不到客户端也会展示404\n错误"}],"type":5}],"originaltext":"a) 不存在","page":41,"textblocks":[{"first":[77.02230834960938,744.337890625,5.42352294921875,12.5],"last":[107.37662506103516,744.337890625,9.754531860351562,12.5],"length":6,"rects":[[77.02230834960938,744.337890625,40.108848571777344,12.5]],"start":132,"text":"a) 不存在"}],"type":5},{"date":"2021-12-27 16:56:43","docid":0,"fillcolor":"ffffed99","id":103,"originaltext":"b) 存在则执行下面的流程","page":42,"textblocks":[{"first":[77.02230834960938,424.88751220703125,5.979530334472656,13.5],"last":[176.21084594726562,424.88751220703125,9.754531860351562,13.5],"length":13,"rects":[[77.02230834960938,424.88751220703125,108.94306945800781,13.5]],"start":59,"text":"b) 存在则执行下面的流程"}],"type":5}],"originaltext":"2) DispatcherServlet对请求URL进行解析，得到请求资源标识符（URI），判断请求URI对应的映射：","page":41,"textblocks":[{"first":[77.02230834960938,721.076171875,5.57958984375,12.5],"last":[501.0396423339844,721.076171875,9.754547119140625,12.5],"length":59,"rects":[[77.02230834960938,721.076171875,433.7718811035156,12.5]],"start":72,"text":"2) DispatcherServlet对请求URL进行解析，得到请求资源标识符（URI），判断请求URI对应的映射："}],"type":5},{"content":"HandlerMapping就是控制器方法，拦截器集合、拦截器索引","date":"2021-12-27 16:57:32","docid":0,"fillcolor":"ffffed99","id":104,"originaltext":"3) 根据该URI，调用HandlerMapping获得该Handler配置的所有相关的对象（包括Handler对象以及Handler对象对应的拦截器），最后以HandlerExecutionChain执行链对象的形式返回。","page":42,"textblocks":[{"first":[77.02230834960938,447.39923095703125,5.57958984375,13.5],"last":[444.8415222167969,463.20703125,9.754547119140625,12.5],"length":113,"rects":[[77.02230834960938,447.39923095703125,429.9757995605469,13.5],[77.02230834960938,463.20703125,377.5737609863281,12.5]],"start":73,"text":"3) 根据该URI，调用HandlerMapping获得该Handler配置的所有相关的对象（包括Handler对象以及\nHandler对象对应的拦截器），最后以HandlerExecutionChain执行链对象的形式返回。"}],"type":5},{"content":" HandlerAdapter使用Handler","date":"2021-12-27 16:58:00","docid":0,"fillcolor":"ffffed99","id":105,"originaltext":"4) DispatcherServlet 根据获得的Handler，选择一个合适的HandlerAdapter。","page":42,"textblocks":[{"first":[77.02230834960938,485.66485595703125,5.57958984375,13.5],"last":[407.0712890625,485.66485595703125,9.7545166015625,13.5],"length":56,"rects":[[77.02230834960938,485.66485595703125,339.8034973144531,13.5]],"start":187,"text":"4) DispatcherServlet 根据获得的Handler，选择一个合适的HandlerAdapter。"}],"type":5},{"date":"2021-12-27 16:58:31","docid":0,"fillcolor":"ffffed99","id":106,"originaltext":"5) 如果成功获得HandlerAdapter，此时将开始执行拦截器的preHandler(…)方法【正向】","page":42,"textblocks":[{"first":[77.02230834960938,507.3765563964844,5.57958984375,14.500030517578125],"last":[450.6951904296875,507.3765563964844,9.7545166015625,14.500030517578125],"length":54,"rects":[[77.02230834960938,507.3765563964844,383.4273986816406,14.500030517578125]],"start":244,"text":"5) 如果成功获得HandlerAdapter，此时将开始执行拦截器的preHandler(…)方法【正向】"}],"type":5},{"date":"2021-12-27 16:58:47","docid":0,"fillcolor":"ffffed99","folded":true,"id":107,"markups":[{"date":"2021-12-27 16:59:15","docid":0,"fillcolor":"ffffed99","id":108,"originaltext":"a) HttpMessageConveter： 将请求消息（如Json、xml等数据）转换成一个对象，将对象转换为指定的响应信息","page":42,"textblocks":[{"first":[77.02230834960938,568.1539306640625,5.42352294921875,14.5],"last":[116.04044342041016,584.26171875,9.754531860351562,13.5],"length":65,"rects":[[77.02230834960938,568.1539306640625,433.2288513183594,14.5],[77.02230834960938,584.26171875,48.772666931152344,13.5]],"start":405,"text":"a) HttpMessageConveter： 将请求消息（如Json、xml等数据）转换成一个对象，将对象转换为指定\n的响应信息"}],"type":5},{"date":"2021-12-27 17:00:05","docid":0,"fillcolor":"ffffed99","id":109,"originaltext":"b) 数据转换：对请求消息进行数据转换。如String转换成Integer、Double等","page":42,"textblocks":[{"first":[77.02230834960938,606.4734497070312,5.979530334472656,13.5],"last":[394.9257507324219,606.4734497070312,9.754547119140625,13.5],"length":45,"rects":[[77.02230834960938,606.4734497070312,327.6579895019531,13.5]],"start":471,"text":"b) 数据转换：对请求消息进行数据转换。如String转换成Integer、Double等"}],"type":5},{"date":"2021-12-27 17:00:12","docid":0,"fillcolor":"ffffed99","id":110,"originaltext":"c) 数据格式化：对请求消息进行数据格式化。 如将字符串转换成格式化数字或格式化日期等","page":42,"textblocks":[{"first":[77.02230834960938,631.03515625,4.643157958984375,12.5],"last":[460.29254150390625,631.03515625,9.7545166015625,12.5],"length":43,"rects":[[77.02230834960938,631.03515625,393.0247497558594,12.5]],"start":517,"text":"c) 数据格式化：对请求消息进行数据格式化。 如将字符串转换成格式化数字或格式化日期等"}],"type":5},{"date":"2021-12-27 17:00:18","docid":0,"fillcolor":"ffffed99","id":111,"originaltext":"d) 数据验证： 验证数据的有效性（长度、格式等），验证结果存储到BindingResult或Error中","page":42,"textblocks":[{"first":[77.02230834960938,651.4429931640625,5.979530334472656,14.5],"last":[469.45648193359375,651.4429931640625,9.7545166015625,14.5],"length":53,"rects":[[77.02230834960938,651.4429931640625,402.1886901855469,14.5]],"start":561,"text":"d) 数据验证： 验证数据的有效性（长度、格式等），验证结果存储到BindingResult或Error中"}],"type":5}],"originaltext":"6) 提取Request中的模型数据，填充Handler入参，开始执行Handler（Controller)方法，处理请求。在填充Handler的入参过程中，根据你的配置，Spring将帮你做一些额外的工作：","page":42,"textblocks":[{"first":[77.02230834960938,531.4382934570312,5.57958984375,13.5],"last":[415.7684326171875,546.74609375,9.7545166015625,12.5],"length":105,"rects":[[77.02230834960938,531.4382934570312,433.0478820800781,13.5],[77.02230834960938,546.74609375,348.5006408691406,12.5]],"start":299,"text":"6) 提取Request中的模型数据，填充Handler入参，开始执行Handler（Controller)方法，处理请求。\n在填充Handler的入参过程中，根据你的配置，Spring将帮你做一些额外的工作："}],"type":5},{"date":"2021-12-27 17:00:24","docid":0,"fillcolor":"ffffed99","id":112,"originaltext":"7) Handler执行完成后，向DispatcherServlet 返回一个ModelAndView对象。","page":42,"textblocks":[{"first":[77.02230834960938,675.5046997070312,5.57958984375,13.5],"last":[402.19879150390625,675.5046997070312,9.7545166015625,13.5],"length":54,"rects":[[77.02230834960938,675.5046997070312,334.9309997558594,13.5]],"start":615,"text":"7) Handler执行完成后，向DispatcherServlet 返回一个ModelAndView对象。"}],"type":5},{"date":"2021-12-27 17:00:37","docid":0,"fillcolor":"ffffed99","id":113,"originaltext":"8) 此时将开始执行拦截器的postHandle(...)方法【逆向】。","page":42,"textblocks":[{"first":[77.02230834960938,697.2164306640625,5.57958984375,14.5],"last":[319.8996887207031,697.2164306640625,9.754547119140625,14.5],"length":36,"rects":[[77.02230834960938,697.2164306640625,252.63192749023438,14.5]],"start":670,"text":"8) 此时将开始执行拦截器的postHandle(...)方法【逆向】。"}],"type":5},{"date":"2021-12-27 17:00:45","docid":0,"fillcolor":"ffffed99","id":114,"originaltext":"9) 根据返回的ModelAndView（此时会判断是否存在异常：如果存在异常，则执行HandlerExceptionResolver进行异常处理）选择一个适合的ViewResolver进行视图解析，根据Model和View，来渲染视图。","page":42,"textblocks":[{"first":[77.02230834960938,720.82421875,5.57958984375,12.5],"last":[166.63731384277344,750.83984375,9.754531860351562,12.5],"length":121,"rects":[[77.02230834960938,720.82421875,352.2110290527344,12.5],[77.02230834960938,735.5320434570312,432.94708251953125,13.5],[77.02230834960938,750.83984375,99.36953735351562,12.5]],"start":707,"text":"9) 根据返回的ModelAndView（此时会判断是否存在异常：如果存在异常，则执行\nHandlerExceptionResolver进行异常处理）选择一个适合的ViewResolver进行视图解析，根据Model\n和View，来渲染视图。"}],"type":5},{"date":"2021-12-27 17:01:08","docid":0,"fillcolor":"ffffed99","id":115,"originaltext":"10) 渲染视图完毕执行拦截器的afterCompletion(…)方法【逆向】。","page":42,"textblocks":[{"first":[77.02230834960938,775.1015625,5.57958984375,12.5],"last":[357.0555114746094,775.1015625,9.754547119140625,12.5],"length":41,"rects":[[77.02230834960938,775.1015625,289.7877502441406,12.5]],"start":829,"text":"10) 渲染视图完毕执行拦截器的afterCompletion(…)方法【逆向】。"}],"type":5},{"date":"2021-12-27 17:01:14","docid":0,"fillcolor":"ffffed99","id":116,"originaltext":"11) 将渲染结果返回给客户端。","page":42,"textblocks":[{"first":[77.02230834960938,795.609375,5.57958984375,13.5],"last":[200.89724731445312,795.609375,9.754531860351562,13.5],"length":16,"rects":[[77.02230834960938,795.609375,133.6294708251953,13.5]],"start":871,"text":"11) 将渲染结果返回给客户端。"}],"type":5}],"originaltext":"4、SpringMVC的执行流程","page":41,"textblocks":[{"first":[77.02230834960938,666.9527587890625,8.354759216308594,19.5],"last":[237.47198486328125,666.9527587890625,14.631805419921875,19.5],"length":16,"rects":[[77.02230834960938,666.9527587890625,175.08148193359375,19.5]],"start":0,"text":"4、SpringMVC的执行流程"}],"type":5}],"originaltext":"十三、SpringMVC执行流程","page":32,"textblocks":[{"first":[77.02230834960938,653.05078125,21.94769287109375,27.5],"last":[327.11676025390625,653.05078125,21.94769287109375,27.5],"length":16,"rects":[[77.02230834960938,653.05078125,272.0421447753906,27.5]],"start":8,"text":"十三、SpringMVC执行流程"}],"type":5}],"maxid":116,"notelinks":[],"title":"SpringMVC笔记","unimportant":[]}
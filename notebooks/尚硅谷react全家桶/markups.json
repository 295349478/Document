{"EpubVersion":2,"filepath":"","floatingtheme":[],"folded":false,"markups":[{"date":"2022-03-21 14:34:29","docid":0,"fillcolor":"ffffed99","folded":true,"id":1,"markups":[{"date":"2022-03-21 14:34:37","docid":0,"fillcolor":"ffffed99","folded":true,"id":2,"markups":[{"content":"1、引入React必须先引入React核心库，由 react-> react-dom-> babel\n2、babel是用来转换es6语法，以及jsx转js的库\n3、jsx对程序员来说更加的人性化，直接写dom即可","date":"2022-03-21 15:12:18","docid":0,"fillcolor":"ffffed99","id":9,"originaltext":"1.2.2. 相关 js 库","page":1,"textblocks":[{"first":[90.02400207519531,328.0099792480469,8.662681579589844,19.5],"last":[177.97999572753906,328.0099792480469,14.039993286132812,19.5],"length":14,"rects":[[90.02400207519531,328.0099792480469,101.99598693847656,19.5]],"start":35,"text":"1.2.2. 相关 js 库"}],"type":5},{"content":"比较React创建的DOM和真实DOM有什么区别：\n1、React创建的DOM其实就是一个普通对象\n2、虚拟DOM携带的属性较少，真实的DOM比较多（达到20多个），因为虚拟DOM无需那么多的属性\n3、虚拟DOM最终都会以真实DOM呈现在页面上","date":"2022-03-22 09:52:25","docid":0,"fillcolor":"ffffed99","id":13,"originaltext":"1.2.4. 虚拟 DOM 与真实 DOM","page":1,"textblocks":[{"first":[90.02400207519531,672.5799560546875,8.662681579589844,16.5],"last":[271.9750061035156,672.5799560546875,14.43310546875,16.5],"length":21,"rects":[[90.02400207519531,672.5799560546875,196.3841094970703,16.5]],"start":208,"text":"1.2.4. 虚拟 DOM 与真实 DOM"}],"type":5}],"originaltext":"1.2. React 的基本使用","page":1,"textblocks":[{"first":[90.02400207519531,79.45999908447266,9.847320556640625,19.5],"last":[235.5634765625,79.45999908447266,15.960006713867188,19.5],"length":16,"rects":[[90.02400207519531,79.45999908447266,161.49948120117188,19.5]],"start":4,"text":"1.2. React 的基本使用"}],"type":5},{"date":"2022-03-22 09:52:44","docid":0,"fillcolor":"ffffed99","folded":false,"id":14,"markups":[{"content":"jsx语法规则：\n1、定义虚拟DOM时，不要使用引号\n2、标签中混入js表达式使用{}\n3、样式指定不要使用class=，要使用className=\n4、内联样式需要用{{}}，第一个{}表示需要使用js，第二个{}表示使用js中的对象，多个单词使用小驼峰\n5、只能存在一个根标签\n6、标签必须闭合\n7、标签首字母\n    （1）若为小写，则会将该标签转化为html同名元素，若没有这个元素报错\n    （2）若为大写，认为这个标签是组件，会去渲染，没有则报错","date":"2022-03-22 09:54:50","docid":0,"fillcolor":"ffffed99","folded":true,"id":15,"markups":[{"content":"早期传输和存储数据的格式","date":"2022-03-22 09:54:58","docid":0,"fillcolor":"ffffed99","id":16,"originaltext":"XML","page":2,"textblocks":[{"first":[218.90481567382812,471.6299743652344,7.1208038330078125,15.5],"last":[236.76754760742188,471.6299743652344,5.66351318359375,15.5],"length":3,"rects":[[218.90481567382812,471.6299743652344,23.5262451171875,15.5]],"start":187,"text":"XML"}],"type":5}],"originaltext":"1.3.2. JSX","page":2,"textblocks":[{"first":[90.02400207519531,443.1399841308594,7.118278503417969,14.040008544921875],"last":[137.5417938232422,443.1399841308594,7.7360382080078125,14.040008544921875],"length":10,"rects":[[90.02400207519531,443.1399841308594,55.25382995605469,14.040008544921875]],"start":156,"text":"1.3.2. JSX"}],"type":5},{"content":"{}可中只能放js表达式（也就是携带返回值的），也可以直接取script中定义的变量，对于[]会遍历数据，对于{}对象会遍历key","date":"2022-03-22 11:12:11","docid":0,"fillcolor":"ffffed99","id":17,"originaltext":"JSX 练习","page":3,"textblocks":[{"first":[126.37999725341797,447.0999755859375,4.647239685058594,14.040008544921875],"last":[162.97999572753906,447.0999755859375,14.039993286132812,14.040008544921875],"length":6,"rects":[[126.37999725341797,447.0999755859375,50.639991760253906,14.040008544921875]],"start":433,"text":"JSX 练习"}],"type":5}],"originaltext":"1.3. React JSX","page":2,"textblocks":[{"first":[90.02400207519531,208.09999084472656,9.847320556640625,16.5],"last":[189.35865783691406,208.09999084472656,11.1719970703125,16.5],"length":14,"rects":[[90.02400207519531,208.09999084472656,110.50665283203125,16.5]],"start":127,"text":"1.3. React JSX"}],"type":5},{"date":"2022-03-22 11:13:21","docid":0,"fillcolor":"ffffed99","folded":true,"id":18,"markups":[{"content":"就是拆js，拆成很多份","date":"2022-03-22 11:13:32","docid":0,"fillcolor":"ffffed99","id":19,"originaltext":"模块","page":3,"textblocks":[{"first":[131.77999877929688,682.5999755859375,14.039993286132812,13.5],"last":[145.8199920654297,682.5999755859375,14.039993286132812,13.5],"length":2,"rects":[[131.77999877929688,682.5999755859375,28.079986572265625,13.5]],"start":487,"text":"模块"}],"type":5},{"content":"将一个部件的代码加资源的集合全部拆出去","date":"2022-03-22 11:13:36","docid":0,"fillcolor":"ffffed99","id":20,"originaltext":" 组件","page":4,"textblocks":[{"first":[127.94000244140625,119.82000732421875,3.9031219482421875,17.5],"last":[145.8199920654297,119.82000732421875,14.039993286132812,17.5],"length":3,"rects":[[127.94000244140625,119.82000732421875,31.91998291015625,17.5]],"start":46,"text":" 组件"}],"type":5},{"content":"形容词","date":"2022-03-22 11:13:41","docid":0,"fillcolor":"ffffed99","id":21,"originaltext":"模块化","page":4,"textblocks":[{"first":[131.77999877929688,255.3499755859375,14.039993286132812,16.5],"last":[159.8599853515625,255.3499755859375,14.039993286132812,16.5],"length":3,"rects":[[131.77999877929688,255.3499755859375,42.11997985839844,16.5]],"start":159,"text":"模块化"}],"type":5},{"content":"形容词","date":"2022-03-22 11:13:45","docid":0,"fillcolor":"ffffed99","id":22,"originaltext":" 组件化","page":4,"textblocks":[{"first":[127.94000244140625,333.7099914550781,3.9031219482421875,14.5],"last":[159.8599853515625,333.7099914550781,14.039993286132812,14.5],"length":4,"rects":[[127.94000244140625,333.7099914550781,45.95997619628906,14.5]],"start":204,"text":" 组件化"}],"type":5}],"originaltext":"1.4. 模块与组件、模块化与组件化的理解","page":3,"textblocks":[{"first":[90.02400207519531,642.6799926757812,9.847320556640625,18.5],"last":[363.26513671875,642.6799926757812,15.959991455078125,18.5],"length":21,"rects":[[90.02400207519531,642.6799926757812,289.2011260986328,18.5]],"start":457,"text":"1.4. 模块与组件、模块化与组件化的理解"}],"type":5}],"originaltext":"第 1 章：React 入门","page":0,"textblocks":[{"first":[90.02400207519531,168.33999633789062,21.959999084472656,24.5],"last":[268.9700012207031,168.33999633789062,21.959991455078125,24.5],"length":14,"rects":[[90.02400207519531,168.33999633789062,200.90599060058594,24.5]],"start":30,"text":"第 1 章：React 入门"}],"type":5},{"date":"2022-03-21 14:38:40","docid":0,"fillcolor":"ffffed99","id":3,"markups":[{"content":"React组件的两种定义方式","date":"2022-03-22 11:27:53","docid":0,"fillcolor":"ffffed99","folded":false,"id":24,"markups":[{"content":"1、定义函数式组件的首字母需要大写\n2、函数必须有返回值\n3、渲染的时候使用自闭合标签\n4、函数名就是组件名\n\n步骤：\n1、根据reder渲染的标签找到对应的函数\n2、React发现是函数，于是调用函数获取返回值\n3、将返回值也就是虚拟DOM渲染成真实DOM\n\n\n函数renturn组件化，外部render渲染化\nstate，refs无关联\n只剩props当参数","date":"2022-03-22 11:28:04","docid":0,"fillcolor":"ffffed99","id":25,"originaltext":"函数式组件","page":5,"textblocks":[{"first":[90.02400207519531,312.90997314453125,11.040000915527344,13.5],"last":[134.06256103515625,312.90997314453125,11.039993286132812,13.5],"length":5,"rects":[[90.02400207519531,312.90997314453125,55.07855224609375,13.5]],"start":56,"text":"函数式组件"}],"type":5},{"content":"1、类名就是组件名\n2、由React创建类的实例对象，来调用render方法\n3、这个类也被称为组件实例对象\n4、组件和组件之间可以直接进行标签调用\n步骤：\n1、根据reder渲染的标签找到对应的函数\n2、React发现是类，于是创建实例对象调用其中的的render方法获取返回值\n3、将返回值也就是虚拟DOM渲染成真实DOM\n\n\n类中render组件化，外部render渲染化\n组件内部写方法，标签操作来关联，\n方法内部拿state，改变标签内容很方便\n四面props接数据，拿到数据随便玩","date":"2022-03-22 11:28:08","docid":0,"fillcolor":"ffffed99","id":26,"originaltext":"类式组件","page":5,"textblocks":[{"first":[90.02400207519531,453.80999755859375,11.040000915527344,13.5],"last":[123.14400482177734,453.80999755859375,11.040000915527344,13.5],"length":4,"rects":[[90.02400207519531,453.80999755859375,44.160003662109375,13.5]],"start":66,"text":"类式组件"}],"type":5},{"content":"函数式组件：\n1、根据标签找到函数\n2、调用函数拿到返回值，进行渲染","date":"2022-03-22 11:50:05","docid":0,"fillcolor":"ffffed99","id":27,"originaltext":"渲染类组件标签的基本流程","page":5,"textblocks":[{"first":[132.02000427246094,725.760009765625,14.039993286132812,17.5],"last":[286.2072448730469,725.760009765625,14.040008544921875,17.5],"length":12,"rects":[[132.02000427246094,725.760009765625,168.2272491455078,17.5]],"start":151,"text":"渲染类组件标签的基本流程"}],"type":5}],"originaltext":"基本理解和使用","page":5,"textblocks":[{"first":[123.62000274658203,79.57999420166016,15.959999084472656,19.5],"last":[219.60348510742188,79.57999420166016,15.960006713867188,19.5],"length":7,"rects":[[123.62000274658203,79.57999420166016,111.94348907470703,19.5]],"start":9,"text":"基本理解和使用"}],"type":5},{"content":"是组件实例对象的三大核心属性之一：state\n\n1、页面通过取state中的属性来渲染数据\n2、可以调用方法，但是保证方法在实例上\n3、方法可以做到改变state属性的步骤做到，改变页面\n4、只要做到state和方法都挂在实例上就可以，使渲染页面的render方法触摸到他们","date":"2022-03-22 11:26:38","docid":0,"fillcolor":"ffffed99","folded":true,"id":23,"markups":[{"content":"每个组件都有状态，里面存储数据，数据的改变就会驱动页面的改变\n\n1、state根据key设置value，使用对象的方式改变属性\n2、每一次改变state属性都会导致render方法重新执行一遍来渲染页面\n3、state不能直接修改，只能通过setState方法来修改","date":"2022-03-23 10:55:36","docid":0,"fillcolor":"ffffed99","id":28,"originaltext":"理解","page":6,"textblocks":[{"first":[132.02000427246094,373.54998779296875,14.039993286132812,13.5],"last":[146.05999755859375,373.54998779296875,14.039993286132812,13.5],"length":2,"rects":[[132.02000427246094,373.54998779296875,28.079986572265625,13.5]],"start":187,"text":"理解"}],"type":5},{"date":"2022-03-23 11:04:01","docid":0,"fillcolor":"ffffed99","id":29,"originaltext":"强烈注意","page":6,"textblocks":[{"first":[132.02000427246094,479.6299743652344,14.039993286132812,17.5],"last":[174.13998413085938,479.6299743652344,14.039993286132812,17.5],"length":4,"rects":[[132.02000427246094,479.6299743652344,56.15997314453125,17.5]],"start":297,"text":"强烈注意"}],"type":5}],"originaltext":"组件三大核心属性 1: state","page":6,"textblocks":[{"first":[123.62000274658203,177.37997436523438,15.959999084472656,19.5],"last":[305.18988037109375,177.37997436523438,9.288726806640625,19.5],"length":17,"rects":[[123.62000274658203,177.37997436523438,190.85860443115234,19.5]],"start":84,"text":"组件三大核心属性 1: state"}],"type":5},{"date":"2022-03-23 11:04:08","docid":0,"fillcolor":"ffffed99","folded":true,"id":30,"markups":[{"content":"1、传递的属性全部封装在props中","date":"2022-03-24 10:57:51","docid":0,"fillcolor":"ffffed99","id":32,"originaltext":"理解","page":7,"textblocks":[{"first":[125.54000091552734,288.6799621582031,14.040000915527344,14.040008544921875],"last":[139.5800018310547,288.6799621582031,14.039993286132812,14.040008544921875],"length":2,"rects":[[125.54000091552734,288.6799621582031,28.079994201660156,14.040008544921875]],"start":88,"text":"理解"}],"type":5},{"content":"1、获取到外侧传递的数据\n2、封装到props中\n3、直接this中获取props即可","date":"2022-03-24 10:57:55","docid":0,"fillcolor":"ffffed99","id":33,"originaltext":" 作用","page":7,"textblocks":[{"first":[122.39508056640625,395.239990234375,3.1730422973632812,14.040008544921875],"last":[139.5800018310547,395.239990234375,14.039993286132812,14.040008544921875],"length":3,"rects":[[122.39508056640625,395.239990234375,31.22491455078125,14.040008544921875]],"start":162,"text":" 作用"}],"type":5}],"originaltext":"组件三大核心属性 2: props","page":6,"textblocks":[{"first":[123.62000274658203,671.2999267578125,15.959999084472656,20.5],"last":[313.3294372558594,671.2999267578125,7.884246826171875,20.5],"length":17,"rects":[[123.62000274658203,671.2999267578125,197.59368133544922,20.5]],"start":436,"text":"组件三大核心属性 2: props"}],"type":5},{"content":"有三种调用方式\n1、字符串直接调用（已过时）\n直接在标签上使用ref=\"设置标签名\"\n\n2、回调函数形式（只能使用内联函数）\nref里面写回调函数，参数随便定，ref会将当前节点当成参数，放到函数中，随后直接将这个参数挂靠在this身上即可\n\n3、React.createRef()创建一个容器\n让标签中的ref来选\n然后在其他的函数中直接使用","date":"2022-03-23 11:04:21","docid":0,"fillcolor":"ffffed99","folded":true,"id":31,"markups":[{"content":"唯一标识：\n会收集成key:value形式\n然后全部放在实例对象的refs上\n\n1、获取到的节点是虚拟DOM转换成真实DOM的节点","date":"2022-03-25 09:19:26","docid":0,"fillcolor":"ffffed99","id":34,"originaltext":"理解","page":8,"textblocks":[{"first":[132.02000427246094,668.4400024414062,14.039993286132812,13.5],"last":[146.05999755859375,668.4400024414062,14.039993286132812,13.5],"length":2,"rects":[[132.02000427246094,668.4400024414062,28.079986572265625,13.5]],"start":220,"text":"理解"}],"type":5},{"content":"创建的三种形式","date":"2022-03-25 10:43:55","docid":0,"fillcolor":"ffffed99","id":36,"originaltext":"编码","page":8,"textblocks":[{"first":[132.02000427246094,737.615966796875,14.039993286132812,16.5],"last":[146.05999755859375,737.615966796875,14.039993286132812,16.5],"length":2,"rects":[[132.02000427246094,737.615966796875,28.079986572265625,16.5]],"start":255,"text":"编码"}],"type":5},{"content":"注意：当发生事件的元素，刚好是操作元素的时候可以避免使用ref","date":"2022-03-25 10:43:45","docid":0,"fillcolor":"ffffed99","id":35,"originaltext":"事件处理","page":9,"textblocks":[{"first":[132.02000427246094,302.6099853515625,14.039993286132812,17.5],"last":[174.13998413085938,302.6099853515625,14.039993286132812,17.5],"length":4,"rects":[[132.02000427246094,302.6099853515625,56.15997314453125,17.5]],"start":71,"text":"事件处理"}],"type":5}],"originaltext":"组件三大核心属性 3: refs 与事件处理","page":8,"textblocks":[{"first":[123.62000274658203,423.02996826171875,15.959999084472656,18.5],"last":[373.1217041015625,423.02996826171875,15.959991455078125,18.5],"length":22,"rects":[[123.62000274658203,423.02996826171875,265.4616928100586,18.5]],"start":76,"text":"组件三大核心属性 3: refs 与事件处理"}],"type":5},{"date":"2022-03-25 10:44:22","docid":0,"fillcolor":"ffffed99","folded":true,"id":37,"markups":[{"date":"2022-03-25 11:24:13","docid":0,"fillcolor":"ffffed99","folded":false,"id":42,"markups":[{"content":"对于表单数据，维护到状态中的就是受控组件\n\n调用setState方法，将改变数据放到状态中，达到双向绑定功能\n\n高阶函数：\n高阶函数：如果一个函数符合以下两个规范的任何一个，那该函数就是高阶函数\n1、若A函数，接收的参数是一个函数，那么A就可以称为高阶函数\n2、若A函数，调用的返回值已然是一个函数，那么A就可以称为高阶函数函数的柯里化：通过函数调用继续返回函数的方式，实现过次接收参数最后统一处理的函数编码形式","date":"2022-03-25 11:24:22","docid":0,"fillcolor":"ffffed99","id":43,"originaltext":"1. 受控组件","page":9,"textblocks":[{"first":[111.0199966430664,718.3200073242188,6.469444274902344,14.5],"last":[165.13998413085938,718.3200073242188,11.039993286132812,14.5],"length":7,"rects":[[111.0199966430664,718.3200073242188,65.15998077392578,14.5]],"start":327,"text":"1. 受控组件"}],"type":5},{"content":"对于表单数据，现用现取就是非受控组件","date":"2022-03-25 11:24:24","docid":0,"fillcolor":"ffffed99","id":44,"originaltext":"2. 非受控组件","page":9,"textblocks":[{"first":[111.0199966430664,746.635986328125,6.469444274902344,13.5],"last":[176.05853271484375,746.635986328125,11.039993286132812,13.5],"length":8,"rects":[[111.0199966430664,746.635986328125,76.07852935791016,13.5]],"start":336,"text":"2. 非受控组件"}],"type":5}],"originaltext":"理解","page":9,"textblocks":[{"first":[132.02000427246094,654.8800048828125,14.039993286132812,14.5],"last":[146.05999755859375,654.8800048828125,14.039993286132812,14.5],"length":2,"rects":[[132.02000427246094,654.8800048828125,28.079986572265625,14.5]],"start":312,"text":"理解"}],"type":5}],"originaltext":"收集表单数据","page":9,"textblocks":[{"first":[123.62000274658203,465.8499755859375,15.959999084472656,19.5],"last":[203.6434783935547,465.8499755859375,15.960006713867188,19.5],"length":6,"rects":[[123.62000274658203,465.8499755859375,95.98348236083984,19.5]],"start":231,"text":"收集表单数据"}],"type":5},{"content":"注意\n1、不能在render中改变state的值，会触发开启多次更改state的函数，即state值改变触发render重新渲染，又会改变state的值\n2、很像内存屏障（生命周期钩子两个）\ncomponentDidMount保证组件挂载之后内容已经动作\ncomponentWillUnmount保证组件卸载之后的清空","date":"2022-03-25 10:44:27","docid":0,"fillcolor":"ffffed99","folded":false,"id":38,"markups":[{"date":"2022-03-28 09:32:32","docid":0,"fillcolor":"ffffed99","id":45,"originaltext":"理解","page":10,"textblocks":[{"first":[132.02000427246094,347.6899719238281,14.039993286132812,16.5],"last":[146.05999755859375,347.6899719238281,14.039993286132812,16.5],"length":2,"rects":[[132.02000427246094,347.6899719238281,28.079986572265625,16.5]],"start":151,"text":"理解"}],"type":5},{"content":"1、三大状态：初始化、渲染、卸载\n初始化，渲染有4个方法\n初始化：构造，挂载前、渲染、挂载后\n渲染：setState、forceUpdate、渲染、更新后\n卸载：将要卸载","date":"2022-03-28 09:45:14","docid":0,"fillcolor":"ffffed99","folded":false,"id":47,"markups":[{"date":"2022-03-28 09:49:14","docid":0,"fillcolor":"ffffed99","folded":true,"id":49,"markups":[{"content":"构造方法会首先被执行","date":"2022-03-28 09:48:44","docid":0,"fillcolor":"ffffed99","id":48,"originaltext":"1. constructor()","page":11,"textblocks":[{"first":[153.02000427246094,440.8499755859375,6.1881561279296875,9.5],"last":[235.0884552001953,440.8499755859375,3.52703857421875,9.5],"length":16,"rects":[[153.02000427246094,440.8499755859375,85.59548950195312,9.5]],"start":61,"text":"1. constructor()"}],"type":5},{"content":"挂载之前的方法","date":"2022-03-28 09:49:41","docid":0,"fillcolor":"ffffed99","id":50,"originaltext":"2. componentWillMount()","page":11,"textblocks":[{"first":[153.02000427246094,464.7499694824219,6.1881561279296875,14.5],"last":[288.5009765625,464.7499694824219,3.52703857421875,14.5],"length":23,"rects":[[153.02000427246094,464.7499694824219,139.0080108642578,14.5]],"start":79,"text":"2. componentWillMount()"}],"type":5},{"content":"进行挂载","date":"2022-03-28 09:50:02","docid":0,"fillcolor":"ffffed99","id":51,"originaltext":"3. render()","page":11,"textblocks":[{"first":[153.02000427246094,494.8499755859375,6.1881561279296875,9.5],"last":[210.6209716796875,494.8499755859375,3.52703857421875,9.5],"length":11,"rects":[[153.02000427246094,494.8499755859375,61.12800598144531,9.5]],"start":104,"text":"3. render()"}],"type":5},{"content":"渲染完毕一般用来初始化状态","date":"2022-03-28 09:50:16","docid":0,"fillcolor":"ffffed99","id":52,"originaltext":"4. componentDidMount()","page":11,"textblocks":[{"first":[153.02000427246094,521.8499755859375,6.1881561279296875,9.5],"last":[286.959228515625,521.8499755859375,3.52703857421875,9.5],"length":22,"rects":[[153.02000427246094,521.8499755859375,137.4662628173828,9.5]],"start":117,"text":"4. componentDidMount()"}],"type":5}],"originaltext":"1. 初始化阶段: 由 ReactDOM.render()触发---初次渲染","page":11,"textblocks":[{"first":[126.0199966430664,400.04998779296875,6.811683654785156,14.5],"last":[385.74859619140625,400.04998779296875,11.040008544921875,14.5],"length":38,"rects":[[126.0199966430664,400.04998779296875,270.7686080932617,14.5]],"start":21,"text":"1. 初始化阶段: 由 ReactDOM.render()触发---初次渲染"}],"type":5},{"date":"2022-03-28 09:50:31","docid":0,"fillcolor":"ffffed99","folded":false,"id":53,"markups":[{"content":"是否允许setState组件的的更新，如果返回false那么会被禁止更新，不写默认返回true，但是不管返回false还是true，其中state已经被改变","date":"2022-03-28 09:50:39","docid":0,"fillcolor":"ffffed99","id":54,"originaltext":"1. shouldComponentUpdate()","page":11,"textblocks":[{"first":[153.02000427246094,584.1500244140625,6.1881561279296875,14.5],"last":[308.1637268066406,584.1500244140625,3.52703857421875,14.5],"length":26,"rects":[[153.02000427246094,584.1500244140625,158.67076110839844,14.5]],"start":189,"text":"1. shouldComponentUpdate()"}],"type":5},{"content":"组件将要被更新，也就是state状态值已经改变，可以通过forceUpdate方法进行，注意不会改变state状态的数据，只会强制更新","date":"2022-03-28 09:53:50","docid":0,"fillcolor":"ffffed99","id":55,"originaltext":"2. componentWillUpdate()","page":11,"textblocks":[{"first":[153.02000427246094,611.1799926757812,6.1881561279296875,14.5],"last":[291.46832275390625,611.1799926757812,3.52703857421875,14.5],"length":24,"rects":[[153.02000427246094,611.1799926757812,141.97535705566406,14.5]],"start":217,"text":"2. componentWillUpdate()"}],"type":5},{"content":"重新渲染","date":"2022-03-28 09:54:11","docid":0,"fillcolor":"ffffed99","id":56,"originaltext":"3. render()","page":11,"textblocks":[{"first":[153.02000427246094,641.2799682617188,6.1881561279296875,9.5],"last":[210.6209716796875,641.2799682617188,3.52703857421875,9.5],"length":11,"rects":[[153.02000427246094,641.2799682617188,61.12800598144531,9.5]],"start":243,"text":"3. render()"}],"type":5},{"content":"渲染更新完毕","date":"2022-03-28 09:54:32","docid":0,"fillcolor":"ffffed99","id":57,"originaltext":"4. componentDidUpdate()","page":11,"textblocks":[{"first":[153.02000427246094,665.1799926757812,6.1881561279296875,14.5],"last":[289.92657470703125,665.1799926757812,3.52703857421875,14.5],"length":23,"rects":[[153.02000427246094,665.1799926757812,140.43360900878906,14.5]],"start":256,"text":"4. componentDidUpdate()"}],"type":5}],"originaltext":"2. 更新阶段: 由组件内部 this.setSate()或父组件重新 render 触发","page":11,"textblocks":[{"first":[126.0199966430664,546.3499755859375,6.811683654785156,14.5],"last":[431.83001708984375,546.3499755859375,11.040008544921875,14.5],"length":45,"rects":[[126.0199966430664,546.3499755859375,316.8500289916992,14.5]],"start":142,"text":"2. 更新阶段: 由组件内部 this.setSate()或父组件重新 render 触发"}],"type":5},{"date":"2022-03-28 09:54:51","docid":0,"fillcolor":"ffffed99","folded":true,"id":58,"markups":[{"content":"组件将要被卸载","date":"2022-03-28 09:54:59","docid":0,"fillcolor":"ffffed99","id":59,"originaltext":"1. componentWillUnmount()","page":11,"textblocks":[{"first":[162.02000427246094,730.4559936523438,6.1881561279296875,14.5],"last":[311.2818298339844,730.4559936523438,3.52703857421875,14.5],"length":25,"rects":[[162.02000427246094,730.4559936523438,152.7888641357422,14.5]],"start":330,"text":"1. componentWillUnmount()"}],"type":5}],"originaltext":"3. 卸载组件: 由 ReactDOM.unmountComponentAtNode()触发","page":11,"textblocks":[{"first":[126.0199966430664,691.97998046875,6.811683654785156,15.5],"last":[433.75,691.97998046875,11.040008544921875,15.5],"length":46,"rects":[[126.0199966430664,691.97998046875,318.77001190185547,15.5]],"start":282,"text":"3. 卸载组件: 由 ReactDOM.unmountComponentAtNode()触发"}],"type":5}],"originaltext":"生命周期流程图(旧)","page":10,"textblocks":[{"first":[132.02000427246094,482.28997802734375,14.039993286132812,16.5],"last":[249.64999389648438,482.28997802734375,5.4756011962890625,16.5],"length":10,"rects":[[132.02000427246094,482.28997802734375,123.1055908203125,16.5]],"start":268,"text":"生命周期流程图(旧)"}],"type":5},{"date":"2022-03-28 09:32:48","docid":0,"fillcolor":"ffffed99","id":46,"markups":[{"content":"若以后sate的更新都取决于props，那么可以使用这个钩子函数","date":"2022-03-28 11:43:01","docid":0,"fillcolor":"ffffed99","id":60,"originaltext":"getDerivedStateFromProps","page":12,"textblocks":[{"first":[183.02000427246094,483.80999755859375,7.02239990234375,9.5],"last":[321.08154296875,483.80999755859375,5.216644287109375,9.5],"length":24,"rects":[[183.02000427246094,483.80999755859375,143.27818298339844,9.5]],"start":100,"text":"getDerivedStateFromProps"}],"type":5},{"content":"更新前的快照","date":"2022-03-28 11:46:49","docid":0,"fillcolor":"ffffed99","id":61,"originaltext":"getSnapshotBeforeUpdate","page":12,"textblocks":[{"first":[183.02000427246094,681.1400146484375,7.02239990234375,14.5],"last":[317.2376403808594,681.1400146484375,6.14593505859375,14.5],"length":23,"rects":[[183.02000427246094,681.1400146484375,140.3635711669922,14.5]],"start":285,"text":"getSnapshotBeforeUpdate"}],"type":5}],"originaltext":"生命周期流程图(新)","page":12,"textblocks":[{"first":[132.02000427246094,78.53997802734375,14.039993286132812,17.5],"last":[249.64999389648438,78.53997802734375,5.4756011962890625,17.5],"length":10,"rects":[[132.02000427246094,78.53997802734375,123.1055908203125,17.5]],"start":11,"text":"生命周期流程图(新)"}],"type":5},{"date":"2022-03-25 10:44:44","docid":0,"fillcolor":"ffffed99","id":39,"originaltext":"重要的勾子","page":13,"textblocks":[{"first":[132.02000427246094,118.6199951171875,14.039993286132812,17.5],"last":[188.1799774169922,118.6199951171875,14.039993286132812,17.5],"length":5,"rects":[[132.02000427246094,118.6199951171875,70.19996643066406,17.5]],"start":38,"text":"重要的勾子"}],"type":5}],"originaltext":" 组件的生命周期","page":10,"textblocks":[{"first":[118.81848907470703,79.45999908447266,4.756080627441406,19.5],"last":[219.6117401123047,79.45999908447266,15.960006713867188,19.5],"length":8,"rects":[[118.81848907470703,79.45999908447266,116.75325775146484,19.5]],"start":8,"text":" 组件的生命周期"}],"type":5},{"date":"2022-03-25 10:45:09","docid":0,"fillcolor":"ffffed99","id":41,"originaltext":"虚拟 DOM 与 DOM Diffing 算法","page":13,"textblocks":[{"first":[123.62000274658203,438.40997314453125,15.959999084472656,15.5],"last":[349.0299987792969,438.40997314453125,15.959991455078125,15.5],"length":23,"rects":[[123.62000274658203,438.40997314453125,241.36998748779297,15.5]],"start":304,"text":"虚拟 DOM 与 DOM Diffing 算法"}],"type":5}],"originaltext":"第 2 章：React 面向组件编程","page":4,"textblocks":[{"first":[90.02400207519531,707.4600219726562,21.959999084472656,24.5],"last":[356.8099670410156,707.4600219726562,21.959991455078125,24.5],"length":18,"rects":[[90.02400207519531,707.4600219726562,288.74595642089844,24.5]],"start":243,"text":"第 2 章：React 面向组件编程"}],"type":5},{"date":"2022-03-21 14:38:57","docid":0,"fillcolor":"ffffed99","id":4,"originaltext":"第 3 章：React 应用(基于 React 脚手架)","page":14,"textblocks":[{"first":[90.02400207519531,318.28997802734375,21.959999084472656,25.5],"last":[481.29998779296875,318.28997802734375,8.56439208984375,25.5],"length":28,"rects":[[90.02400207519531,318.28997802734375,399.8403778076172,25.5]],"start":6,"text":"第 3 章：React 应用(基于 React 脚手架)"}],"type":5},{"date":"2022-03-21 14:39:36","docid":0,"fillcolor":"ffffed99","id":8,"originaltext":"第 4 章：React ajax","page":16,"textblocks":[{"first":[90.02400207519531,455.42999267578125,21.959999084472656,27.5],"last":[280.03363037109375,455.42999267578125,12.846588134765625,27.5],"length":16,"rects":[[90.02400207519531,455.42999267578125,202.85621643066406,27.5]],"start":229,"text":"第 4 章：React ajax"}],"type":5},{"date":"2022-03-21 14:39:10","docid":0,"fillcolor":"ffffed99","id":5,"originaltext":"第 5 章：React 路由","page":20,"textblocks":[{"first":[90.02400207519531,83.0199966430664,21.959999084472656,24.5],"last":[268.9700012207031,83.0199966430664,21.959991455078125,24.5],"length":14,"rects":[[90.02400207519531,83.0199966430664,200.90599060058594,24.5]],"start":4,"text":"第 5 章：React 路由"}],"type":5},{"date":"2022-03-21 14:39:18","docid":0,"fillcolor":"ffffed99","id":6,"originaltext":"第 6 章：React UI 组件库","page":23,"textblocks":[{"first":[90.02400207519531,83.0199966430664,21.959999084472656,24.5],"last":[321.9778137207031,83.0199966430664,21.959991455078125,24.5],"length":18,"rects":[[90.02400207519531,83.0199966430664,253.91380310058594,24.5]],"start":4,"text":"第 6 章：React UI 组件库"}],"type":5},{"date":"2022-03-21 14:39:26","docid":0,"fillcolor":"ffffed99","id":7,"originaltext":"第 7 章：redux","page":23,"textblocks":[{"first":[90.02400207519531,413.8899841308594,21.959999084472656,24.5],"last":[231.42523193359375,413.8899841308594,12.846603393554688,24.5],"length":11,"rects":[[90.02400207519531,413.8899841308594,154.24783325195312,24.5]],"start":280,"text":"第 7 章：redux"}],"type":5}],"maxid":61,"notelinks":[],"title":"尚硅谷react全家桶","unimportant":[]}
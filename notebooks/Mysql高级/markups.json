{"EpubVersion":1,"filepath":"","floatingtheme":[],"folded":false,"markups":[{"date":"2021-12-13 16:33:43","folded":false,"id":340,"linecolor":"ffcccedb","markups":[{"content":"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","date":"2021-12-01 17:34:16","docid":3,"fillcolor":"ffffed99","id":341,"originaltext":"Linux 系统安装MySQL","page":0,"textblocks":[{"first":[68.68629455566406,351.030517578125,8.2666015625,19.5],"last":[213.25936889648438,351.030517578125,8.2666015625,19.5],"length":15,"rects":[[68.68629455566406,351.030517578125,152.8396759033203,19.5]],"start":183,"text":"Linux 系统安装MySQL"}],"type":5},{"content":"对表中的字段","date":"2021-12-02 15:29:01","docid":3,"fillcolor":"ffffed99","folded":false,"id":342,"markups":[{"date":"2021-12-02 15:29:04","docid":3,"fillcolor":"ffffed99","folded":true,"id":343,"markups":[{"content":"是一种数据结构，存储的是引用，指向数据库中的数据。\n\n没有建立索引查找会进行整表扫描知道查到为止\n\n而索引对数据的大小进行了某些数据结构的排序，这样有序的数据结构是非常利于查找","date":"2021-12-02 15:30:56","docid":3,"fillcolor":"ffffed99","id":344,"originaltext":"MySQL官方对索引的定义为：索引（index）是帮助MySQL高效获取数据的数据结构（有序）。","page":2,"textblocks":[{"first":[52.35793685913086,335.622314453125,8.80794906616211,13.5],"last":[452.77606201171875,335.622314453125,9.75408935546875,13.5],"length":48,"rects":[[52.35793685913086,335.622314453125,410.17221450805664,13.5]],"start":19,"text":"MySQL官方对索引的定义为：索引（index）是帮助MySQL高效获取数据的数据结构（有序）。"}],"title":"索引的定义","type":5}],"originaltext":"索引概述","page":2,"textblocks":[{"first":[72.92108154296875,309.8619384765625,12.192626953125,14.5],"last":[109.49894714355469,309.8619384765625,12.192626953125,14.5],"length":4,"rects":[[72.92108154296875,309.8619384765625,48.77049255371094,14.5]],"start":13,"text":"索引概述"}],"type":5},{"date":"2021-12-02 22:33:27","docid":3,"fillcolor":"ffffed99","folded":true,"id":345,"markups":[{"date":"2021-12-02 22:33:48","docid":3,"fillcolor":"ffffed99","folded":true,"id":346,"markups":[{"content":"提高检索效率，降低IO成本","date":"2021-12-02 22:33:36","docid":3,"fillcolor":"ffffed99","id":347,"originaltext":"类似于书籍的目录索引，提高数据检索的效率，降低数据库的IO成本。","page":2,"textblocks":[{"first":[70.22298431396484,722.2843017578125,9.754096984863281,13.5],"last":[363.4079284667969,722.2843017578125,9.75408935546875,13.5],"length":32,"rects":[[70.22298431396484,722.2843017578125,302.9390335083008,13.5]],"start":395,"text":"类似于书籍的目录索引，提高数据检索的效率，降低数据库的IO成本。"}],"type":5},{"content":"降低排序成本，降低CPU消耗","date":"2021-12-02 22:33:55","docid":3,"fillcolor":"ffffed99","id":348,"originaltext":" 通过索引列对数据进行排序，降低数据排序的成本，降低CPU的消耗。劣势","page":2,"textblocks":[{"first":[67.689208984375,744.5440673828125,2.5360641479492188,13.5],"last":[62.11203384399414,768.0535888671875,9.754100799560547,12.5],"length":36,"rects":[[67.689208984375,744.5440673828125,304.52978515625,13.5],[52.35793685913086,768.0535888671875,19.508197784423828,12.5]],"start":430,"text":" 通过索引列对数据进行排序，降低数据排序的成本，降低CPU的消耗。\n劣势"}],"type":5}],"originaltext":"优势","page":2,"textblocks":[{"first":[52.35793685913086,699.7750244140625,9.754096984863281,12.5],"last":[62.11203384399414,699.7750244140625,9.754100799560547,12.5],"length":2,"rects":[[52.35793685913086,699.7750244140625,19.508197784423828,12.5]],"start":389,"text":"优势"}],"type":5},{"date":"2021-12-02 22:35:14","docid":3,"folded":true,"id":349,"linecolor":"ff59c6ff","markups":[{"content":"还是要占用空间的","date":"2021-12-02 22:36:04","docid":3,"fillcolor":"ffffed99","id":350,"originaltext":"实际上索引也是一张表，该表中保存了主键与索引字段，并指向实体类的记录，所以索引列也是要占用空间的。","page":3,"textblocks":[{"first":[70.22298431396484,56.7548828125,9.754096984863281,12.5],"last":[62.11203384399414,71.76123046875,9.754100799560547,12.5],"length":50,"rects":[[70.22298431396484,56.7548828125,458.4426040649414,12.5],[52.35793685913086,71.76123046875,19.508197784423828,12.5]],"start":139,"text":"实际上索引也是一张表，该表中保存了主键与索引字段，并指向实体类的记录，所以索引列也是要占用空间\n的。"}],"type":5},{"content":"索引的修改，会导致整个数据结构的修改","date":"2021-12-02 22:36:12","docid":3,"fillcolor":"ffffed99","id":351,"originaltext":"虽然索引大大提高了查询效率，同时却也降低更新表的速度，如对表进行INSERT、UPDATE、DELETE。因为更新表时，MySQL 不仅要保存数据，还要保存一下索引文件每次更新添加了索引列的字段，都会调整因为更新所带来的键值变化后的索引信息。","page":3,"textblocks":[{"first":[70.22298431396484,93.97050476074219,9.754096984863281,13.5],"last":[179.1612091064453,124.283203125,9.754104614257812,13.5],"length":123,"rects":[[70.22298431396484,93.97050476074219,463.22440338134766,13.5],[52.35793685913086,110.27685546875,482.9564552307129,12.5],[52.35793685913086,124.283203125,136.55737686157227,13.5]],"start":193,"text":"虽然索引大大提高了查询效率，同时却也降低更新表的速度，如对表进行INSERT、UPDATE、DELETE。因为\n更新表时，MySQL 不仅要保存数据，还要保存一下索引文件每次更新添加了索引列的字段，都会调整因为更新所\n带来的键值变化后的索引信息。"}],"type":5}],"page":-1,"title":"劣势","type":7}],"originaltext":" 索引优势劣势","page":2,"textblocks":[{"first":[69.75680541992188,673.0145263671875,3.1700820922851562,15.5],"last":[133.8842010498047,673.0145263671875,12.192626953125,15.5],"length":7,"rects":[[69.75680541992188,673.0145263671875,76.32002258300781,15.5]],"start":380,"text":" 索引优势劣势"}],"type":5},{"date":"2021-12-02 22:40:29","docid":3,"fillcolor":"ffffed99","folded":true,"id":352,"markups":[{"content":"所以索引的数据结构有存储引擎决定","date":"2021-12-02 22:40:36","docid":3,"fillcolor":"ffffed99","id":353,"originaltext":"索引是在MySQL的存储引擎层中实现的，而不是在服务器层实现的。","page":3,"textblocks":[{"first":[52.35793685913086,197.564453125,9.754096984863281,13.5],"last":[337.6986389160156,197.564453125,9.75408935546875,13.5],"length":32,"rects":[[52.35793685913086,197.564453125,295.0947914123535,13.5]],"start":329,"text":"索引是在MySQL的存储引擎层中实现的，而不是在服务器层实现的。"}],"type":5},{"date":"2021-12-02 22:41:02","docid":3,"fillcolor":"ffffed99","folded":true,"id":354,"markups":[{"date":"2021-12-02 22:41:09","docid":3,"fillcolor":"ffffed99","id":355,"originaltext":"BTREE 索引 ： 最常见的索引类型，大部分索引都支持 B 树索引。","page":3,"textblocks":[{"first":[74.86739349365234,236.080078125,6.320655822753906,12.5],"last":[346.5057067871094,236.080078125,9.75408935546875,12.5],"length":35,"rects":[[74.86739349365234,236.080078125,281.3924026489258,12.5]],"start":422,"text":"BTREE 索引 ： 最常见的索引类型，大部分索引都支持 B 树索引。"}],"type":5},{"date":"2021-12-02 22:41:15","docid":3,"fillcolor":"ffffed99","id":356,"originaltext":"HASH 索引：只有Memory引擎支持 ， 使用场景简单 。","page":3,"textblocks":[{"first":[74.86739349365234,251.08642578125,7.198524475097656,12.5],"last":[305.1269836425781,251.08642578125,9.75408935546875,12.5],"length":31,"rects":[[74.86739349365234,251.08642578125,240.01367950439453,12.5]],"start":458,"text":"HASH 索引：只有Memory引擎支持 ， 使用场景简单 。"}],"type":5},{"date":"2021-12-02 22:41:25","docid":3,"fillcolor":"ffffed99","id":357,"originaltext":"R-tree 索引（空间索引）：空间索引是MyISAM引擎的一个特殊索引类型，主要用于地理空间数据类型，通常使用较少，不做特别介绍。","page":3,"textblocks":[{"first":[74.86739349365234,266.0927734375,6.0280303955078125,12.5],"last":[182.1624755859375,281.09912109375,9.754104614257812,12.5],"length":67,"rects":[[74.86739349365234,266.0927734375,466.5678482055664,12.5],[74.86739349365234,281.09912109375,117.04918670654297,12.5]],"start":490,"text":"R-tree 索引（空间索引）：空间索引是MyISAM引擎的一个特殊索引类型，主要用于地理空间数据类型，通常\n使用较少，不做特别介绍。"}],"type":5},{"date":"2021-12-02 22:41:34","docid":3,"fillcolor":"ffffed99","id":358,"originaltext":"Full-text （全文索引） ：全文索引也是MyISAM的一个特殊索引类型，主要用于全文索引，InnoDB从Mysql5.6版本开始支持全文索引。","page":3,"textblocks":[{"first":[74.86739349365234,297.10546875,5.033111572265625,12.5],"last":[212.9774169921875,311.11181640625,9.754104614257812,12.5],"length":76,"rects":[[74.86739349365234,297.10546875,434.10974884033203,12.5],[74.86739349365234,311.11181640625,147.86412811279297,12.5]],"start":558,"text":"Full-text （全文索引） ：全文索引也是MyISAM的一个特殊索引类型，主要用于全文索引，InnoDB从\nMysql5.6版本开始支持全文索引。"}],"type":5}],"originaltext":"MySQL目前提供了以下4种索引：","page":3,"textblocks":[{"first":[266.9480895996094,212.57080078125,8.807952880859375,13.5],"last":[401.8004150390625,212.57080078125,9.75408935546875,13.5],"length":17,"rects":[[266.9480895996094,212.57080078125,144.60641479492188,13.5]],"start":404,"text":"MySQL目前提供了以下4种索引："}],"type":5},{"date":"2021-12-03 14:27:08","docid":3,"fillcolor":"ffffed99","folded":true,"id":359,"markups":[{"content":"最多可以有m个孩子","date":"2021-12-03 14:27:25","docid":3,"fillcolor":"ffffed99","id":360,"originaltext":"BTree又叫多路平衡搜索树，一颗m叉的BTree特性如下：","page":3,"textblocks":[{"first":[52.35793685913086,582.725830078125,6.320655822753906,12.5],"last":[288.34710693359375,582.725830078125,9.75408935546875,12.5],"length":30,"rects":[[52.35793685913086,582.725830078125,245.74325942993164,12.5]],"start":749,"text":"BTree又叫多路平衡搜索树，一颗m叉的BTree特性如下："}],"type":5},{"content":"子节点的限制：\n根节点至少为2，叶子节点为0，其他至少为m/2向上取整\n除了非叶子节点由n个key和n+1个指针组成\n[ceil(m/2)-1]<=n<=m-1\n\nm叉树，表示最大节点树为m-1，非根节点和叶子节点最小节点数为[ceil(m/2)]-1，引用为[ceil(m/2)]\n\n添加过程不用管引用，它会直接比较走到最底层添加，只要添加的时候进行判断元素是否到达m，到达分裂中间成父节点父节点指向分裂前左右的节点，至于左右节点，变成三个空引用即可，而父节点向上添加，（重点）谁指向他，就将那个引用的位置进行分裂放入创建好的父节点引用，而父节点的key，按照大小放置即可\n\n这些key直接关联数据库中的数据","date":"2021-12-03 14:27:31","docid":3,"fillcolor":"ffffed99","id":361,"originaltext":"树中每个节点最多包含m个孩子。除根节点与叶子节点外，每个节点至少有[ceil(m/2)]个孩子。若根节点不是叶子节点，则至少有两个孩子。所有的叶子节点都在同一层。每个非叶子节点由n个key与n+1个指针组成，其中[ceil(m/2)-1] <= n <= m-1","page":3,"textblocks":[{"first":[74.86739349365234,605.985595703125,9.754096984863281,12.5],"last":[393.54254150390625,665.7107543945312,5.579345703125,13.5],"length":135,"rects":[[74.86739349365234,605.985595703125,145.63040924072266,12.5],[74.86739349365234,620.991943359375,260.06482696533203,12.5],[74.86739349365234,635.998291015625,195.08194732666016,12.5],[74.86739349365234,651.00439453125,126.80327606201172,12.5],[74.86739349365234,665.7107543945312,324.2544937133789,13.5]],"start":780,"text":"树中每个节点最多包含m个孩子。\n除根节点与叶子节点外，每个节点至少有[ceil(m/2)]个孩子。\n若根节点不是叶子节点，则至少有两个孩子。\n所有的叶子节点都在同一层。\n每个非叶子节点由n个key与n+1个指针组成，其中[ceil(m/2)-1] <= n <= m-1"}],"type":5},{"date":"2021-12-03 15:53:53","docid":3,"fillcolor":"ffffed99","id":362,"originaltext":"BTREE树 和 二叉树 相比， 查询数据的效率更高， 因为对于相同的数据量来说，BTREE的层级结构比二叉树小，因此搜索速度快。","page":6,"textblocks":[{"first":[219.75636291503906,281.599609375,6.320648193359375,13.5],"last":[285.4989929199219,296.60595703125,9.75408935546875,13.5],"length":66,"rects":[[219.75636291503906,281.599609375,314.0863494873047,13.5],[52.35793685913086,296.60595703125,242.89514541625977,13.5]],"start":20,"text":"BTREE树 和 二叉树 相比， 查询数据的效率更高， 因为对于相同的数据量\n来说，BTREE的层级结构比二叉树小，因此搜索速度快。"}],"type":5}],"originaltext":"BTREE 结构","page":3,"textblocks":[{"first":[77.1626205444336,559.7158203125,6.554756164550781,10.5],"last":[118.72200012207031,559.7158203125,9.754104614257812,10.5],"length":8,"rects":[[77.1626205444336,559.7158203125,51.31348419189453,10.5]],"start":739,"text":"BTREE 结构"}],"type":5},{"content":"与BTREE的不同是多少叉树就是最大有多少个节点\n\n非叶子节点的key并不是关联到数据库中的数据\n只有叶子节点才会关联到数据库中的数据\n\n所以一定要访问到叶子节点才能找到所要的数据，更加的稳定","date":"2021-12-03 15:53:58","docid":3,"fillcolor":"ffffed99","folded":true,"id":363,"markups":[{"date":"2021-12-03 15:56:20","docid":3,"fillcolor":"ffffed99","folded":false,"id":364,"markups":[{"date":"2021-12-03 15:56:27","docid":3,"fillcolor":"ffffed99","id":365,"originaltext":"1). n叉B+Tree最多含有n个key，而BTree最多含有n-1个key。2). B+Tree的叶子节点保存所有的key信息，依key大小顺序排列。3). 所有的非叶子节点都可以看作是key的索引部分。","page":6,"textblocks":[{"first":[52.35793685913086,390.2955017089844,5.579345703125,14.5],"last":[266.3956298828125,436.0645446777344,9.75408935546875,14.5],"length":106,"rects":[[52.35793685913086,390.2955017089844,264.2703285217285,14.5],[52.35793685913086,414.6552734375,280.2016944885254,12.5],[52.35793685913086,436.0645446777344,223.7917823791504,14.5]],"start":140,"text":"1). n叉B+Tree最多含有n个key，而BTree最多含有n-1个key。\n2). B+Tree的叶子节点保存所有的key信息，依key大小顺序排列。\n3). 所有的非叶子节点都可以看作是key的索引部分。"}],"type":5}],"originaltext":"B+Tree为BTree的变种，B+Tree与BTree的区别为：","page":6,"textblocks":[{"first":[52.35793685913086,369.38623046875,6.320655822753906,12.5],"last":[264.3190612792969,369.38623046875,9.75408935546875,12.5],"length":33,"rects":[[52.35793685913086,369.38623046875,221.71521377563477,12.5]],"start":106,"text":"B+Tree为BTree的变种，B+Tree与BTree的区别为："}],"type":5},{"date":"2021-12-03 16:00:48","docid":3,"fillcolor":"ffffed99","id":366,"originaltext":"由于B+Tree只有叶子节点保存key信息，查询任何key都要从root走到叶子。所以B+Tree的查询效率更加稳定。","page":6,"textblocks":[{"first":[52.35793685913086,747.4454345703125,9.754096984863281,14.5],"last":[515.8300170898438,747.4454345703125,9.75408935546875,14.5],"length":59,"rects":[[52.35793685913086,747.4454345703125,473.22616958618164,14.5]],"start":247,"text":"由于B+Tree只有叶子节点保存key信息，查询任何key都要从root走到叶子。所以B+Tree的查询效率更加稳定。"}],"type":5},{"date":"2021-12-03 16:13:00","docid":3,"fillcolor":"ffffed99","id":367,"originaltext":"MySQL中的B+Tree","page":7,"textblocks":[{"first":[77.1626205444336,80.46513366699219,9.198112487792969,13.5],"last":[157.34007263183594,80.46513366699219,5.764678955078125,13.5],"length":13,"rects":[[77.1626205444336,80.46513366699219,85.94213104248047,13.5]],"start":8,"text":"MySQL中的B+Tree"}],"type":5}],"originaltext":" B+TREE 结构","page":6,"textblocks":[{"first":[74.62655639648438,345.8759765625,2.5360641479492188,10.5],"last":[124.5801773071289,345.8759765625,9.754096984863281,10.5],"length":10,"rects":[[74.62655639648438,345.8759765625,59.70771789550781,10.5]],"start":94,"text":" B+TREE 结构"}],"type":5}],"originaltext":" 索引结构","page":3,"textblocks":[{"first":[69.75680541992188,171.803955078125,3.1700820922851562,14.5],"last":[109.49894714355469,171.803955078125,12.192626953125,14.5],"length":5,"rects":[[69.75680541992188,171.803955078125,51.93476867675781,14.5]],"start":322,"text":" 索引结构"}],"type":5},{"date":"2021-12-03 16:13:09","docid":3,"fillcolor":"ffffed99","folded":true,"id":368,"markups":[{"content":"对一个字段建立索引","date":"2021-12-03 16:13:57","docid":3,"fillcolor":"ffffed99","id":369,"originaltext":"1） 单值索引 ：即一个索引只包含单个列，一个表可以有多个单列索引","page":7,"textblocks":[{"first":[52.35793685913086,408.40283203125,5.579345703125,13.5],"last":[345.87152099609375,408.40283203125,9.75408935546875,13.5],"length":33,"rects":[[52.35793685913086,408.40283203125,303.26767349243164,13.5]],"start":147,"text":"1） 单值索引 ：即一个索引只包含单个列，一个表可以有多个单列索引"}],"type":5},{"content":"包含多个null空值","date":"2021-12-03 16:14:02","docid":3,"fillcolor":"ffffed99","id":370,"originaltext":"2） 唯一索引 ：索引列的值必须唯一，但允许有空值","page":7,"textblocks":[{"first":[52.35793685913086,432.91259765625,5.579345703125,12.5],"last":[267.8387451171875,432.91259765625,9.75408935546875,12.5],"length":25,"rects":[[52.35793685913086,432.91259765625,225.2348976135254,12.5]],"start":181,"text":"2） 唯一索引 ：索引列的值必须唯一，但允许有空值"}],"type":5},{"content":"对多个字段建立索引","date":"2021-12-03 16:14:05","docid":3,"fillcolor":"ffffed99","id":371,"originaltext":"3） 复合索引 ：即一个索引包含多个列","page":7,"textblocks":[{"first":[52.35793685913086,455.17236328125,5.579345703125,13.5],"last":[209.31414794921875,455.17236328125,9.754104614257812,13.5],"length":19,"rects":[[52.35793685913086,455.17236328125,166.7103157043457,13.5]],"start":207,"text":"3） 复合索引 ：即一个索引包含多个列"}],"type":5}],"originaltext":"索引分类","page":7,"textblocks":[{"first":[72.92108154296875,382.642578125,12.192626953125,14.5],"last":[109.49894714355469,382.642578125,12.192626953125,14.5],"length":4,"rects":[[72.92108154296875,382.642578125,48.77049255371094,14.5]],"start":141,"text":"索引分类"}],"type":5},{"content":"如果是主键就会自动创建索引\n\n注意在连接查询的时候：\n左连接：\nleft左边的表中的数据全都要，所以其中的扫描最好也只能index扫描整个索引树，而left右边的表是取需要的所以只要匹配索引可以更进一步\n\n右连接：\nright右边的表是全都要的，所以加了索引最好的情况也是扫描整个索引树，而左边的表是选择性要的","date":"2021-12-03 16:37:21","docid":3,"fillcolor":"ffffed99","folded":false,"id":372,"markups":[{"date":"2021-12-03 16:51:34","docid":3,"fillcolor":"ffffed99","folded":false,"id":373,"markups":[{"content":"create后面可以选择创建索引的类型（复合，唯一，单值）\n索引名后面可以选择索引的结构（B+tree）\n默认单值，B+tree索引","date":"2021-12-03 16:51:38","docid":3,"fillcolor":"ffffed99","id":374,"originaltext":"语法","page":8,"textblocks":[{"first":[52.35793685913086,296.85595703125,9.754096984863281,12.5],"last":[62.11203384399414,296.85595703125,9.754100799560547,12.5],"length":2,"rects":[[52.35793685913086,296.85595703125,19.508197784423828,12.5]],"start":14,"text":"语法"}],"type":5}],"originaltext":"创建索引","page":8,"textblocks":[{"first":[77.15753936767578,273.345703125,9.754096984863281,12.5],"last":[106.41983795166016,273.345703125,9.754096984863281,12.5],"length":4,"rects":[[77.15753936767578,273.345703125,39.016395568847656,12.5]],"start":8,"text":"创建索引"}],"type":5},{"date":"2021-12-03 17:38:04","docid":3,"fillcolor":"ffffed99","id":375,"originaltext":"查看索引","page":8,"textblocks":[{"first":[77.15753936767578,505.19287109375,9.754096984863281,12.5],"last":[106.41983795166016,505.19287109375,9.754096984863281,12.5],"length":4,"rects":[[77.15753936767578,505.19287109375,39.016395568847656,12.5]],"start":58,"text":"查看索引"}],"type":5},{"date":"2021-12-03 17:40:28","docid":3,"fillcolor":"ffffed99","id":376,"originaltext":"删除索引","page":9,"textblocks":[{"first":[77.15753936767578,238.0310516357422,9.754096984863281,13.5],"last":[106.41983795166016,238.0310516357422,9.754096984863281,13.5],"length":4,"rects":[[77.15753936767578,238.0310516357422,39.016395568847656,13.5]],"start":8,"text":"删除索引"}],"type":5},{"content":"4个对索引的添加\nadd后面选择添加什么类型的索引","date":"2021-12-03 17:39:04","docid":3,"fillcolor":"ffffed99","id":377,"originaltext":"ALTER命令","page":9,"textblocks":[{"first":[77.1626205444336,416.4052734375,6.730323791503906,9.5],"last":[116.50732421875,416.4052734375,9.754096984863281,9.5],"length":7,"rects":[[77.1626205444336,416.4052734375,49.09880065917969,9.5]],"start":67,"text":"ALTER命令"}],"type":5}],"originaltext":" 索引语法","page":7,"textblocks":[{"first":[69.75680541992188,501.94287109375,3.1700820922851562,15.5],"last":[109.49894714355469,501.94287109375,12.192626953125,15.5],"length":5,"rects":[[69.75680541992188,501.94287109375,51.93476867675781,15.5]],"start":232,"text":" 索引语法"}],"type":5},{"content":"对表：表查询次数最多的\n对字段：查询条件次数最多的字段，尽量使用短索引，\n对索引：建立唯一索引，不能创建过多，\n对复合索引：使用最左前缀","date":"2021-12-03 17:40:17","docid":3,"fillcolor":"ffffed99","folded":true,"id":378,"markups":[{"date":"2021-12-03 17:59:15","docid":3,"fillcolor":"ffffed99","id":379,"originaltext":"对查询频次较高，且数据量比较大的表建立索引。","page":9,"textblocks":[{"first":[74.86739349365234,768.80419921875,9.754096984863281,12.5],"last":[279.7034606933594,768.80419921875,9.75408935546875,12.5],"length":22,"rects":[[74.86739349365234,768.80419921875,214.59015655517578,12.5]],"start":149,"text":"对查询频次较高，且数据量比较大的表建立索引。"}],"type":5},{"date":"2021-12-03 17:59:22","docid":3,"fillcolor":"ffffed99","id":380,"originaltext":"索引字段的选择，最佳候选列应当从where子句的条件中提取，如果where子句中的组合比较多，那么应当挑选最常用、过滤效果最好的列的组合。","page":10,"textblocks":[{"first":[74.86739349365234,56.7548828125,9.754096984863281,12.5],"last":[230.93296813964844,71.76123046875,9.754104614257812,12.5],"length":70,"rects":[[74.86739349365234,56.7548828125,466.2820816040039,12.5],[74.86739349365234,71.76123046875,165.8196792602539,12.5]],"start":0,"text":"索引字段的选择，最佳候选列应当从where子句的条件中提取，如果where子句中的组合比较多，那么应当挑\n选最常用、过滤效果最好的列的组合。"}],"type":5},{"date":"2021-12-03 17:59:25","docid":3,"fillcolor":"ffffed99","id":381,"originaltext":"使用唯一索引，区分度越高，使用索引的效率越高。","page":10,"textblocks":[{"first":[74.86739349365234,92.01953125,9.754096984863281,12.5],"last":[289.4575500488281,92.01953125,9.75408935546875,12.5],"length":23,"rects":[[74.86739349365234,92.01953125,224.34424591064453,12.5]],"start":71,"text":"使用唯一索引，区分度越高，使用索引的效率越高。"}],"type":5},{"date":"2021-12-03 17:59:29","docid":3,"fillcolor":"ffffed99","id":382,"originaltext":"索引可以有效的提升查询数据的效率，但索引数量不是多多益善，索引越多，维护索引的代价自然也就水涨船高。对于插入、更新、删除等DML操作比较频繁的表来说，索引过多，会引入相当高的维护代价，降低DML操作的效率，增加相应操作的时间消耗。另外索引过多的话，MySQL也会犯选择困难病，虽然最终仍然会找到一个可用的索引，但无疑提高了选择的代价。","page":10,"textblocks":[{"first":[74.86739349365234,110.52783203125,9.754096984863281,13.5],"last":[289.4575500488281,155.546875,9.75408935546875,13.5],"length":170,"rects":[[74.86739349365234,110.52783203125,458.4426040649414,13.5],[74.86739349365234,125.5341796875,450.16019439697266,13.5],[74.86739349365234,140.54052734375,462.38614654541016,13.5],[74.86739349365234,155.546875,224.34424591064453,13.5]],"start":95,"text":"索引可以有效的提升查询数据的效率，但索引数量不是多多益善，索引越多，维护索引的代价自然也就水涨\n船高。对于插入、更新、删除等DML操作比较频繁的表来说，索引过多，会引入相当高的维护代价，降低\nDML操作的效率，增加相应操作的时间消耗。另外索引过多的话，MySQL也会犯选择困难病，虽然最终仍然\n会找到一个可用的索引，但无疑提高了选择的代价。"}],"type":5},{"date":"2021-12-03 17:59:33","docid":3,"fillcolor":"ffffed99","id":383,"originaltext":"使用短索引，索引创建之后也是使用硬盘来存储的，因此提升索引访问的I/O效率，也可以提升总体的访问效率。假如构成索引的字段总长度比较短，那么在给定大小的存储块内可以存储更多的索引值，相应的可以有效的提升MySQL访问索引的I/O效率。","page":10,"textblocks":[{"first":[74.86739349365234,176.80517578125,9.754096984863281,12.5],"last":[227.7943115234375,206.81787109375,9.754104614257812,12.5],"length":118,"rects":[[74.86739349365234,176.80517578125,462.58621978759766,12.5],[74.86739349365234,191.8115234375,458.4426040649414,12.5],[74.86739349365234,206.81787109375,162.68102264404297,12.5]],"start":266,"text":"使用短索引，索引创建之后也是使用硬盘来存储的，因此提升索引访问的I/O效率，也可以提升总体的访问效\n率。假如构成索引的字段总长度比较短，那么在给定大小的存储块内可以存储更多的索引值，相应的可以有\n效的提升MySQL访问索引的I/O效率。"}],"type":5},{"date":"2021-12-03 17:59:36","docid":3,"fillcolor":"ffffed99","id":384,"originaltext":"利用最左前缀，N个列组合而成的组合索引，那么相当于是创建了N个索引，如果查询时where子句中使用了组成该索引的前几个字段，那么这条查询SQL可以利用组合索引来提升查询效率。","page":10,"textblocks":[{"first":[74.86739349365234,226.0261688232422,9.754096984863281,13.5],"last":[414.76531982421875,241.0325164794922,9.75408935546875,13.5],"length":88,"rects":[[74.86739349365234,226.0261688232422,462.4385757446289,13.5],[74.86739349365234,241.0325164794922,349.65201568603516,13.5]],"start":385,"text":"利用最左前缀，N个列组合而成的组合索引，那么相当于是创建了N个索引，如果查询时where子句中使用了\n组成该索引的前几个字段，那么这条查询SQL可以利用组合索引来提升查询效率。"}],"type":5}],"originaltext":"索引设计原则","page":9,"textblocks":[{"first":[72.92108154296875,704.6278076171875,12.192626953125,15.5],"last":[133.8842010498047,704.6278076171875,12.192626953125,15.5],"length":6,"rects":[[72.92108154296875,704.6278076171875,73.15574645996094,15.5]],"start":82,"text":"索引设计原则"}],"type":5}],"originaltext":" 索引","page":2,"textblocks":[{"first":[64.8822021484375,280.8505859375,3.8041000366210938,17.5],"last":[83.31338500976562,280.8505859375,14.631149291992188,17.5],"length":3,"rects":[[64.8822021484375,280.8505859375,33.06233215332031,17.5]],"start":4,"text":" 索引"}],"type":5},{"content":"对select","date":"2021-12-03 18:07:37","docid":3,"fillcolor":"ffffed99","folded":true,"id":385,"markups":[{"date":"2021-12-03 18:07:43","docid":3,"fillcolor":"ffffed99","folded":false,"id":386,"markups":[{"date":"2021-12-03 18:08:56","docid":3,"fillcolor":"ffffed99","id":387,"originaltext":"视图就是一条SELECT语句执行后返回的结果集","page":10,"textblocks":[{"first":[247.4398956298828,469.87823486328125,9.754104614257812,13.5],"last":[436.3207702636719,469.87823486328125,9.75408935546875,13.5],"length":23,"rects":[[247.4398956298828,469.87823486328125,198.6349639892578,13.5]],"start":564,"text":"视图就是一条SELECT语句执行后返回的结果集"}],"type":5},{"date":"2021-12-03 18:09:56","docid":3,"fillcolor":"ffffed99","folded":false,"id":388,"markups":[{"content":"不用关注那个视图使用了哪些限制条件，只要关注这个结果集也就是视图即可","date":"2021-12-03 18:10:00","docid":3,"fillcolor":"ffffed99","id":389,"originaltext":"简单","page":10,"textblocks":[{"first":[74.86739349365234,530.9541015625,9.754096984863281,12.5],"last":[84.62149047851562,530.9541015625,9.754096984863281,12.5],"length":2,"rects":[[74.86739349365234,530.9541015625,19.508193969726562,12.5]],"start":646,"text":"简单"}],"type":5},{"content":"不会直接看到底层的表，因为底层只能做到看不到某些表而做不到看不到某些列，视图可以做到","date":"2021-12-03 18:10:04","docid":3,"fillcolor":"ffffed99","id":390,"originaltext":"安全","page":10,"textblocks":[{"first":[74.86739349365234,560.966796875,9.754096984863281,12.5],"last":[84.62149047851562,560.966796875,9.754096984863281,12.5],"length":2,"rects":[[74.86739349365234,560.966796875,19.508193969726562,12.5]],"start":706,"text":"安全"}],"type":5},{"date":"2021-12-03 18:10:09","docid":3,"fillcolor":"ffffed99","id":391,"originaltext":"数据独立","page":10,"textblocks":[{"first":[74.86739349365234,590.97900390625,9.754096984863281,12.5],"last":[104.12968444824219,590.97900390625,9.754096984863281,12.5],"length":4,"rects":[[74.86739349365234,590.97900390625,39.016387939453125,12.5]],"start":769,"text":"数据独立"}],"type":5}],"originaltext":"视图相对于普通的表的优势主要包括以下几项。","page":10,"textblocks":[{"first":[52.35793685913086,507.6943359375,9.754096984863281,12.5],"last":[247.4398956298828,507.6943359375,9.754104614257812,12.5],"length":21,"rects":[[52.35793685913086,507.6943359375,204.83606338500977,12.5]],"start":624,"text":"视图相对于普通的表的优势主要包括以下几项。"}],"type":5}],"originaltext":"视图概述","page":10,"textblocks":[{"first":[72.92108154296875,427.41162109375,12.192626953125,15.5],"last":[109.49894714355469,427.41162109375,12.192626953125,15.5],"length":4,"rects":[[72.92108154296875,427.41162109375,48.77049255371094,15.5]],"start":485,"text":"视图概述"}],"type":5},{"date":"2021-12-03 20:56:36","docid":3,"fillcolor":"ffffed99","folded":true,"id":392,"markups":[{"date":"2021-12-03 21:03:16","docid":3,"fillcolor":"ffffed99","id":393,"originaltext":"创建视图的语法为：","page":10,"textblocks":[{"first":[52.35793685913086,657.0068359375,9.754096984863281,12.5],"last":[130.39071655273438,657.0068359375,9.754104614257812,12.5],"length":9,"rects":[[52.35793685913086,657.0068359375,87.78688430786133,12.5]],"start":862,"text":"创建视图的语法为："}],"type":5},{"date":"2021-12-03 21:03:26","docid":3,"fillcolor":"ffffed99","id":394,"originaltext":"修改视图的语法为：","page":11,"textblocks":[{"first":[52.35793685913086,173.55419921875,9.754096984863281,13.5],"last":[130.39071655273438,173.55419921875,9.754104614257812,13.5],"length":9,"rects":[[52.35793685913086,173.55419921875,87.78688430786133,13.5]],"start":0,"text":"修改视图的语法为："}],"type":5}],"originaltext":"创建或者修改视图","page":10,"textblocks":[{"first":[72.92108154296875,630.24658203125,12.192626953125,15.5],"last":[158.26943969726562,630.24658203125,12.192626953125,15.5],"length":8,"rects":[[72.92108154296875,630.24658203125,97.54098510742188,15.5]],"start":852,"text":"创建或者修改视图"}],"type":5},{"content":"可以使用show tables；的方式查看视图","date":"2021-12-03 21:04:24","docid":3,"fillcolor":"ffffed99","folded":false,"id":395,"markups":[{"date":"2021-12-03 21:05:42","docid":3,"fillcolor":"ffffed99","id":396,"originaltext":"SHOW TABLE STATUS","page":12,"textblocks":[{"first":[113.41859436035156,208.0183563232422,5.355003356933594,13.5],"last":[203.31539916992188,208.0183563232422,5.3549957275390625,13.5],"length":17,"rects":[[113.41859436035156,208.0183563232422,95.25180053710938,13.5]],"start":7,"text":"SHOW TABLE STATUS"}],"type":5},{"date":"2021-12-03 21:05:57","docid":3,"fillcolor":"ffffed99","id":397,"originaltext":"SHOW CREATE VIEW ","page":12,"textblocks":[{"first":[230.4677734375,435.6640625,5.3549957275390625,12.5],"last":[321.5138854980469,435.6640625,2.53607177734375,12.5],"length":17,"rects":[[230.4677734375,435.6640625,93.58218383789062,12.5]],"start":75,"text":"SHOW CREATE VIEW "}],"type":5}],"originaltext":"查看视图","page":11,"textblocks":[{"first":[72.92108154296875,652.755859375,12.192626953125,14.5],"last":[109.49894714355469,652.755859375,12.192626953125,14.5],"length":4,"rects":[[72.92108154296875,652.755859375,48.77049255371094,14.5]],"start":62,"text":"查看视图"}],"type":5},{"date":"2021-12-03 21:06:56","docid":3,"fillcolor":"ffffed99","id":398,"originaltext":" 删除视图","page":12,"textblocks":[{"first":[69.75680541992188,558.966796875,3.1700820922851562,15.5],"last":[109.49894714355469,558.966796875,12.192626953125,15.5],"length":5,"rects":[[69.75680541992188,558.966796875,51.93476867675781,15.5]],"start":104,"text":" 删除视图"}],"type":5}],"originaltext":"视图","page":10,"textblocks":[{"first":[68.68223571777344,399.900390625,14.631149291992188,17.5],"last":[83.31338500976562,399.900390625,14.631149291992188,17.5],"length":2,"rects":[[68.68223571777344,399.900390625,29.262298583984375,17.5]],"start":477,"text":"视图"}],"type":5},{"content":"对函数","date":"2021-12-03 21:56:47","docid":3,"fillcolor":"ffffed99","folded":true,"id":399,"markups":[{"date":"2021-12-03 21:56:54","docid":3,"fillcolor":"ffffed99","folded":true,"id":400,"markups":[{"date":"2021-12-03 21:57:15","docid":3,"fillcolor":"ffffed99","id":401,"originaltext":"存储过程和函数是 事先经过编译并存储在数据库中的一段 SQL 语句的集合","page":13,"textblocks":[{"first":[54.89025115966797,56.7548828125,9.754096984863281,12.5],"last":[363.3716735839844,56.7548828125,9.75408935546875,12.5],"length":36,"rects":[[54.89025115966797,56.7548828125,318.23551177978516,12.5]],"start":1,"text":"存储过程和函数是 事先经过编译并存储在数据库中的一段 SQL 语句的集合"}],"type":5},{"date":"2021-12-03 21:57:43","docid":3,"fillcolor":"ffffed99","id":402,"originaltext":"存储过程和函数的区别在于函数必须有返回值，而存储过程没有。","page":13,"textblocks":[{"first":[52.35793685913086,93.97050476074219,9.754096984863281,13.5],"last":[325.4726867675781,93.97050476074219,9.75408935546875,13.5],"length":29,"rects":[[52.35793685913086,93.97050476074219,282.868839263916,13.5]],"start":102,"text":"存储过程和函数的区别在于函数必须有返回值，而存储过程没有。"}],"type":5},{"date":"2021-12-03 21:57:46","docid":3,"fillcolor":"ffffed99","id":403,"originaltext":"函数 ： 是一个有返回值的过程 ；","page":13,"textblocks":[{"first":[54.89025115966797,117.23027038574219,9.754096984863281,13.5],"last":[189.29486083984375,117.23027038574219,9.754104614257812,13.5],"length":17,"rects":[[54.89025115966797,117.23027038574219,144.1587142944336,13.5]],"start":133,"text":"函数 ： 是一个有返回值的过程 ；"}],"type":5},{"date":"2021-12-03 21:57:48","docid":3,"fillcolor":"ffffed99","id":404,"originaltext":"过程 ： 是一个没有返回值的函数 ；","page":13,"textblocks":[{"first":[54.89025115966797,140.0400390625,9.754096984863281,12.5],"last":[199.04896545410156,140.0400390625,9.754104614257812,12.5],"length":18,"rects":[[54.89025115966797,140.0400390625,153.9128189086914,12.5]],"start":152,"text":"过程 ： 是一个没有返回值的函数 ；"}],"type":5}],"originaltext":"存储过程和函数概述","page":12,"textblocks":[{"first":[72.92108154296875,766.0537109375,12.192626953125,15.5],"last":[170.46206665039062,766.0537109375,12.192626953125,15.5],"length":9,"rects":[[72.92108154296875,766.0537109375,109.73361206054688,15.5]],"start":163,"text":"存储过程和函数概述"}],"type":5},{"content":"存储过程的创建要配合dilimiter命令使用，来修改结束符号。\n","date":"2021-12-03 21:57:57","docid":3,"fillcolor":"ffffed99","folded":true,"id":405,"markups":[{"date":"2021-12-03 22:02:14","docid":3,"fillcolor":"ffffed99","id":406,"originaltext":"DELIMITER","page":13,"textblocks":[{"first":[52.35793685913086,496.689453125,7.110736846923828,10.5],"last":[95.0223617553711,496.689453125,6.0280303955078125,10.5],"length":9,"rects":[[52.35793685913086,496.689453125,48.69245529174805,10.5]],"start":198,"text":"DELIMITER"}],"type":5}],"originaltext":"创建存储过程","page":13,"textblocks":[{"first":[72.92108154296875,164.30078125,12.192626953125,15.5],"last":[133.8842010498047,164.30078125,12.192626953125,15.5],"length":6,"rects":[[72.92108154296875,164.30078125,73.15574645996094,15.5]],"start":175,"text":"创建存储过程"}],"type":5},{"content":"用call即可","date":"2021-12-03 22:07:06","docid":3,"fillcolor":"ffffed99","id":407,"originaltext":"调用存储过程","page":13,"textblocks":[{"first":[72.92108154296875,595.7314453125,12.192626953125,14.5],"last":[133.8842010498047,595.7314453125,12.192626953125,14.5],"length":6,"rects":[[72.92108154296875,595.7314453125,73.15574645996094,14.5]],"start":337,"text":"调用存储过程"}],"type":5},{"date":"2021-12-03 22:07:19","docid":3,"fillcolor":"ffffed99","id":408,"originaltext":"查看存储过程","page":13,"textblocks":[{"first":[72.92108154296875,660.2587890625,12.192626953125,15.5],"last":[133.8842010498047,660.2587890625,12.192626953125,15.5],"length":6,"rects":[[72.92108154296875,660.2587890625,73.15574645996094,15.5]],"start":349,"text":"查看存储过程"}],"type":5},{"date":"2021-12-03 22:12:49","docid":3,"fillcolor":"ffffed99","id":409,"originaltext":" 删除存储过程","page":14,"textblocks":[{"first":[69.75680541992188,213.572265625,3.1700820922851562,15.5],"last":[133.8842010498047,213.572265625,12.192626953125,15.5],"length":7,"rects":[[69.75680541992188,213.572265625,76.32002258300781,15.5]],"start":3,"text":" 删除存储过程"}],"type":5},{"date":"2021-12-03 22:19:45","docid":3,"fillcolor":"ffffed99","folded":true,"id":410,"markups":[{"date":"2021-12-03 22:28:01","docid":3,"fillcolor":"ffffed99","folded":false,"id":411,"markups":[{"date":"2021-12-03 22:31:04","docid":3,"fillcolor":"ffffed99","id":412,"originaltext":"SET","page":14,"textblocks":[{"first":[74.86739349365234,659.5078125,5.355003356933594,9.5],"last":[85.64567565917969,659.5078125,5.394012451171875,9.5],"length":3,"rects":[[74.86739349365234,659.5078125,16.17229461669922,9.5]],"start":139,"text":"SET"}],"type":5},{"date":"2021-12-03 22:31:10","docid":3,"fillcolor":"ffffed99","id":413,"originaltext":"select ... into","page":15,"textblocks":[{"first":[101.12842559814453,237.2800750732422,4.652702331542969,13.5],"last":[152.03506469726562,237.2800750732422,5.8914794921875,13.5],"length":15,"rects":[[101.12842559814453,237.2800750732422,56.798118591308594,13.5]],"start":7,"text":"select ... into"}],"type":5}],"originaltext":" 变量","page":14,"textblocks":[{"first":[74.62655639648438,355.1298828125,2.5360641479492188,12.5],"last":[86.91163635253906,355.1298828125,9.754096984863281,12.5],"length":3,"rects":[[74.62655639648438,355.1298828125,22.03917694091797,12.5]],"start":71,"text":" 变量"}],"type":5},{"date":"2021-12-03 22:52:26","docid":3,"fillcolor":"ffffed99","id":414,"originaltext":"if条件判断","page":15,"textblocks":[{"first":[77.1626205444336,447.16796875,2.9749984741210938,10.5],"last":[113.17340850830078,447.16796875,9.754096984863281,10.5],"length":6,"rects":[[77.1626205444336,447.16796875,45.76488494873047,10.5]],"start":42,"text":"if条件判断"}],"type":5},{"date":"2021-12-03 22:53:31","docid":3,"fillcolor":"ffffed99","folded":false,"id":415,"markups":[{"date":"2021-12-03 23:10:00","docid":3,"fillcolor":"ffffed99","id":416,"originaltext":"语法格式 :","page":16,"textblocks":[{"first":[52.35793685913086,509.9453125,9.754096984863281,12.5],"last":[93.91039276123047,509.9453125,2.5945892333984375,12.5],"length":6,"rects":[[52.35793685913086,509.9453125,44.14704513549805,12.5]],"start":22,"text":"语法格式 :"}],"type":5},{"date":"2021-12-03 22:53:39","docid":3,"fillcolor":"ffffed99","id":417,"originaltext":"IN - 输入","page":16,"textblocks":[{"first":[52.35793685913086,655.005859375,3.228607177734375,10.5],"last":[81.47734832763672,655.005859375,9.754096984863281,10.5],"length":7,"rects":[[52.35793685913086,655.005859375,38.87350845336914,10.5]],"start":29,"text":"IN - 输入"}],"type":5},{"date":"2021-12-03 22:53:43","docid":3,"fillcolor":"ffffed99","id":418,"originaltext":"OUT-输出","page":17,"textblocks":[{"first":[52.35793685913086,312.861328125,7.764263153076172,10.5],"last":[85.6447525024414,312.861328125,9.754096984863281,10.5],"length":6,"rects":[[52.35793685913086,312.861328125,43.04091262817383,10.5]],"start":2,"text":"OUT-输出"}],"type":5},{"date":"2021-12-03 23:18:29","docid":3,"fillcolor":"ffffed99","id":419,"originaltext":"@description : 这种变量要在变量名称前面加上“@”符号，叫做用户会话变量，代表整个会话过程他都是有作用的，这个类似于全局变量一样。","page":17,"textblocks":[{"first":[52.35793685913086,694.1724853515625,8.768932342529297,14.5],"last":[179.1612091064453,709.9793090820312,9.754104614257812,13.5],"length":73,"rects":[[52.35793685913086,694.1724853515625,473.1495704650879,14.5],[52.35793685913086,709.9793090820312,136.55737686157227,13.5]],"start":27,"text":"@description : 这种变量要在变量名称前面加上“@”符号，叫做用户会话变量，代表整个会话过程他都是有作用\n的，这个类似于全局变量一样。"}],"type":5}],"originaltext":"传递参数","page":16,"textblocks":[{"first":[77.15753936767578,485.935546875,9.754096984863281,12.5],"last":[106.41983795166016,485.935546875,9.754096984863281,12.5],"length":4,"rects":[[77.15753936767578,485.935546875,39.016395568847656,12.5]],"start":16,"text":"传递参数"}],"type":5},{"date":"2021-12-03 22:53:49","docid":3,"fillcolor":"ffffed99","id":420,"originaltext":"case结构","page":18,"textblocks":[{"first":[77.1626205444336,56.5048828125,5.013603210449219,12.5],"last":[108.4297103881836,56.5048828125,9.754096984863281,12.5],"length":6,"rects":[[77.1626205444336,56.5048828125,41.02118682861328,12.5]],"start":6,"text":"case结构"}],"type":5},{"date":"2021-12-03 23:18:40","docid":3,"fillcolor":"ffffed99","id":421,"originaltext":"while循环","page":19,"textblocks":[{"first":[77.1626205444336,192.3115234375,8.349510192871094,12.5],"last":[113.38772583007812,192.3115234375,9.754096984863281,12.5],"length":7,"rects":[[77.1626205444336,192.3115234375,45.97920227050781,12.5]],"start":8,"text":"while循环"}],"type":5}],"originaltext":"语法","page":14,"textblocks":[{"first":[72.92108154296875,304.859375,12.192626953125,12.5],"last":[85.11370086669922,304.859375,12.192619323730469,12.5],"length":2,"rects":[[72.92108154296875,304.859375,24.385238647460938,12.5]],"start":18,"text":"语法"}],"type":5},{"date":"2021-12-04 18:11:52","docid":3,"fillcolor":"ffffed99","id":422,"originaltext":"存储函数","page":23,"textblocks":[{"first":[72.92108154296875,481.68359375,12.192626953125,14.5],"last":[109.49894714355469,481.68359375,12.192626953125,14.5],"length":4,"rects":[[72.92108154296875,481.68359375,48.77049255371094,14.5]],"start":26,"text":"存储函数"}],"type":5}],"originaltext":"存储过程和函数","page":12,"textblocks":[{"first":[68.68223571777344,737.04296875,14.631149291992188,17.5],"last":[156.4691162109375,737.04296875,14.631149291992188,17.5],"length":7,"rects":[[68.68223571777344,737.04296875,102.41802978515625,17.5]],"start":150,"text":"存储过程和函数"}],"type":5},{"content":"对表","date":"2021-12-04 18:13:25","docid":3,"fillcolor":"ffffed99","folded":true,"id":423,"markups":[{"date":"2021-12-04 18:17:26","docid":3,"fillcolor":"ffffed99","folded":true,"id":424,"markups":[{"date":"2021-12-04 18:17:16","docid":3,"fillcolor":"ffffed99","id":425,"originaltext":"触发器是与表有关的数据库对象，指在 insert/update/delete 之前或之后，触发并执行触发器中定义的SQL语句集合。","page":24,"textblocks":[{"first":[52.35793685913086,338.875,9.754096984863281,12.5],"last":[62.11203384399414,353.880859375,9.754100799560547,12.5],"length":66,"rects":[[52.35793685913086,338.875,487.49057388305664,12.5],[52.35793685913086,353.880859375,19.508197784423828,12.5]],"start":143,"text":"触发器是与表有关的数据库对象，指在 insert/update/delete 之前或之后，触发并执行触发器中定义的SQL语句集\n合。"}],"type":5},{"date":"2021-12-04 18:27:48","docid":3,"fillcolor":"ffffed99","folded":false,"id":426,"markups":[{"content":"行记录变量","date":"2021-12-04 18:29:38","docid":3,"fillcolor":"ffffed99","id":427,"originaltext":"OLD 和 NEW 来引用触发器","page":24,"textblocks":[{"first":[93.91039276123047,375.390625,7.598442077636719,13.5],"last":[201.61277770996094,375.390625,9.754104614257812,13.5],"length":16,"rects":[[93.91039276123047,375.390625,117.45648956298828,13.5]],"start":261,"text":"OLD 和 NEW 来引用触发器"}],"type":5}],"originaltext":"触发器类型NEW 和 OLD的使用INSERT 型触发器NEW 表示将要或者已经新增的数据UPDATE 型触发器OLD 表示修改之前的数据 , NEW 表示将要或已经修改后的数据DELETE 型触发器OLD 表示将要或者已经删除的数据","page":24,"textblocks":[{"first":[62.86235046386719,423.66015625,9.754096984863281,12.5],"last":[326.0174560546875,497.94140625,9.75408935546875,12.5],"length":120,"rects":[[62.86235046386719,423.66015625,211.20310974121094,12.5],[62.86235046386719,448.11993408203125,274.9476776123047,13.5],[62.86235046386719,472.87969970703125,392.49693298339844,13.5],[62.86235046386719,497.94140625,272.90919494628906,12.5]],"start":0,"text":"触发器类型NEW 和 OLD的使用\nINSERT 型触发器NEW 表示将要或者已经新增的数据\nUPDATE 型触发器OLD 表示修改之前的数据 , NEW 表示将要或已经修改后的数据\nDELETE 型触发器OLD 表示将要或者已经删除的数据"}],"title":"触发器类型","type":5},{"date":"2021-12-04 18:35:19","docid":3,"fillcolor":"ffffed99","id":428,"originaltext":"现在触发器还只支持行级触发，不支持语句级触发。","page":24,"textblocks":[{"first":[445.4652404785156,375.390625,9.75408935546875,13.5],"last":[179.1612091064453,390.396484375,9.754104614257812,13.5],"length":24,"rects":[[445.4652404785156,375.390625,87.78689575195312,13.5],[52.35793685913086,390.396484375,136.55737686157227,13.5]],"start":301,"text":"现在触发器还只支持\n行级触发，不支持语句级触发。"}],"type":5}],"originaltext":"介绍","page":24,"textblocks":[{"first":[72.92108154296875,313.11328125,12.192626953125,12.5],"last":[85.11370086669922,313.11328125,12.192619323730469,12.5],"length":2,"rects":[[72.92108154296875,313.11328125,24.385238647460938,12.5]],"start":139,"text":"介绍"}],"type":5},{"date":"2021-12-04 18:33:36","docid":3,"fillcolor":"ffffed99","folded":true,"id":429,"markups":[{"date":"2021-12-04 18:33:45","docid":3,"fillcolor":"ffffed99","id":430,"originaltext":"语法结构 :","page":24,"textblocks":[{"first":[52.35793685913086,581.2265625,9.754096984863281,13.5],"last":[93.91039276123047,581.2265625,2.5945892333984375,13.5],"length":6,"rects":[[52.35793685913086,581.2265625,44.14704513549805,13.5]],"start":339,"text":"语法结构 :"}],"type":5}],"originaltext":"创建触发器","page":24,"textblocks":[{"first":[72.92108154296875,553.46484375,12.192626953125,15.5],"last":[121.69157409667969,553.46484375,12.192626953125,15.5],"length":5,"rects":[[72.92108154296875,553.46484375,60.96311950683594,15.5]],"start":332,"text":"创建触发器"}],"type":5},{"date":"2021-12-04 18:41:17","docid":3,"fillcolor":"ffffed99","id":431,"originaltext":"删除触发器","page":26,"textblocks":[{"first":[72.92108154296875,697.525390625,12.192626953125,15.5],"last":[121.69157409667969,697.525390625,12.192626953125,15.5],"length":5,"rects":[[72.92108154296875,697.525390625,60.96311950683594,15.5]],"start":44,"text":"删除触发器"}],"type":5},{"date":"2021-12-04 18:41:24","docid":3,"fillcolor":"ffffed99","id":432,"originaltext":"查看触发器","page":27,"textblocks":[{"first":[72.92108154296875,81.015625,12.192626953125,15.5],"last":[121.69157409667969,81.015625,12.192626953125,15.5],"length":5,"rects":[[72.92108154296875,81.015625,60.96311950683594,15.5]],"start":34,"text":"查看触发器"}],"type":5}],"originaltext":"触发器","page":24,"textblocks":[{"first":[68.68223571777344,283.1015625,14.631149291992188,17.5],"last":[97.94453430175781,283.1015625,14.631149291992188,17.5],"length":3,"rects":[[68.68223571777344,283.1015625,43.89344787597656,17.5]],"start":130,"text":"触发器"}],"type":5}],"page":-1,"title":"Mysql高级-day01","type":7},{"date":"2021-12-13 16:33:43","folded":false,"id":187,"linecolor":"ffcccedb","markups":[{"date":"2021-12-04 20:15:41","docid":2,"fillcolor":"ffffed99","folded":true,"id":188,"markups":[{"content":"认证授权操作","date":"2021-12-04 21:23:12","docid":2,"fillcolor":"ffffed99","id":189,"originaltext":"Connection Pool : 连接池组件","page":0,"textblocks":[{"first":[74.86739349365234,491.6866149902344,6.154838562011719,9.5],"last":[196.1268310546875,491.6866149902344,9.754104614257812,9.5],"length":23,"rects":[[74.86739349365234,491.6866149902344,131.01354217529297,9.5]],"start":52,"text":"Connection Pool : 连接池组件"}],"type":5},{"content":"数据的备份以及恢复，和系统的配置","date":"2021-12-04 20:15:36","docid":2,"fillcolor":"ffffed99","id":190,"originaltext":"Management Services & Utilities : 管理服务和工具组件","page":0,"textblocks":[{"first":[74.86739349365234,504.3929443359375,8.807952880859375,13.5],"last":[306.63201904296875,504.3929443359375,9.75408935546875,13.5],"length":43,"rects":[[74.86739349365234,504.3929443359375,241.51871490478516,13.5]],"start":76,"text":"Management Services & Utilities : 管理服务和工具组件"}],"type":5},{"content":"封装DDL，DML语句，存储过程以及函数或者视图等","date":"2021-12-04 20:16:28","docid":2,"fillcolor":"ffffed99","id":191,"originaltext":"SQL Interface : SQL接口组件","page":0,"textblocks":[{"first":[74.86739349365234,520.19921875,5.355003356933594,12.5],"last":[190.80209350585938,520.19921875,9.754104614257812,12.5],"length":23,"rects":[[74.86739349365234,520.19921875,125.68880462646484,12.5]],"start":120,"text":"SQL Interface : SQL接口组件"}],"type":5},{"content":"对请求进行解析","date":"2021-12-04 20:46:48","docid":2,"fillcolor":"ffffed99","id":192,"originaltext":"Parser : 查询分析器组件","page":0,"textblocks":[{"first":[74.86739349365234,534.70556640625,5.8719635009765625,12.5],"last":[170.4413604736328,534.70556640625,9.754104614257812,12.5],"length":16,"rects":[[74.86739349365234,534.70556640625,105.32807159423828,12.5]],"start":144,"text":"Parser : 查询分析器组件"}],"type":5},{"content":"使用优化器对mysql语句进行优化","date":"2021-12-04 20:47:01","docid":2,"fillcolor":"ffffed99","id":193,"originaltext":"Optimizer : 优化器组件","page":0,"textblocks":[{"first":[74.86739349365234,549.411865234375,7.598442077636719,13.5],"last":[166.5883026123047,549.411865234375,9.754104614257812,13.5],"length":17,"rects":[[74.86739349365234,549.411865234375,101.47501373291016,13.5]],"start":161,"text":"Optimizer : 优化器组件"}],"type":5},{"content":"根据语句看看缓冲有没有结果","date":"2021-12-04 20:47:04","docid":2,"fillcolor":"ffffed99","id":194,"originaltext":"Caches & Buffers : 缓冲池组件","page":0,"textblocks":[{"first":[74.86739349365234,564.531982421875,6.154838562011719,13.357666015625],"last":[199.09878540039062,564.531982421875,9.754104614257812,13.357666015625],"length":24,"rects":[[74.86739349365234,564.531982421875,133.9854965209961,13.357666015625]],"start":179,"text":"Caches & Buffers : 缓冲池组件"}],"type":5},{"content":"存储不同的数据需要使用不同的存储引擎","date":"2021-12-04 20:47:06","docid":2,"fillcolor":"ffffed99","id":195,"originaltext":"Pluggable Storage Engines : 存储引擎","page":0,"textblocks":[{"first":[74.86739349365234,579.4244995117188,5.8719635009765625,13.5],"last":[231.266357421875,579.4244995117188,9.754104614257812,13.5],"length":32,"rects":[[74.86739349365234,579.4244995117188,166.15306854248047,13.5]],"start":204,"text":"Pluggable Storage Engines : 存储引擎"}],"type":5},{"content":"日志，索引和表都存储在这","date":"2021-12-04 20:47:08","docid":2,"fillcolor":"ffffed99","id":196,"originaltext":"File System : 文件系统","page":0,"textblocks":[{"first":[74.86739349365234,594.4307861328125,5.033111572265625,13.5],"last":[162.67808532714844,594.4307861328125,9.754104614257812,13.5],"length":18,"rects":[[74.86739349365234,594.4307861328125,97.5647964477539,13.5]],"start":237,"text":"File System : 文件系统"}],"type":5},{"date":"2021-12-04 21:26:32","docid":2,"fillcolor":"ffffed99","folded":true,"id":197,"markups":[{"date":"2021-12-04 21:27:24","docid":2,"fillcolor":"ffffed99","id":198,"originaltext":"主要完成一些类似于连接处理、授权认证、及相关的安全方案。在该层上引入了线程池的概念，为通过认证安全接入的客户端提供线程。","page":0,"textblocks":[{"first":[71.86613464355469,678.0157470703125,9.754096984863281,12.5],"last":[159.65301513671875,693.0220336914062,9.754104614257812,12.5],"length":61,"rects":[[71.86613464355469,678.0157470703125,468.1967315673828,12.5],[52.35793685913086,693.0220336914062,117.0491828918457,12.5]],"start":324,"text":"主要完成一些类似于连接处理、授权认证、及相关的安全方案。在该层上引入了线程池的概念，为通过认证安\n全接入的客户端提供线程。"}],"type":5}],"originaltext":"连接层","page":0,"textblocks":[{"first":[70.22298431396484,640.2000122070312,9.754096984863281,13.5],"last":[89.73118591308594,640.2000122070312,9.754096984863281,13.5],"length":3,"rects":[[70.22298431396484,640.2000122070312,29.262298583984375,13.5]],"start":261,"text":"连接层"}],"type":5},{"date":"2021-12-04 21:26:30","docid":2,"fillcolor":"ffffed99","folded":true,"id":199,"markups":[{"date":"2021-12-04 21:29:29","docid":2,"fillcolor":"ffffed99","id":200,"originaltext":"跨存储引擎的功能也在这一层实现","page":1,"textblocks":[{"first":[110.88252258300781,71.76104736328125,9.754096984863281,12.5],"last":[247.4398956298828,71.76104736328125,9.754104614257812,12.5],"length":15,"rects":[[110.88252258300781,71.76104736328125,146.3114776611328,12.5]],"start":59,"text":"跨存储引擎的功能也在这一层实现"}],"type":5}],"originaltext":"服务层","page":0,"textblocks":[{"first":[70.22298431396484,730.9881591796875,9.754096984863281,13.5],"last":[89.73118591308594,730.9881591796875,9.754096984863281,13.5],"length":3,"rects":[[70.22298431396484,730.9881591796875,29.262298583984375,13.5]],"start":439,"text":"服务层"}],"type":5},{"content":"这是与其他数据最大的不同，插件式的存储引擎","date":"2021-12-04 21:25:53","docid":2,"fillcolor":"ffffed99","folded":true,"id":201,"markups":[{"date":"2021-12-04 21:31:34","docid":2,"fillcolor":"ffffed99","id":202,"originaltext":"存储引擎真正的负责了MySQL中数据的存储和提取","page":1,"textblocks":[{"first":[113.41630554199219,161.5491943359375,9.754096984863281,13.5],"last":[320.7242431640625,161.5491943359375,9.75408935546875,13.5],"length":24,"rects":[[113.41630554199219,161.5491943359375,217.06202697753906,13.5]],"start":230,"text":"存储引擎真正的负责了MySQL中数据的存储和提取"}],"type":5}],"originaltext":" 引擎层","page":1,"textblocks":[{"first":[67.689208984375,140.2894287109375,2.5360641479492188,12.5],"last":[89.73118591308594,140.2894287109375,9.754096984863281,12.5],"length":4,"rects":[[67.689208984375,140.2894287109375,31.79607391357422,12.5]],"start":218,"text":" 引擎层"}],"type":5},{"date":"2021-12-04 21:26:27","docid":2,"fillcolor":"ffffed99","folded":true,"id":203,"markups":[{"date":"2021-12-04 21:31:59","docid":2,"fillcolor":"ffffed99","id":204,"originaltext":"将数据存储在文件系统之上，并完成与存储引擎的交互","page":1,"textblocks":[{"first":[142.67860412597656,223.32470703125,9.754104614257812,12.5],"last":[367.0228576660156,223.32470703125,9.75408935546875,12.5],"length":24,"rects":[[142.67860412597656,223.32470703125,234.0983428955078,12.5]],"start":331,"text":"将数据存储在文件系统之上，并完成与存储引擎的交互"}],"type":5}],"originaltext":"存储层","page":1,"textblocks":[{"first":[67.689208984375,201.06494140625,9.754096984863281,12.5],"last":[87.19740295410156,201.06494140625,9.754096984863281,12.5],"length":3,"rects":[[67.689208984375,201.06494140625,29.262290954589844,12.5]],"start":317,"text":"存储层"}],"type":5}],"originaltext":" Mysql的体系结构概览","page":0,"textblocks":[{"first":[64.8822021484375,133.4390869140625,3.8041000366210938,19.5],"last":[199.5838623046875,133.4390869140625,14.631149291992188,19.5],"length":13,"rects":[[64.8822021484375,133.4390869140625,149.3328094482422,19.5]],"start":17,"text":" Mysql的体系结构概览"}],"type":5},{"date":"2021-12-04 21:37:34","docid":2,"fillcolor":"ffffed99","folded":true,"id":205,"markups":[{"date":"2021-12-04 21:49:41","docid":2,"fillcolor":"ffffed99","folded":true,"id":206,"markups":[{"content":"不同的表可以有不同的存储引擎","date":"2021-12-04 21:49:53","docid":2,"fillcolor":"ffffed99","id":207,"originaltext":"存储引擎就是存储数据，建立索引，更新查询数据等等技术的实现方式 。存储引擎是基于表的，而不是基于库的。所以存储引擎也可被称为表类型。","page":1,"textblocks":[{"first":[52.35793685913086,425.15948486328125,9.754096984863281,12.5],"last":[188.91531372070312,440.16583251953125,9.754104614257812,13.5],"length":67,"rects":[[52.35793685913086,425.15948486328125,490.2386817932129,12.5],[52.35793685913086,440.16583251953125,146.31148147583008,13.5]],"start":557,"text":"存储引擎就是存储数据，建立索引，更新查询数据等等技术的实现方式 。存储引擎是基于表的，而不是基于库的。\n所以存储引擎也可被称为表类型。"}],"type":5}],"originaltext":"存储引擎概述","page":1,"textblocks":[{"first":[72.92108154296875,375.88970947265625,12.192626953125,15.5],"last":[133.8842010498047,375.88970947265625,12.192626953125,15.5],"length":6,"rects":[[72.92108154296875,375.88970947265625,73.15574645996094,15.5]],"start":497,"text":"存储引擎概述"}],"type":5},{"date":"2021-12-04 21:59:46","docid":2,"fillcolor":"ffffed99","folded":true,"id":208,"markups":[{"date":"2021-12-04 22:00:17","docid":2,"fillcolor":"ffffed99","folded":false,"id":209,"markups":[{"content":"只有提交事务，才能更新数据库中的数据","date":"2021-12-04 22:00:38","docid":2,"fillcolor":"ffffed99","id":210,"originaltext":"事务控制","page":2,"textblocks":[{"first":[52.35793685913086,749.2957763671875,9.754096984863281,12.5],"last":[81.62023162841797,749.2957763671875,9.754096984863281,12.5],"length":4,"rects":[[52.35793685913086,749.2957763671875,39.01639175415039,12.5]],"start":494,"text":"事务控制"}],"type":5},{"content":"InnoDB唯一支持外键的引擎","date":"2021-12-04 22:03:22","docid":2,"fillcolor":"ffffed99","folded":true,"id":211,"markups":[{"date":"2021-12-04 22:11:51","docid":2,"fillcolor":"ffffed99","id":212,"originaltext":"包括 RESTRICT、CASCADE、SET NULL和 NO ACTION。","page":4,"textblocks":[{"first":[367.0228576660156,86.767333984375,9.75408935546875,12.5],"last":[117.3265151977539,102.773681640625,9.754096984863281,10.5],"length":41,"rects":[[367.0228576660156,86.767333984375,169.88247680664062,12.5],[52.35793685913086,102.773681640625,74.72267532348633,10.5]],"start":33,"text":"包括 RESTRICT、CASCADE、SET NULL\n和 NO ACTION。"}],"type":5},{"content":"1.首先明确一个概念，假如表A（id，name，foreign_id），表B（foreign_id,name），我们说表A参考了表B的主键作为其外键使用，所以B表示父表，A表是子表\n2.删除和更新有四种设置方式\n（1）cascade：级联，当父表更新、删除，子表会同步更新和删除\n（2）set null：置空，当父表更新、删除的时候，字表会把外键字段变为null，所以这个时候设计表的时候该字段要允许为null，否则会出错\n（3）restrict：父表在删除和更新记录的时候，要在子表中检查是否有有关该父表要更新和删除的记录，如果有，则不允许删除个更改\n（4）no action：和restrict一样\n","date":"2021-12-04 22:10:59","docid":2,"fillcolor":"ffffed99","id":213,"originaltext":"子表的外键指定是ON DELETE RESTRICT ON UPDATE CASCADE 方式的， 那么在主表删除记录的时候， 如果子表有对应记录， 则不允许删除， 主表在更新记录的时候， 如果子表有对应记录， 则子表对应更新 。","page":4,"textblocks":[{"first":[162.18679809570312,194.312255859375,9.754104614257812,10.5],"last":[93.90811157226562,223.32470703125,9.754096984863281,12.5],"length":117,"rects":[[162.18679809570312,194.312255859375,378.2998962402344,10.5],[52.35793685913086,208.0183563232422,480.86557388305664,13.5],[52.35793685913086,223.32470703125,51.30427169799805,12.5]],"start":214,"text":"子表的外键指定是ON DELETE RESTRICT ON UPDATE CASCADE 方式的， 那么在主表删\n除记录的时候， 如果子表有对应记录， 则不允许删除， 主表在更新记录的时候， 如果子表有对应记录， 则子表\n对应更新 。"}],"type":5},{"content":"CONSTRAINT fk_emp_dept1 \nFOREIGN KEY(deptId) REFERENCES tb_dept1(id)","date":"2021-12-05 16:22:51","docid":2,"fillcolor":"ffffed99","id":214,"originaltext":"CONSTRAINT `fk_city_country` FOREIGN KEY(country_id) REFERENCES country_innodb(country_id) ON DELETE RESTRICT ON UPDATE CASCADE","page":3,"textblocks":[{"first":[107.28010559082031,654.5774536132812,5.293548583984375,8.7786865234375],"last":[414.0363464355469,668.0833129882812,5.293548583984375,8.7786865234375],"length":128,"rects":[[107.28010559082031,654.5774536132812,338.5305633544922,8.7786865234375],[86.12212371826172,668.0833129882812,333.20777130126953,8.7786865234375]],"start":859,"text":"CONSTRAINT `fk_city_country` FOREIGN KEY(country_id) REFERENCES \ncountry_innodb(country_id) ON DELETE RESTRICT ON UPDATE CASCADE"}],"type":5}],"originaltext":"外键约束","page":3,"textblocks":[{"first":[52.35793685913086,368.885986328125,9.754096984863281,12.5],"last":[81.62023162841797,368.885986328125,9.754096984863281,12.5],"length":4,"rects":[[52.35793685913086,368.885986328125,39.01639175415039,12.5]],"start":24,"text":"外键约束"}],"type":5},{"date":"2021-12-04 22:12:55","docid":2,"fillcolor":"ffffed99","folded":true,"id":215,"markups":[{"date":"2021-12-04 22:20:52","docid":2,"fillcolor":"ffffed99","id":216,"markups":[{"date":"2021-12-04 22:20:57","docid":2,"fillcolor":"ffffed99","id":217,"originaltext":"①. 使用共享表空间存储， 这种方式创建的表的表结构保存在.frm文件中， 数据和索引保存在innodb_data_home_dir 和 innodb_data_file_path定义的表空间中，可以是多个文件。","page":5,"textblocks":[{"first":[52.35793685913086,301.05743408203125,9.754096984863281,13.5],"last":[418.23187255859375,315.2637634277344,9.75408935546875,14.5],"length":107,"rects":[[52.35793685913086,301.05743408203125,399.80847549438477,13.5],[52.35793685913086,315.2637634277344,375.62802505493164,14.5]],"start":46,"text":"①. 使用共享表空间存储， 这种方式创建的表的表结构保存在.frm文件中， 数据和索引保存在\ninnodb_data_home_dir 和 innodb_data_file_path定义的表空间中，可以是多个文件。"}],"type":5},{"date":"2021-12-04 22:21:00","docid":2,"fillcolor":"ffffed99","id":218,"originaltext":"②. 使用多表空间存储， 这种方式创建的表的表结构仍然存在 .frm 文件中，但是每个表的数据和索引单独保存在.ibd 中。","page":5,"textblocks":[{"first":[52.35793685913086,338.62353515625,9.754096984863281,13.5],"last":[81.66309356689453,355.1298828125,9.754096984863281,12.5],"length":63,"rects":[[52.35793685913086,338.62353515625,480.3750343322754,13.5],[52.35793685913086,355.1298828125,39.05925369262695,12.5]],"start":154,"text":"②. 使用多表空间存储， 这种方式创建的表的表结构仍然存在 .frm 文件中，但是每个表的数据和索引单独保存在\n.ibd 中。"}],"type":5}],"originaltext":"InnoDB 存储表和索引有以下两种方式 ：","page":5,"textblocks":[{"first":[52.35793685913086,278.84814453125,2.721393585205078,12.5],"last":[218.24427795410156,278.84814453125,9.754104614257812,12.5],"length":22,"rects":[[52.35793685913086,278.84814453125,175.64044570922852,12.5]],"start":23,"text":"InnoDB 存储表和索引有以下两种方式 ："}],"type":5}],"originaltext":"存储方式","page":5,"textblocks":[{"first":[52.35793685913086,254.58837890625,9.754096984863281,13.5],"last":[81.62023162841797,254.58837890625,9.754096984863281,13.5],"length":4,"rects":[[52.35793685913086,254.58837890625,39.01639175415039,13.5]],"start":18,"text":"存储方式"}],"type":5}],"originaltext":"InnoDB","page":2,"textblocks":[{"first":[77.1626205444336,666.2603759765625,3.228607177734375,10.5],"last":[106.46392822265625,666.2603759765625,6.554756164550781,10.5],"length":6,"rects":[[77.1626205444336,666.2603759765625,35.85606384277344,10.5]],"start":349,"text":"InnoDB"}],"type":5},{"date":"2021-12-04 22:22:46","docid":2,"fillcolor":"ffffed99","folded":true,"id":219,"markups":[{"date":"2021-12-04 22:22:38","docid":2,"fillcolor":"ffffed99","id":220,"originaltext":"MyISAM 不支持事务、也不支持外键，其优势是访问的速度快，对事务的完整性没有要求或者以SELECT、INSERT为主的应用基本上都可以使用这个引擎来创建表 。","page":5,"textblocks":[{"first":[52.35793685913086,449.919921875,8.80794906616211,12.5],"last":[259.727783203125,464.92626953125,9.75408935546875,12.5],"length":82,"rects":[[52.35793685913086,449.919921875,484.80844497680664,12.5],[52.35793685913086,464.92626953125,217.1239356994629,12.5]],"start":234,"text":"MyISAM 不支持事务、也不支持外键，其优势是访问的速度快，对事务的完整性没有要求或者以SELECT、INSERT\n为主的应用基本上都可以使用这个引擎来创建表 。"}],"type":5},{"date":"2021-12-04 22:29:08","docid":2,"fillcolor":"ffffed99","id":221,"originaltext":"不支持事务","page":5,"textblocks":[{"first":[52.35793685913086,488.18603515625,9.754096984863281,13.5],"last":[91.37432861328125,488.18603515625,9.754096984863281,13.5],"length":5,"rects":[[52.35793685913086,488.18603515625,48.77048873901367,13.5]],"start":330,"text":"不支持事务"}],"type":5},{"date":"2021-12-04 22:23:04","docid":2,"fillcolor":"ffffed99","folded":false,"id":222,"markups":[{"date":"2021-12-04 22:29:32","docid":2,"fillcolor":"ffffed99","id":223,"originaltext":".frm (存储表定义)；.MYD(MYData , 存储数据)；.MYI(MYIndex , 存储索引)；","page":6,"textblocks":[{"first":[52.35793685913086,126.03369140625,2.5945892333984375,12.5],"last":[163.52989196777344,171.302734375,9.754104614257812,12.5],"length":56,"rects":[[52.35793685913086,126.03369140625,85.78653335571289,12.5],[52.35793685913086,147.9934539794922,121.64999771118164,13.5],[52.35793685913086,171.302734375,120.92605972290039,12.5]],"start":50,"text":".frm (存储表定义)；\n.MYD(MYData , 存储数据)；\n.MYI(MYIndex , 存储索引)；"}],"type":5}],"originaltext":"文件存储方式","page":6,"textblocks":[{"first":[52.35793685913086,79.26416015625,9.754096984863281,13.5],"last":[101.12842559814453,79.26416015625,9.754096984863281,13.5],"length":6,"rects":[[52.35793685913086,79.26416015625,58.52458572387695,13.5]],"start":2,"text":"文件存储方式"}],"type":5}],"originaltext":"MyISAM","page":5,"textblocks":[{"first":[77.1626205444336,426.909912109375,9.198112487792969,10.5],"last":[107.2442626953125,426.909912109375,9.198112487792969,10.5],"length":6,"rects":[[77.1626205444336,426.909912109375,39.279754638671875,10.5]],"start":226,"text":"MyISAM"}],"type":5},{"date":"2021-12-04 22:30:23","docid":2,"fillcolor":"ffffed99","folded":true,"id":224,"markups":[{"content":".frm都是存储表的结构的，这个存储引擎将数据存储到了内存，断电即失","date":"2021-12-04 22:31:09","docid":2,"fillcolor":"ffffed99","id":225,"originaltext":"Memory存储引擎将表的数据存放在内存中。每个MEMORY表实际对应一个磁盘文件，格式是.frm ，该文件中只存储表的结构，而其数据文件，都是存储在内存中，","page":6,"textblocks":[{"first":[52.35793685913086,273.2461853027344,8.80794906616211,14.5],"last":[266.9480895996094,289.05255126953125,9.75408935546875,13.5],"length":80,"rects":[[52.35793685913086,273.2461853027344,482.1658058166504,14.5],[52.35793685913086,289.05255126953125,224.34424209594727,13.5]],"start":123,"text":"Memory存储引擎将表的数据存放在内存中。每个MEMORY表实际对应一个磁盘文件，格式是.frm ，该文件中只\n存储表的结构，而其数据文件，都是存储在内存中，"}],"type":5}],"originaltext":"MEMORY","page":6,"textblocks":[{"first":[77.1626205444336,251.33642578125,9.198112487792969,10.5],"last":[115.22311401367188,251.33642578125,6.086555480957031,10.5],"length":6,"rects":[[77.1626205444336,251.33642578125,44.14704895019531,10.5]],"start":115,"text":"MEMORY"}],"type":5},{"date":"2021-12-04 22:30:30","docid":2,"fillcolor":"ffffed99","folded":true,"id":226,"markups":[{"content":"这些MyISAM的表结构一定要相同","date":"2021-12-04 22:33:02","docid":2,"fillcolor":"ffffed99","id":227,"originaltext":"MERGE存储引擎是一组MyISAM表的组合","page":6,"textblocks":[{"first":[52.35793685913086,390.64501953125,8.80794906616211,12.5],"last":[219.4587860107422,390.64501953125,9.754104614257812,12.5],"length":22,"rects":[[52.35793685913086,390.64501953125,176.85495376586914,12.5]],"start":309,"text":"MERGE存储引擎是一组MyISAM表的组合"}],"type":5}],"originaltext":"MERGE","page":6,"textblocks":[{"first":[77.1626205444336,367.63525390625,9.198112487792969,10.5],"last":[105.32270050048828,367.63525390625,5.4622955322265625,10.5],"length":5,"rects":[[77.1626205444336,367.63525390625,33.62237548828125,10.5]],"start":302,"text":"MERGE"}],"type":5}],"originaltext":"各种存储引擎特性","page":2,"textblocks":[{"first":[72.92108154296875,165.8013916015625,12.192626953125,14.5],"last":[158.26943969726562,165.8013916015625,12.192626953125,14.5],"length":8,"rects":[[72.92108154296875,165.8013916015625,97.54098510742188,14.5]],"start":225,"text":"各种存储引擎特性"}],"type":5},{"date":"2021-12-04 22:34:39","docid":2,"fillcolor":"ffffed99","folded":true,"id":228,"markups":[{"date":"2021-12-04 22:48:12","docid":2,"fillcolor":"ffffed99","id":229,"originaltext":"InnoDB : 是Mysql的默认存储引擎，用于事务处理应用程序，支持外键。如果应用对事务的完整性有比较高的要求，在并发条件下要求数据的一致性，数据操作除了插入和查询意外，还包含很多的更新、删除操作，那么InnoDB存储引擎是比较合适的选择。InnoDB存储引擎除了有效的降低由于删除和更新导致的锁定， 还可以确保事务的完整提交和回滚，对于类似于计费系统或者财务系统等对数据准确性要求比较高的系统，InnoDB是最合适的选择。","page":8,"textblocks":[{"first":[74.86739349365234,556.1153564453125,2.7213897705078125,14.5],"last":[177.16159057617188,616.9402465820312,9.754104614257812,13.5],"length":218,"rects":[[74.86739349365234,556.1153564453125,458.6617202758789,14.5],[74.86739349365234,571.9212036132812,458.4426040649414,13.5],[74.86739349365234,586.9275512695312,460.7287368774414,13.5],[74.86739349365234,602.23388671875,448.68851470947266,13.5],[74.86739349365234,616.9402465820312,112.04830169677734,13.5]],"start":176,"text":"InnoDB : 是Mysql的默认存储引擎，用于事务处理应用程序，支持外键。如果应用对事务的完整性有比较高\n的要求，在并发条件下要求数据的一致性，数据操作除了插入和查询意外，还包含很多的更新、删除操作，\n那么InnoDB存储引擎是比较合适的选择。InnoDB存储引擎除了有效的降低由于删除和更新导致的锁定， 还\n可以确保事务的完整提交和回滚，对于类似于计费系统或者财务系统等对数据准确性要求比较高的系统，\nInnoDB是最合适的选择。"}],"type":5},{"content":"没有多少并发性","date":"2021-12-04 22:48:18","docid":2,"fillcolor":"ffffed99","id":230,"originaltext":"MyISAM ： 如果应用是以读操作和插入操作为主，只有很少的更新和删除操作，并且对事务的完整性、并发性要求不是很高，那么选择这个存储引擎是非常合适的。","page":8,"textblocks":[{"first":[74.86739349365234,631.1466064453125,8.807952880859375,14.5],"last":[308.96575927734375,648.2529296875,9.75408935546875,12.5],"length":77,"rects":[[74.86739349365234,631.1466064453125,461.2669448852539,14.5],[74.86739349365234,648.2529296875,243.85245513916016,12.5]],"start":395,"text":"MyISAM ： 如果应用是以读操作和插入操作为主，只有很少的更新和删除操作，并且对事务的完整性、并发\n性要求不是很高，那么选择这个存储引擎是非常合适的。"}],"type":5},{"content":"使用缓存，临时使用的，但是这个redis可以更好的代替","date":"2021-12-04 22:48:52","docid":2,"fillcolor":"ffffed99","id":231,"originaltext":"MEMORY：将所有数据保存在RAM中，在需要快速定位记录和其他类似数据环境下，可以提供几块的访问。MEMORY的缺陷就是对表的大小有限制，太大的表无法缓存在内存中，其次是要确保表的数据可以恢复，数据库异常终止后表中的数据是可以恢复的。MEMORY表通常用于更新不太频繁的小表，用以快速得到访问结果。","page":8,"textblocks":[{"first":[74.86739349365234,661.9592895507812,8.807952880859375,13.5],"last":[84.62149047851562,708.2783203125,9.754096984863281,12.5],"length":153,"rects":[[74.86739349365234,661.9592895507812,463.0529556274414,13.5],[74.86739349365234,676.9656372070312,461.55265045166016,13.5],[74.86739349365234,691.9719848632812,461.55265045166016,13.5],[74.86739349365234,708.2783203125,19.508193969726562,12.5]],"start":473,"text":"MEMORY：将所有数据保存在RAM中，在需要快速定位记录和其他类似数据环境下，可以提供几块的访问。\nMEMORY的缺陷就是对表的大小有限制，太大的表无法缓存在内存中，其次是要确保表的数据可以恢复，数\n据库异常终止后表中的数据是可以恢复的。MEMORY表通常用于更新不太频繁的小表，用以快速得到访问结\n果。"}],"type":5},{"date":"2021-12-04 22:49:02","docid":2,"fillcolor":"ffffed99","id":232,"originaltext":"MERGE：用于将一系列等同的MyISAM表以逻辑方式组合在一起，并作为一个对象引用他们。MERGE表的优点在于可以突破对单个MyISAM表的大小限制，并且通过将不同的表分布在多个磁盘上，可以有效的改善MERGE表的访问效率。这对于存储诸如数据仓储等VLDB环境十分合适。","page":8,"textblocks":[{"first":[74.86739349365234,721.1846923828125,8.807952880859375,14.5],"last":[375.80609130859375,751.9968872070312,9.75408935546875,13.5],"length":138,"rects":[[74.86739349365234,721.1846923828125,463.24820709228516,14.5],[74.86739349365234,736.1910400390625,446.4452896118164,14.5],[74.86739349365234,751.9968872070312,310.69278717041016,13.5]],"start":627,"text":"MERGE：用于将一系列等同的MyISAM表以逻辑方式组合在一起，并作为一个对象引用他们。MERGE表的优\n点在于可以突破对单个MyISAM表的大小限制，并且通过将不同的表分布在多个磁盘上，可以有效的改善\nMERGE表的访问效率。这对于存储诸如数据仓储等VLDB环境十分合适。"}],"type":5}],"originaltext":"存储引擎的选择","page":8,"textblocks":[{"first":[72.92108154296875,492.1884765625,12.192626953125,15.5],"last":[146.07681274414062,492.1884765625,12.192626953125,15.5],"length":7,"rects":[[72.92108154296875,492.1884765625,85.34835815429688,15.5]],"start":85,"text":"存储引擎的选择"}],"type":5}],"originaltext":" 存储引擎","page":1,"textblocks":[{"first":[64.8822021484375,346.87835693359375,3.8041000366210938,17.5],"last":[112.57568359375,346.87835693359375,14.631149291992188,17.5],"length":5,"rects":[[64.8822021484375,346.87835693359375,62.32463073730469,17.5]],"start":486,"text":" 存储引擎"}],"type":5},{"date":"2021-12-04 22:51:21","docid":2,"fillcolor":"ffffed99","folded":true,"id":233,"markups":[{"date":"2021-12-04 23:16:41","docid":2,"fillcolor":"ffffed99","id":234,"originaltext":"但是当应用系统正式上线后，随着生产数据量的急剧增长，很多 SQL 语句开始逐渐显露出性能问题，对生产的影响也越来越大，此时这些有问题的 SQL 语句就成为整个系统性能的瓶颈，因此我们必须要对它们进行优化，","page":9,"textblocks":[{"first":[446.09393310546875,111.22782897949219,9.75408935546875,13.5],"last":[416.8316345214844,140.54052734375,9.75408935546875,13.5],"length":104,"rects":[[446.09393310546875,111.22782897949219,87.786865234375,13.5],[52.35793685913086,125.5341796875,481.5228614807129,13.5],[52.35793685913086,140.54052734375,374.22778701782227,13.5]],"start":57,"text":"但是当应用系统正式\n上线后，随着生产数据量的急剧增长，很多 SQL 语句开始逐渐显露出性能问题，对生产的影响也越来越大，此时\n这些有问题的 SQL 语句就成为整个系统性能的瓶颈，因此我们必须要对它们进行优化，"}],"type":5},{"content":"频率的具体分析\n首先要找对哪些sql语句进行优化","date":"2021-12-04 23:17:17","docid":2,"fillcolor":"ffffed99","folded":true,"id":235,"markups":[{"date":"2021-12-04 23:30:22","docid":2,"fillcolor":"ffffed99","id":236,"originaltext":"show status like 'Com_______';","page":9,"textblocks":[{"first":[80.11959838867188,332.69219970703125,5.293548583984375,8.7786865234375],"last":[233.51492309570312,332.69219970703125,5.293548583984375,8.7786865234375],"length":30,"rects":[[80.11959838867188,332.69219970703125,158.68887329101562,8.7786865234375]],"start":538,"text":"show status like 'Com_______';"}],"type":5},{"date":"2021-12-04 23:30:28","docid":2,"fillcolor":"ffffed99","id":237,"originaltext":"show status like 'Innodb_rows_%';","page":9,"textblocks":[{"first":[80.11959838867188,517.2698364257812,5.293548583984375,8.7786865234375],"last":[249.3833770751953,517.2698364257812,5.293548583984375,8.7786865234375],"length":33,"rects":[[80.11959838867188,517.2698364257812,174.5573272705078,8.7786865234375]],"start":570,"text":"show status like 'Innodb_rows_%';"}],"type":5}],"originaltext":"查看SQL执行频率","page":9,"textblocks":[{"first":[72.92108154296875,218.42373657226562,12.192626953125,15.5],"last":[157.19186401367188,218.42373657226562,12.192626953125,15.5],"length":9,"rects":[[72.92108154296875,218.42373657226562,96.46340942382812,15.5]],"start":259,"text":"查看SQL执行频率"}],"type":5},{"content":"语句效率的分析","date":"2021-12-04 23:29:11","docid":2,"fillcolor":"ffffed99","folded":true,"id":238,"markups":[{"content":"有个日志会记录执行时间超过的long_query_time 的sql语句，这就是慢查询日志","date":"2021-12-04 23:30:52","docid":2,"fillcolor":"ffffed99","id":239,"originaltext":"慢查询日志","page":10,"textblocks":[{"first":[74.86739349365234,485.93505859375,9.754096984863281,12.5],"last":[113.8837890625,485.93505859375,9.754096984863281,12.5],"length":5,"rects":[[74.86739349365234,485.93505859375,48.77049255371094,12.5]],"start":486,"text":"慢查询日志"}],"type":5},{"content":"实时的监测","date":"2021-12-04 23:30:55","docid":2,"fillcolor":"ffffed99","folded":true,"id":240,"markups":[{"date":"2021-12-04 23:42:22","docid":2,"fillcolor":"ffffed99","id":241,"originaltext":"1） id列，用户登录mysql时，系统分配的\"connection_id\"，可以使用函数connection_id()查看 2） user列，显示当前用户。如果不是root，这个命令就只显示用户权限范围的sql语句 3） host列，显示这个语句是从哪个ip的哪个端口上发的，可以用来跟踪出现问题语句的用户 4） db列，显示这个进程目前连接的是哪个数据库","page":10,"textblocks":[{"first":[86.12212371826172,680.8386840820312,5.293548583984375,8.7786865234375],"last":[274.0752258300781,760.29931640625,8.7786865234375,11.5],"length":185,"rects":[[86.12212371826172,680.8386840820312,408.1999282836914,8.7786865234375],[86.12212371826172,694.3440551757812,5.293548583984375,8.7786865234375],[86.12212371826172,706.27685546875,349.68152618408203,11.5],[86.12212371826172,721.3557739257812,5.293548583984375,8.7786865234375],[86.12212371826172,733.2880859375,367.12757110595703,11.5],[86.12212371826172,748.3670043945312,5.293548583984375,8.7786865234375],[86.12212371826172,760.29931640625,196.7317886352539,11.5]],"start":792,"text":"1） id列，用户登录mysql时，系统分配的\"connection_id\"，可以使用函数connection_id()查看\n \n2） user列，显示当前用户。如果不是root，这个命令就只显示用户权限范围的sql语句\n \n3） host列，显示这个语句是从哪个ip的哪个端口上发的，可以用来跟踪出现问题语句的用户\n \n4） db列，显示这个进程目前连接的是哪个数据库"}],"type":5},{"date":"2021-12-04 23:43:28","docid":2,"fillcolor":"ffffed99","id":242,"originaltext":"5） command列，显示当前连接的执行的命令，一般取值为休眠（sleep），查询（query），连接（connect）等 6） time列，显示这个状态持续的时间，单位是秒 7） state列，显示使用当前连接的sql语句的状态，很重要的列。state描述的是语句执行中的某一个状态。一个sql语句，以查询为例，可能需要经过copying to tmp table、sorting result、sending data等状态才可以完成 8） info列，显示这个sql语句，是判断问题语句的一个重要依据","page":11,"textblocks":[{"first":[86.12212371826172,69.00927734375,5.293548583984375,11.5],"last":[335.63751220703125,190.060546875,8.7786865234375,12.5],"length":263,"rects":[[86.12212371826172,69.00927734375,390.1971206665039,11.5],[86.12212371826172,85.08820343017578,63.362525939941406,8.7786865234375],[86.12212371826172,98.59406280517578,5.293548583984375,8.7786865234375],[86.12212371826172,109.0263671875,198.53211212158203,12.5],[86.12212371826172,130.0322265625,5.293548583984375,2.5],[86.12212371826172,136.03759765625,439.2687454223633,12.5],[86.12212371826172,152.61651611328125,443.5373001098633,8.778701782226562],[86.12212371826172,162.54931640625,43.89344024658203,12.5],[86.12212371826172,184.0546875,5.293548583984375,2.5],[86.12212371826172,190.060546875,258.29407501220703,12.5]],"start":139,"text":"5） command列，显示当前连接的执行的命令，一般取值为休眠（sleep），查询（query），连接\n（connect）等\n \n6） time列，显示这个状态持续的时间，单位是秒\n \n7） state列，显示使用当前连接的sql语句的状态，很重要的列。state描述的是语句执行中的某一个状态。一\n个sql语句，以查询为例，可能需要经过copying to tmp table、sorting result、sending data等状态\n才可以完成\n \n8） info列，显示这个sql语句，是判断问题语句的一个重要依据"}],"type":5}],"originaltext":"show processlist","page":10,"textblocks":[{"first":[74.86739349365234,530.9541015625,4.652702331542969,12.5],"last":[145.9882354736328,530.9541015625,3.4431915283203125,12.5],"length":16,"rects":[[74.86739349365234,530.9541015625,74.56403350830078,12.5]],"start":637,"text":"show processlist"}],"type":5}],"originaltext":"定位低效率执行SQL","page":10,"textblocks":[{"first":[72.92108154296875,435.9150390625,12.192626953125,15.5],"last":[174.69290161132812,435.9150390625,6.888824462890625,15.5],"length":10,"rects":[[72.92108154296875,435.9150390625,108.66064453125,15.5]],"start":446,"text":"定位低效率执行SQL"}],"type":5},{"content":"查询语句的具体分析","date":"2021-12-04 23:48:14","docid":2,"fillcolor":"ffffed99","folded":true,"id":243,"markups":[{"date":"2021-12-05 16:40:57","docid":2,"fillcolor":"ffffed99","id":244,"originaltext":"环境准备","page":12,"textblocks":[{"first":[77.15753936767578,400.84942626953125,9.754096984863281,13.5],"last":[106.41983795166016,400.84942626953125,9.754096984863281,13.5],"length":4,"rects":[[77.15753936767578,400.84942626953125,39.016395568847656,13.5]],"start":462,"text":"环境准备"}],"type":5},{"content":"控制表结构的加载顺序，越大，越先加载进来","date":"2021-12-05 16:41:05","docid":2,"fillcolor":"ffffed99","folded":true,"id":245,"markups":[{"content":"通过id可以知道表的加载顺序","date":"2021-12-05 16:44:13","docid":2,"fillcolor":"ffffed99","id":246,"originaltext":"1） id 相同表示加载表的顺序是从上到下。","page":14,"textblocks":[{"first":[52.35793685913086,226.0261688232422,5.579345703125,13.5],"last":[227.51258850097656,226.0261688232422,9.754104614257812,13.5],"length":22,"rects":[[52.35793685913086,226.0261688232422,184.90875625610352,13.5]],"start":86,"text":"1） id 相同表示加载表的顺序是从上到下。"}],"type":5},{"content":"id值越大，优先级越高，就先加载进来","date":"2021-12-05 16:44:35","docid":2,"fillcolor":"ffffed99","id":247,"originaltext":"2） id 不同id值越大，优先级越高，越先被执行。","page":14,"textblocks":[{"first":[52.35793685913086,393.896484375,5.579345703125,12.5],"last":[255.46511840820312,393.896484375,9.75408935546875,12.5],"length":26,"rects":[[52.35793685913086,393.896484375,212.86127090454102,12.5]],"start":111,"text":"2） id 不同id值越大，优先级越高，越先被执行。"}],"type":5},{"date":"2021-12-05 16:46:18","docid":2,"fillcolor":"ffffed99","id":248,"originaltext":"3） id 有相同，也有不同，同时存在。id相同的可以认为是一组，从上往下顺序执行；在所有的组中，id的值越大，优先级越高，越先执行。","page":14,"textblocks":[{"first":[52.35793685913086,567.9697265625,5.579345703125,12.5],"last":[169.40711975097656,581.9755859375,9.754104614257812,12.5],"length":68,"rects":[[52.35793685913086,567.9697265625,474.9121437072754,12.5],[52.35793685913086,581.9755859375,126.80328750610352,12.5]],"start":140,"text":"3） id 有相同，也有不同，同时存在。id相同的可以认为是一组，从上往下顺序执行；在所有的组中，id的值越\n大，优先级越高，越先执行。"}],"type":5}],"originaltext":"explain 之 id","page":14,"textblocks":[{"first":[77.1626205444336,164.5007781982422,5.764671325683594,13.5],"last":[130.59132385253906,164.5007781982422,6.174346923828125,13.5],"length":12,"rects":[[77.1626205444336,164.5007781982422,59.603050231933594,13.5]],"start":8,"text":"explain 之 id"}],"type":5},{"date":"2021-12-05 16:49:19","docid":2,"fillcolor":"ffffed99","folded":true,"id":249,"markups":[{"content":"查询效率，越来越低","date":"2021-12-05 16:50:45","docid":2,"fillcolor":"ffffed99","id":250,"originaltext":"表示 SELECT 的类型，常见的取值，如下表所示：","page":15,"textblocks":[{"first":[52.35793685913086,56.7548828125,9.754096984863281,12.5],"last":[256.0604553222656,56.7548828125,9.75408935546875,12.5],"length":26,"rects":[[52.35793685913086,56.7548828125,213.45660781860352,12.5]],"start":781,"text":"表示 SELECT 的类型，常见的取值，如下表所示："}],"type":5},{"date":"2021-12-05 16:51:30","docid":2,"fillcolor":"ffffed99","folded":true,"id":251,"markups":[{"content":"最简单的查询，效率最高","date":"2021-12-05 16:53:15","docid":2,"fillcolor":"ffffed99","id":252,"originaltext":"SIMPLE简单的select查询，查询中不包含子查询或者UNION","page":15,"textblocks":[{"first":[62.86235046386719,114.2783203125,5.355003356933594,12.5],"last":[354.6412048339844,114.2783203125,7.354583740234375,12.5],"length":34,"rects":[[62.86235046386719,114.2783203125,299.13343811035156,12.5]],"start":14,"text":"SIMPLE简单的select查询，查询中不包含子查询或者UNION"}],"type":5},{"content":"包含复杂的子查询中最外层的查询","date":"2021-12-05 16:53:18","docid":2,"fillcolor":"ffffed99","id":253,"originaltext":"PRIMARY查询中若包含任何复杂的子查询，最外层查询标记为该标识","page":15,"textblocks":[{"first":[62.86235046386719,137.5390625,5.8719635009765625,13.5],"last":[381.746337890625,137.5390625,9.75408935546875,13.5],"length":33,"rects":[[62.86235046386719,137.5390625,328.63807678222656,13.5]],"start":49,"text":"PRIMARY查询中若包含任何复杂的子查询，最外层查询标记为该标识"}],"type":5},{"content":"包含子查询中的子查询","date":"2021-12-05 16:53:20","docid":2,"fillcolor":"ffffed99","id":254,"originaltext":"SUBQUERY在SELECT 或 WHERE 列表中包含了子查询","page":15,"textblocks":[{"first":[62.86235046386719,164.298828125,5.355003356933594,10.5],"last":[308.95733642578125,164.298828125,9.75408935546875,10.5],"length":33,"rects":[[62.86235046386719,164.298828125,255.8490753173828,10.5]],"start":83,"text":"SUBQUERY在SELECT 或 WHERE 列表中包含了子查询"}],"type":5},{"content":"from中存在子查询","date":"2021-12-05 16:53:34","docid":2,"fillcolor":"ffffed99","id":255,"originaltext":"DERIVED在FROM 列表中包含的子查询，被标记为 DERIVED（衍生） MYSQL会递归执行这些子查询，把结果放在临时表中","page":15,"textblocks":[{"first":[62.86235046386719,188.0595703125,7.110740661621094,12.5],"last":[235.4348602294922,203.06640625,9.754104614257812,12.5],"length":66,"rects":[[62.86235046386719,188.0595703125,455.1222686767578,12.5],[137.8938751220703,203.06640625,107.29508972167969,12.5]],"start":117,"text":"DERIVED在FROM 列表中包含的子查询，被标记为 DERIVED（衍生） MYSQL会递归执行这些子查\n询，把结果放在临时表中"}],"type":5},{"date":"2021-12-05 16:53:26","docid":2,"fillcolor":"ffffed99","id":256,"originaltext":"UNION若第二个SELECT出现在UNION之后，则标记为UNION ； 若UNION包含在FROM子句的子查询中，外层SELECT将被标记为 ： DERIVED","page":15,"textblocks":[{"first":[62.86235046386719,236.3291015625,7.100982666015625,10.5],"last":[325.338623046875,243.8330078125,7.110748291015625,10.5],"length":84,"rects":[[62.86235046386719,236.3291015625,32.1300048828125,10.5],[137.8938751220703,228.826171875,386.06797790527344,10.5],[137.8938751220703,243.8330078125,194.5554962158203,10.5]],"start":184,"text":"UNION\n若第二个SELECT出现在UNION之后，则标记为UNION ； 若UNION包含在FROM子句的子\n查询中，外层SELECT将被标记为 ： DERIVED"}],"type":5},{"date":"2021-12-05 16:53:38","docid":2,"fillcolor":"ffffed99","id":257,"originaltext":"UNIONRESULT从UNION表获取结果的SELECT","page":15,"textblocks":[{"first":[62.86235046386719,268.5927734375,7.100982666015625,9.5],"last":[265.7160339355469,276.0966796875,5.394012451171875,10.5],"length":31,"rects":[[62.86235046386719,268.5927734375,32.1300048828125,9.5],[62.86235046386719,283.599609375,34.170509338378906,9.5],[137.8938751220703,276.0966796875,133.21617126464844,10.5]],"start":269,"text":"UNION\nRESULT\n从UNION表获取结果的SELECT"}],"type":5}],"originaltext":"结果值从最好到最坏以此是：","page":15,"textblocks":[{"first":[52.35793685913086,756.2978515625,9.754096984863281,12.5],"last":[169.40711975097656,756.2978515625,9.754104614257812,12.5],"length":13,"rects":[[52.35793685913086,756.2978515625,126.80328750610352,12.5]],"start":905,"text":"结果值从最好到最坏以此是："}],"type":5}],"originaltext":"explain 之 select_type","page":14,"textblocks":[{"first":[77.1626205444336,753.4478759765625,5.764671325683594,14.5],"last":[176.18199157714844,753.4478759765625,5.764678955078125,14.5],"length":21,"rects":[[77.1626205444336,753.4478759765625,104.78404998779297,14.5]],"start":217,"text":"explain 之 select_type"}],"type":5},{"content":"这条语句要操作的表是哪一个","date":"2021-12-05 17:00:31","docid":2,"fillcolor":"ffffed99","id":258,"originaltext":"explain 之 table","page":15,"textblocks":[{"first":[77.1626205444336,339.123046875,5.764671325683594,10.5],"last":[146.8904266357422,339.123046875,5.764678955078125,10.5],"length":15,"rects":[[77.1626205444336,339.123046875,75.49248504638672,10.5]],"start":816,"text":"explain 之 table"}],"type":5},{"date":"2021-12-05 17:09:15","docid":2,"fillcolor":"ffffed99","folded":true,"id":259,"markups":[{"content":"非关联查询：使用一次索引，返回一条记录","date":"2021-12-05 17:09:29","docid":2,"fillcolor":"ffffed99","id":260,"originaltext":"const表示通过索引一次就找到了，const 用于比较primary key 或者 unique 索引。因为只匹配一行数据，所以很快。如将主键置于where列表中，MySQL 就能将该查询转换为一个常亮。const于将\"主键\" 或 \"唯一\" 索引的所有部分与常量值进行比较","page":15,"textblocks":[{"first":[62.86235046386719,557.2138671875,4.642951965332031,8.5],"last":[323.9544677734375,568.9197387695312,9.75408935546875,13.5],"length":140,"rects":[[62.86235046386719,557.2138671875,24.619354248046875,8.5],[115.38441467285156,538.1070556640625,412.7250213623047,14.5],[115.38441467285156,553.1138916015625,409.07676696777344,14.5],[115.38441467285156,568.9197387695312,218.3241424560547,13.5]],"start":375,"text":"const\n表示通过索引一次就找到了，const 用于比较primary key 或者 unique 索引。因为只匹配一行数\n据，所以很快。如将主键置于where列表中，MySQL 就能将该查询转换为一个常亮。const于将\n\"主键\" 或 \"唯一\" 索引的所有部分与常量值进行比较"}],"type":5},{"content":" 关联查询：使用主键索引或者唯一索引的关联查询，返回一条记录","date":"2021-12-05 17:12:44","docid":2,"fillcolor":"ffffed99","id":261,"originaltext":"eq_ref类似ref，区别在于使用的是唯一索引，使用主键的关联查询，关联查询出的记录只有一条。常见于主键或唯一索引扫描","page":15,"textblocks":[{"first":[62.86235046386719,601.1834106445312,5.4720458984375,13.5],"last":[203.17129516601562,608.986328125,9.754104614257812,12.5],"length":62,"rects":[[62.86235046386719,601.1834106445312,28.38690185546875,13.5],[115.38441467285156,593.98046875,412.48216247558594,12.5],[115.38441467285156,608.986328125,97.54098510742188,12.5]],"start":516,"text":"eq_ref\n类似ref，区别在于使用的是唯一索引，使用主键的关联查询，关联查询出的记录只有一条。常见\n于主键或唯一索引扫描"}],"type":5},{"content":"使用非唯一索引，匹配单独一个值的多行记录","date":"2021-12-05 17:12:47","docid":2,"fillcolor":"ffffed99","id":262,"originaltext":"ref非唯一性索引扫描，返回匹配某个单独值的所有行。本质上也是一种索引访问，返回所有匹配某个单独值的所有行（多个）","page":15,"textblocks":[{"first":[62.86235046386719,644.25,3.97967529296875,8.5],"last":[222.67950439453125,648.7529296875,9.754104614257812,12.5],"length":59,"rects":[[62.86235046386719,644.25,12.565071105957031,8.5],[115.38441467285156,633.7470703125,409.67210388183594,12.5],[115.38441467285156,648.7529296875,117.0491943359375,12.5]],"start":579,"text":"ref\n非唯一性索引扫描，返回匹配某个单独值的所有行。本质上也是一种索引访问，返回所有匹配某\n个单独值的所有行（多个）"}],"type":5},{"content":"使用索引，匹配索引中多个值的多行记录","date":"2021-12-05 17:14:48","docid":2,"fillcolor":"ffffed99","id":263,"originaltext":"range只检索给定返回的行，使用一个索引来选择行。 where 之后出现 between ， < , > , in 等操作。","page":15,"textblocks":[{"first":[62.86235046386719,672.4136962890625,3.97967529296875,14.5],"last":[515.69775390625,672.4136962890625,9.75408935546875,14.5],"length":63,"rects":[[62.86235046386719,672.4136962890625,462.58949279785156,14.5]],"start":639,"text":"range只检索给定返回的行，使用一个索引来选择行。 where 之后出现 between ， < , > , in 等操作。"}],"type":5},{"content":"遍历了整个索引树","date":"2021-12-05 17:18:22","docid":2,"fillcolor":"ffffed99","id":264,"originaltext":"indexindex 与 ALL的区别为 index 类型只是遍历了索引树， 通常比ALL 快， ALL 是遍历数据文件。","page":15,"textblocks":[{"first":[62.86235046386719,697.9744262695312,2.4677886962890625,13.5],"last":[507.2947998046875,697.9744262695312,9.75408935546875,13.5],"length":61,"rects":[[62.86235046386719,697.9744262695312,454.18653869628906,13.5]],"start":703,"text":"indexindex 与 ALL的区别为 index 类型只是遍历了索引树， 通常比ALL 快， ALL 是遍历数据文件。"}],"type":5}],"originaltext":"explain 之 type","page":15,"textblocks":[{"first":[77.1626205444336,408.3023376464844,5.764671325683594,14.5],"last":[143.57403564453125,408.3023376464844,5.764678955078125,14.5],"length":14,"rects":[[77.1626205444336,408.3023376464844,72.17609405517578,14.5]],"start":858,"text":"explain 之 type"}],"type":5},{"date":"2021-12-05 17:27:19","docid":2,"fillcolor":"ffffed99","id":265,"originaltext":"explain 之 key","page":16,"textblocks":[{"first":[77.1626205444336,195.0625,5.764671325683594,10.5],"last":[139.03326416015625,195.0625,5.550079345703125,10.5],"length":13,"rects":[[77.1626205444336,195.0625,67.42072296142578,10.5]],"start":255,"text":"explain 之 key"}],"type":5},{"date":"2021-12-05 17:30:27","docid":2,"fillcolor":"ffffed99","id":266,"originaltext":"explain 之 rows","page":16,"textblocks":[{"first":[77.1626205444336,350.876953125,5.764671325683594,8.5],"last":[146.04151916503906,350.876953125,4.8477935791015625,8.5],"length":14,"rects":[[77.1626205444336,350.876953125,73.72669219970703,8.5]],"start":278,"text":"explain 之 rows"}],"type":5},{"content":"只有 using index 才是好的，其他都要进行优化","date":"2021-12-05 17:30:34","docid":2,"fillcolor":"ffffed99","id":267,"originaltext":" explain 之 extra","page":16,"textblocks":[{"first":[74.62655639648438,422.1572265625,2.5360641479492188,8.5],"last":[147.2889404296875,422.1572265625,5.8914794921875,8.5],"length":16,"rects":[[74.62655639648438,422.1572265625,78.55386352539062,8.5]],"start":309,"text":" explain 之 extra"}],"type":5}],"originaltext":"explain分析执行计划","page":11,"textblocks":[{"first":[72.92688751220703,245.3849639892578,7.205841064453125,16.499984741210938],"last":[178.42774963378906,245.3849639892578,12.192626953125,16.499984741210938],"length":13,"rects":[[72.92688751220703,245.3849639892578,117.69348907470703,16.499984741210938]],"start":6,"text":"explain分析执行计划"}],"type":5},{"content":"查看命令的耗时\n\n工具，打开后，\n可以使用show profiles;\n查看所有命令的执行时间\n\n可以使用show profile for query query_id；\n细致的查看命令。耗费时间到底在哪","date":"2021-12-05 17:34:19","docid":2,"fillcolor":"ffffed99","folded":true,"id":268,"markups":[{"date":"2021-12-05 17:42:35","docid":2,"fillcolor":"ffffed99","id":269,"originaltext":"set profiling=1; //开启profiling 开关；","page":17,"textblocks":[{"first":[80.11959838867188,229.89923095703125,5.293548583984375,8.778701782226562],"last":[268.6097106933594,229.89923095703125,8.7786865234375,8.778701782226562],"length":34,"rects":[[80.11959838867188,229.89923095703125,197.268798828125,8.778701782226562]],"start":212,"text":"set profiling=1; //开启profiling 开关；"}],"type":5},{"date":"2021-12-05 17:44:00","docid":2,"fillcolor":"ffffed99","folded":true,"id":270,"markups":[{"content":"包含查询的时间","date":"2021-12-05 17:45:59","docid":2,"fillcolor":"ffffed99","id":271,"originaltext":"Sending data 状态表示MySQL线程开始访问数据行并把结果返回给客户端，而不仅仅是返回个客户端。由于在Sending data状态下，MySQL线程往往需要做大量的磁盘读取操作，所以经常是整各查询中耗时最长的状态。","page":18,"textblocks":[{"first":[101.26911163330078,265.091796875,5.293548583984375,12.5],"last":[512.41015625,279.09765625,8.7786865234375,11.5],"length":114,"rects":[[101.26911163330078,265.091796875,428.8013229370117,12.5],[80.11959838867188,279.09765625,441.0692443847656,11.5]],"start":306,"text":"Sending data 状态表示MySQL线程开始访问数据行并把结果返回给客户端，而不仅仅是返回个客户端。由于\n在Sending data状态下，MySQL线程往往需要做大量的磁盘读取操作，所以经常是整各查询中耗时最长的状态。"}],"type":5}],"originaltext":"通过show profile for query query_id 语句可以查看到该SQL执行过程中每个线程的状态和消耗的时间：","page":17,"textblocks":[{"first":[52.35793685913086,585.4265747070312,9.754096984863281,13.5],"last":[488.091064453125,585.4265747070312,9.75408935546875,13.5],"length":64,"rects":[[52.35793685913086,585.4265747070312,445.4872169494629,13.5]],"start":147,"text":"通过show profile for query query_id 语句可以查看到该SQL执行过程中每个线程的状态和消耗的时间："}],"type":5},{"date":"2021-12-05 17:49:58","docid":2,"fillcolor":"ffffed99","id":272,"originaltext":"，MySQL支持进一步选择all、cpu、block io 、context switch、page faults等明细类型类查看MySQL在使用什么资源上耗费了过高的时间。","page":18,"textblocks":[{"first":[198.66940307617188,332.5210876464844,9.754104614257812,14.5],"last":[308.43634033203125,348.6279296875,9.75408935546875,12.5],"length":88,"rects":[[198.66940307617188,332.5210876464844,338.1737976074219,14.5],[52.35793685913086,348.6279296875,265.83249282836914,12.5]],"start":104,"text":"，MySQL支持进一步选择all、cpu、block io 、context switch、page faults等\n明细类型类查看MySQL在使用什么资源上耗费了过高的时间。"}],"type":5}],"originaltext":"show profile分析SQL","page":16,"textblocks":[{"first":[72.92688751220703,634.3413696289062,6.059730529785156,17.07208251953125],"last":[188.6298828125,634.3413696289062,6.888824462890625,17.07208251953125],"length":17,"rects":[[72.92688751220703,634.3413696289062,122.5918197631836,17.07208251953125]],"start":354,"text":"show profile分析SQL"}],"type":5},{"date":"2021-12-05 17:50:07","docid":2,"fillcolor":"ffffed99","folded":true,"id":273,"markups":[{"date":"2021-12-05 17:52:03","docid":2,"fillcolor":"ffffed99","id":274,"markups":[{"date":"2021-12-05 17:52:06","docid":2,"fillcolor":"ffffed99","id":275,"originaltext":"SET optimizer_trace=\"enabled=on\",end_markers_in_json=on;set optimizer_trace_max_mem_size=1000000;","page":19,"textblocks":[{"first":[80.11959838867188,106.09650421142578,5.293548583984375,8.7786865234375],"last":[291.68505859375,119.60236358642578,5.293548583984375,8.778694152832031],"length":98,"rects":[[80.11959838867188,106.09650421142578,296.193115234375,8.7786865234375],[80.11959838867188,119.60236358642578,216.8590087890625,8.778694152832031]],"start":139,"text":"SET optimizer_trace=\"enabled=on\",end_markers_in_json=on;\nset optimizer_trace_max_mem_size=1000000;"}],"type":5}],"originaltext":"打开trace","page":19,"textblocks":[{"first":[52.35793685913086,56.75390625,9.754096984863281,12.5],"last":[89.1622085571289,56.75390625,5.4720458984375,12.5],"length":7,"rects":[[52.35793685913086,56.75390625,42.27631759643555,12.5]],"start":0,"text":"打开trace"}],"type":5},{"date":"2021-12-05 17:52:31","docid":2,"fillcolor":"ffffed99","id":276,"markups":[{"date":"2021-12-05 17:52:36","docid":2,"fillcolor":"ffffed99","id":277,"originaltext":"select * from information_schema.optimizer_trace\\G;","page":19,"textblocks":[{"first":[80.11959838867188,245.65509033203125,5.293548583984375,8.778701782226562],"last":[344.56304931640625,245.65509033203125,5.293548583984375,8.778701782226562],"length":51,"rects":[[80.11959838867188,245.65509033203125,269.73699951171875,8.778701782226562]],"start":279,"text":"select * from information_schema.optimizer_trace\\G;"}],"type":5}],"originaltext":"检查information_schema.optimizer_trace就可以知道MySQL是如何执行SQL的 ","page":19,"textblocks":[{"first":[84.15400695800781,210.21932983398438,9.754096984863281,14.5],"last":[427.3239440917969,210.21932983398438,2.53607177734375,14.5],"length":56,"rects":[[84.15400695800781,210.21932983398438,345.7060089111328,14.5]],"start":81,"text":"检查information_schema.optimizer_trace就可以知道MySQL是如何执行SQL的 "}],"type":5}],"originaltext":"trace分析优化器执行计划","page":18,"textblocks":[{"first":[72.92688751220703,718.7841796875,5.291595458984375,14.5],"last":[201.88426208496094,718.7841796875,12.192626953125,14.5],"length":14,"rects":[[72.92688751220703,718.7841796875,141.1500015258789,14.5]],"start":216,"text":"trace分析优化器执行计划"}],"type":5}],"originaltext":" 优化SQL步骤","page":9,"textblocks":[{"first":[64.8822021484375,82.01708984375,3.8041000366210938,17.5],"last":[140.54489135742188,82.01708984375,14.631149291992188,17.5],"length":8,"rects":[[64.8822021484375,82.01708984375,90.29383850097656,17.5]],"start":4,"text":" 优化SQL步骤"}],"type":5},{"date":"2021-12-05 17:59:54","docid":2,"fillcolor":"ffffed99","folded":false,"id":278,"markups":[{"date":"2021-12-05 20:56:32","docid":2,"fillcolor":"ffffed99","id":279,"originaltext":"验证索引提升查询效率","page":22,"textblocks":[{"first":[72.92108154296875,622.0921630859375,12.192626953125,15.5],"last":[182.65467834472656,622.0921630859375,12.192626953125,15.5],"length":10,"rects":[[72.92108154296875,622.0921630859375,121.92622375488281,15.5]],"start":74,"text":"验证索引提升查询效率"}],"type":5},{"date":"2021-12-05 21:12:08","docid":2,"fillcolor":"ffffed99","folded":false,"id":280,"markups":[{"date":"2021-12-05 21:12:13","docid":2,"fillcolor":"ffffed99","id":281,"originaltext":"准备环境","page":24,"textblocks":[{"first":[77.15753936767578,406.85235595703125,9.754096984863281,13.5],"last":[106.41983795166016,406.85235595703125,9.754096984863281,13.5],"length":4,"rects":[[77.15753936767578,406.85235595703125,39.016395568847656,13.5]],"start":75,"text":"准备环境"}],"type":5},{"date":"2021-12-05 21:14:56","docid":2,"fillcolor":"ffffed99","folded":false,"id":282,"markups":[{"content":"前面建立了复合索引，所以只要写全索引的值就可以索引生效","date":"2021-12-05 21:15:01","docid":2,"fillcolor":"ffffed99","id":283,"originaltext":"1). 全值匹配 ，对索引中所有列都指定具体值。","page":25,"textblocks":[{"first":[52.35793685913086,486.935546875,5.579345703125,12.5],"last":[244.05322265625,486.935546875,9.754104614257812,12.5],"length":24,"rects":[[52.35793685913086,486.935546875,201.44939041137695,12.5]],"start":16,"text":"1). 全值匹配 ，对索引中所有列都指定具体值。"}],"type":5},{"content":"对复合索引使用：\n因为创建了复合索引1，2，3；相当创建1；1，2；1，2，3；的索引\n\n最左前缀法则：\n要从最左边的索引字段开始，并且不能跳过中间的索引字段","date":"2021-12-05 21:33:33","docid":2,"fillcolor":"ffffed99","folded":true,"id":284,"markups":[{"date":"2021-12-05 21:35:47","docid":2,"fillcolor":"ffffed99","id":285,"originaltext":"如果索引了多列，要遵守最左前缀法则。指的是查询从索引的最左前列开始，并且不跳过索引中的列。","page":25,"textblocks":[{"first":[52.35793685913086,696.2734375,9.754096984863281,12.5],"last":[481.53826904296875,696.2734375,9.75408935546875,12.5],"length":45,"rects":[[52.35793685913086,696.2734375,438.93442153930664,12.5]],"start":71,"text":"如果索引了多列，要遵守最左前缀法则。指的是查询从索引的最左前列开始，并且不跳过索引中的列。"}],"type":5}],"originaltext":"2). 最左前缀法则","page":25,"textblocks":[{"first":[52.35793685913086,672.763671875,5.579345703125,12.5],"last":[114.72129821777344,672.763671875,9.754096984863281,12.5],"length":10,"rects":[[52.35793685913086,672.763671875,72.11745834350586,12.5]],"start":60,"text":"2). 最左前缀法则"}],"type":5},{"content":"范围查询后面的条件会索引失效，因为复合索引的建立是需要基础的，b索引要在a索引的基础上区分，c索引要在b索引的基础上区分\n如果对b索引使用范围查询，只走了一般的索引，还要继续走c索引，需要重新对b索引一个一个继续走，这样遍历一遍跟全部看了一遍没有区别\n\n符合索引a，b条件（范围条件），然后使用索引c查看是否满足的数据    和 \n符合索引a，b条件（范围条件），然后不使用索引遍历一遍c条件是否满足  是没有区别\n所以对于设计上来说范围条件后 用和没有索引是没有区别的。","date":"2021-12-05 21:46:49","docid":2,"fillcolor":"ffffed99","id":286,"originaltext":"3). 范围查询右边的列，不能使用索引 。","page":26,"textblocks":[{"first":[52.35793685913086,561.216796875,5.579345703125,12.5],"last":[214.79605102539062,561.216796875,9.754104614257812,12.5],"length":21,"rects":[[52.35793685913086,561.216796875,172.19221878051758,12.5]],"start":53,"text":"3). 范围查询右边的列，不能使用索引 。"}],"type":5},{"content":"进了索引，然后运算，还不如不用","date":"2021-12-05 21:41:52","docid":2,"fillcolor":"ffffed99","id":287,"originaltext":"4). 不要在索引列上进行运算操作， 索引将失效。","page":26,"textblocks":[{"first":[52.35793685913086,760.048828125,5.579345703125,12.5],"last":[253.8124542236328,760.048828125,9.754104614257812,12.5],"length":25,"rects":[[52.35793685913086,760.048828125,211.20862197875977,12.5]],"start":133,"text":"4). 不要在索引列上进行运算操作， 索引将失效。"}],"type":5},{"content":"对字段用了运算","date":"2021-12-05 22:37:21","docid":2,"fillcolor":"ffffed99","folded":true,"id":288,"markups":[{"date":"2021-12-05 22:38:11","docid":2,"fillcolor":"ffffed99","id":289,"originaltext":"由于，在查询是，没有对字符串加单引号，MySQL的查询优化器，会自动的进行类型转换，造成索引失效。","page":27,"textblocks":[{"first":[52.35793685913086,423.658203125,9.754096984863281,12.5],"last":[503.518310546875,423.658203125,9.75408935546875,12.5],"length":49,"rects":[[52.35793685913086,423.658203125,460.9144630432129,12.5]],"start":23,"text":"由于，在查询是，没有对字符串加单引号，MySQL的查询优化器，会自动的进行类型转换，造成索引失效。"}],"type":5}],"originaltext":"5). 字符串不加单引号，造成索引失效。","page":27,"textblocks":[{"first":[52.35793685913086,248.833984375,5.579345703125,12.5],"last":[212.2622833251953,248.833984375,9.754104614257812,12.5],"length":20,"rects":[[52.35793685913086,248.833984375,169.65845108032227,12.5]],"start":2,"text":"5). 字符串不加单引号，造成索引失效。"}],"type":5},{"content":"使用聚集索引，回去找表中的行记录","date":"2021-12-05 22:37:59","docid":2,"fillcolor":"ffffed99","folded":true,"id":290,"markups":[{"date":"2021-12-05 22:45:05","docid":2,"fillcolor":"ffffed99","id":291,"originaltext":"尽量使用覆盖索引（只访问索引的查询（索引列完全包含查询列）），减少select * 。","page":27,"textblocks":[{"first":[52.35793685913086,491.9375,9.754096984863281,12.5],"last":[410.8448486328125,491.9375,9.75408935546875,12.5],"length":43,"rects":[[52.35793685913086,491.9375,368.2410011291504,12.5]],"start":99,"text":"尽量使用覆盖索引（只访问索引的查询（索引列完全包含查询列）），减少select * 。"}],"type":5},{"date":"2021-12-05 22:45:31","docid":2,"fillcolor":"ffffed99","id":292,"originaltext":"如果查询列，超出索引列，也会降低性能。","page":27,"textblocks":[{"first":[52.35793685913086,732.787109375,9.754096984863281,12.5],"last":[227.93170166015625,732.787109375,9.754104614257812,12.5],"length":19,"rects":[[52.35793685913086,732.787109375,185.3278694152832,12.5]],"start":143,"text":"如果查询列，超出索引列，也会降低性能。"}],"type":5}],"originaltext":"6). 尽量使用覆盖索引，避免select *","page":27,"textblocks":[{"first":[52.35793685913086,468.677734375,5.579345703125,12.5],"last":[201.9326934814453,468.677734375,5.3842620849609375,12.5],"length":23,"rects":[[52.35793685913086,468.677734375,154.9590187072754,12.5]],"start":75,"text":"6). 尽量使用覆盖索引，避免select *"}],"type":5},{"date":"2021-12-05 22:47:23","docid":2,"fillcolor":"ffffed99","id":293,"originaltext":"7). 用or分割开的条件， 如果or前的条件中的列有索引，而后面的列中没有索引，那么涉及的索引都不会被用到。示例，name字段是索引列 ， 而createtime不是索引列，中间是or进行连接是不走索引的 ：","page":28,"textblocks":[{"first":[52.35793685913086,311.86328125,5.579345703125,12.5],"last":[437.11138916015625,334.07110595703125,9.75408935546875,13.5],"length":106,"rects":[[52.35793685913086,311.86328125,484.56149673461914,12.5],[52.35793685913086,334.07110595703125,394.50754165649414,13.5]],"start":2,"text":"7). 用or分割开的条件， 如果or前的条件中的列有索引，而后面的列中没有索引，那么涉及的索引都不会被用到。\n示例，name字段是索引列 ， 而createtime不是索引列，中间是or进行连接是不走索引的 ："}],"type":5},{"date":"2021-12-05 22:55:26","docid":2,"fillcolor":"ffffed99","folded":true,"id":294,"markups":[{"date":"2021-12-05 22:55:35","docid":2,"fillcolor":"ffffed99","id":295,"originaltext":"如果仅仅是尾部模糊匹配，索引不会失效。如果是头部模糊匹配，索引失效。","page":28,"textblocks":[{"first":[52.35793685913086,582.4765625,9.754096984863281,13.5],"last":[374.2431640625,582.4765625,9.75408935546875,13.5],"length":34,"rects":[[52.35793685913086,582.4765625,331.6393165588379,13.5]],"start":135,"text":"如果仅仅是尾部模糊匹配，索引不会失效。如果是头部模糊匹配，索引失效。"}],"type":5},{"date":"2021-12-05 22:55:46","docid":2,"fillcolor":"ffffed99","id":296,"originaltext":"解决方案 ：通过覆盖索引来解决","page":29,"textblocks":[{"first":[52.35793685913086,281.099609375,9.754096984863281,12.5],"last":[130.39071655273438,302.609375,9.754104614257812,13.5],"length":16,"rects":[[52.35793685913086,281.099609375,51.30427169799805,12.5],[52.35793685913086,302.609375,87.78688430786133,13.5]],"start":0,"text":"解决方案 ：\n通过覆盖索引来解决"}],"type":5}],"originaltext":"8). 以%开头的Like模糊查询，索引失效。","page":28,"textblocks":[{"first":[52.35793685913086,561.966796875,5.579345703125,12.5],"last":[218.70590209960938,561.966796875,9.754104614257812,12.5],"length":23,"rects":[[52.35793685913086,561.966796875,176.10206985473633,12.5]],"start":111,"text":"8). 以%开头的Like模糊查询，索引失效。"}],"type":5},{"content":"索引建立跟没有建立一样，就是没有有序的情况","date":"2021-12-05 22:56:17","docid":2,"fillcolor":"ffffed99","id":297,"originaltext":"9). 如果MySQL评估使用索引比全表更慢，则不使用索引。","page":29,"textblocks":[{"first":[52.35793685913086,568.1207275390625,5.579345703125,14.5],"last":[292.7669372558594,568.1207275390625,9.75408935546875,14.5],"length":30,"rects":[[52.35793685913086,568.1207275390625,250.16308975219727,14.5]],"start":19,"text":"9). 如果MySQL评估使用索引比全表更慢，则不使用索引。"}],"type":5},{"content":"如果数据建立索引后还是没有进行有序的分门别类，索引建立跟没有建立一样，就是没有有序的情况，索引失效","date":"2021-12-05 22:58:38","docid":2,"fillcolor":"ffffed99","id":298,"originaltext":"10). is NULL ， is NOT NULL 有时索引失效。","page":30,"textblocks":[{"first":[52.35793685913086,339.873046875,5.579345703125,10.5],"last":[238.45956420898438,339.873046875,9.754104614257812,10.5],"length":34,"rects":[[52.35793685913086,339.873046875,195.85573196411133,10.5]],"start":2,"text":"10). is NULL ， is NOT NULL 有时索引失效。"}],"type":5},{"date":"2021-12-05 22:58:43","docid":2,"fillcolor":"ffffed99","id":299,"originaltext":"11). in 走索引， not in 索引失效。","page":30,"textblocks":[{"first":[52.35793685913086,667.259765625,5.579345703125,12.5],"last":[191.9253692626953,667.259765625,9.754104614257812,12.5],"length":25,"rects":[[52.35793685913086,667.259765625,149.32153701782227,12.5]],"start":39,"text":"11). in 走索引， not in 索引失效。"}],"type":5},{"date":"2021-12-05 22:58:49","docid":2,"fillcolor":"ffffed99","folded":true,"id":300,"markups":[{"date":"2021-12-05 23:06:02","docid":2,"fillcolor":"ffffed99","id":301,"originaltext":"尽量使用复合索引，而少使用单列索引 。","page":31,"textblocks":[{"first":[52.35793685913086,248.583984375,9.754096984863281,13.5],"last":[220.7113800048828,248.583984375,9.754104614257812,13.5],"length":19,"rects":[[52.35793685913086,248.583984375,178.10754776000977,13.5]],"start":18,"text":"尽量使用复合索引，而少使用单列索引 。"}],"type":5},{"date":"2021-12-05 23:06:26","docid":2,"fillcolor":"ffffed99","id":302,"originaltext":"数据库会选择一个最优的索引（辨识度最高索引）来使用，并不会使用全部索引 。","page":31,"textblocks":[{"first":[52.35793685913086,528.701171875,9.754096984863281,12.5],"last":[396.28515625,528.701171875,9.75408935546875,12.5],"length":37,"rects":[[52.35793685913086,528.701171875,353.6813087463379,12.5]],"start":54,"text":"数据库会选择一个最优的索引（辨识度最高索引）来使用，并不会使用全部索引 。"}],"type":5}],"originaltext":"12). 单列索引和复合索引。","page":31,"textblocks":[{"first":[52.35793685913086,226.32421875,5.579345703125,13.5],"last":[159.3148651123047,226.32421875,9.754104614257812,13.5],"length":15,"rects":[[52.35793685913086,226.32421875,116.71103286743164,13.5]],"start":2,"text":"12). 单列索引和复合索引。"}],"type":5}],"originaltext":"避免索引失效","page":25,"textblocks":[{"first":[77.15753936767578,461.92578125,9.754096984863281,12.5],"last":[125.92803192138672,461.92578125,9.754096984863281,12.5],"length":6,"rects":[[77.15753936767578,461.92578125,58.52458953857422,12.5]],"start":8,"text":"避免索引失效"}],"type":5},{"date":"2021-12-05 23:07:11","docid":2,"fillcolor":"ffffed99","id":303,"originaltext":" 查看索引使用情况","page":31,"textblocks":[{"first":[69.75680541992188,576.22265625,3.1700820922851562,15.5],"last":[158.26943969726562,576.22265625,12.192626953125,15.5],"length":9,"rects":[[69.75680541992188,576.22265625,100.70526123046875,15.5]],"start":97,"text":" 查看索引使用情况"}],"type":5}],"originaltext":"索引的使用","page":24,"textblocks":[{"first":[72.92108154296875,381.142578125,12.192626953125,15.5],"last":[121.69157409667969,381.142578125,12.192626953125,15.5],"length":5,"rects":[[72.92108154296875,381.142578125,60.96311950683594,15.5]],"start":62,"text":"索引的使用"}],"type":5}],"originaltext":"索引的使用","page":22,"textblocks":[{"first":[68.68223571777344,530.705078125,14.631149291992188,17.5],"last":[127.20682525634766,530.705078125,14.631141662597656,17.5],"length":5,"rects":[[68.68223571777344,530.705078125,73.15573120117188,17.5]],"start":5,"text":"索引的使用"}],"type":5},{"date":"2021-12-05 23:08:14","docid":2,"fillcolor":"ffffed99","folded":false,"id":304,"markups":[{"content":"load data local infile '/root/sql2.log' into table tb_user_2 fields terminated by ',' lines terminated by '\\n';","date":"2021-12-05 23:08:17","docid":2,"fillcolor":"ffffed99","folded":true,"id":305,"markups":[{"date":"2021-12-05 23:19:46","docid":2,"fillcolor":"ffffed99","id":306,"originaltext":"1） 主键顺序插入","page":33,"textblocks":[{"first":[52.35793685913086,199.314453125,5.579345703125,13.5],"last":[118.99347686767578,199.314453125,9.754096984863281,13.5],"length":9,"rects":[[52.35793685913086,199.314453125,76.3896369934082,13.5]],"start":33,"text":"1） 主键顺序插入"}],"type":5},{"date":"2021-12-05 23:19:49","docid":2,"fillcolor":"ffffed99","id":307,"originaltext":"2） 关闭唯一性校验","page":33,"textblocks":[{"first":[52.35793685913086,594.98046875,5.579345703125,12.5],"last":[128.74757385253906,594.98046875,9.754104614257812,12.5],"length":10,"rects":[[52.35793685913086,594.98046875,86.14374160766602,12.5]],"start":198,"text":"2） 关闭唯一性校验"}],"type":5},{"date":"2021-12-05 23:28:59","docid":2,"fillcolor":"ffffed99","id":308,"originaltext":"3） 手动提交事务","page":34,"textblocks":[{"first":[52.35793685913086,56.75390625,5.579345703125,12.5],"last":[118.99347686767578,56.75390625,9.754096984863281,12.5],"length":9,"rects":[[52.35793685913086,56.75390625,76.3896369934082,12.5]],"start":0,"text":"3） 手动提交事务"}],"type":5}],"originaltext":" 大批量插入数据","page":32,"textblocks":[{"first":[69.75680541992188,363.884765625,3.1700820922851562,15.5],"last":[146.07681274414062,363.884765625,12.192626953125,15.5],"length":8,"rects":[[69.75680541992188,363.884765625,88.51263427734375,15.5]],"start":15,"text":" 大批量插入数据"}],"type":5},{"content":"少连接，使用事务","date":"2021-12-06 00:04:14","docid":2,"fillcolor":"ffffed99","folded":true,"id":309,"markups":[{"date":"2021-12-06 00:11:37","docid":2,"fillcolor":"ffffed99","id":310,"markups":[{"date":"2021-12-06 00:11:41","docid":2,"fillcolor":"ffffed99","id":311,"originaltext":"优化后的方案为 ：","page":34,"textblocks":[{"first":[74.86739349365234,455.171875,9.754096984863281,13.5],"last":[145.6798553466797,455.171875,9.754104614257812,13.5],"length":9,"rects":[[74.86739349365234,455.171875,80.56656646728516,13.5]],"start":257,"text":"优化后的方案为 ："}],"type":5}],"originaltext":"如果需要同时对一张表插入很多行数据时，应该尽量使用多个值表的insert语句，这种方式将大大的缩减客户端与数据库之间的连接、关闭等消耗。使得效率比分开执行的单个insert语句快。","page":34,"textblocks":[{"first":[74.86739349365234,329.619140625,9.754096984863281,13.5],"last":[413.00311279296875,345.625,9.75408935546875,12.5],"length":91,"rects":[[74.86739349365234,329.619140625,464.93900299072266,13.5],[74.86739349365234,345.625,347.88980865478516,12.5]],"start":154,"text":"如果需要同时对一张表插入很多行数据时，应该尽量使用多个值表的insert语句，这种方式将大大的缩减客户\n端与数据库之间的连接、关闭等消耗。使得效率比分开执行的单个insert语句快。"}],"type":5},{"date":"2021-12-06 00:11:46","docid":2,"fillcolor":"ffffed99","id":312,"originaltext":"在事务中进行数据插入。","page":34,"textblocks":[{"first":[74.86739349365234,518.197265625,9.754096984863281,12.5],"last":[172.4083709716797,518.197265625,9.754104614257812,12.5],"length":11,"rects":[[74.86739349365234,518.197265625,107.29508209228516,12.5]],"start":267,"text":"在事务中进行数据插入。"}],"type":5},{"date":"2021-12-06 00:11:51","docid":2,"fillcolor":"ffffed99","id":313,"originaltext":"数据有序插入","page":34,"textblocks":[{"first":[74.86739349365234,635.248046875,9.754096984863281,13.5],"last":[123.63788604736328,635.248046875,9.754096984863281,13.5],"length":6,"rects":[[74.86739349365234,635.248046875,58.52458953857422,13.5]],"start":279,"text":"数据有序插入"}],"type":5}],"originaltext":"优化insert语句","page":34,"textblocks":[{"first":[72.92108154296875,280.6996154785156,12.192626953125,15.5],"last":[145.32669067382812,280.6996154785156,12.192626953125,15.5],"length":10,"rects":[[72.92108154296875,280.6996154785156,84.59823608398438,15.5]],"start":108,"text":"优化insert语句"}],"type":5},{"content":"1、当查询的字段覆盖了索引，那么会使用索引查询，超过则全表扫描，使用文件排序，效率极差\n2、用创建了索引的字段进行排序，并且索引字段排序要跟索引一致\n3、要么全部升序要么全部由降序","date":"2021-12-06 15:30:09","docid":2,"fillcolor":"ffffed99","folded":true,"id":314,"markups":[{"date":"2021-12-06 15:32:00","docid":2,"fillcolor":"ffffed99","id":315,"originaltext":"环境准备","page":35,"textblocks":[{"first":[77.15753936767578,198.314453125,9.754096984863281,12.5],"last":[106.41983795166016,198.314453125,9.754096984863281,12.5],"length":4,"rects":[[77.15753936767578,198.314453125,39.016395568847656,12.5]],"start":26,"text":"环境准备"}],"type":5},{"date":"2021-12-06 15:37:14","docid":2,"fillcolor":"ffffed99","folded":false,"id":316,"markups":[{"date":"2021-12-06 15:41:54","docid":2,"fillcolor":"ffffed99","id":317,"originaltext":"1). 第一种是通过对返回数据进行排序，也就是通常说的 filesort 排序，所有不是通过索引直接返回排序结果的排序都叫 FileSort 排序。","page":35,"textblocks":[{"first":[52.35793685913086,579.4765625,5.579345703125,13.5],"last":[130.5526580810547,595.1824340820312,9.754104614257812,13.5],"length":75,"rects":[[52.35793685913086,579.4765625,489.27658462524414,13.5],[52.35793685913086,595.1824340820312,87.94882583618164,13.5]],"start":46,"text":"1). 第一种是通过对返回数据进行排序，也就是通常说的 filesort 排序，所有不是通过索引直接返回排序结果的排序\n都叫 FileSort 排序。"}],"type":5},{"date":"2021-12-06 15:42:07","docid":2,"fillcolor":"ffffed99","id":318,"originaltext":"2). 第二种通过有序索引顺序扫描直接返回有序数据，这种情况即为 using index，不需要额外排序，操作效率高。","page":35,"textblocks":[{"first":[52.35793685913086,766.2047119140625,5.579345703125,14.5],"last":[529.94677734375,766.2047119140625,9.75408935546875,14.5],"length":59,"rects":[[52.35793685913086,766.2047119140625,487.3429298400879,14.5]],"start":122,"text":"2). 第二种通过有序索引顺序扫描直接返回有序数据，这种情况即为 using index，不需要额外排序，操作效率高。"}],"type":5}],"originaltext":"两种排序方式","page":35,"textblocks":[{"first":[77.15753936767578,555.46484375,9.754096984863281,13.5],"last":[125.92803192138672,555.46484375,9.754096984863281,13.5],"length":6,"rects":[[77.15753936767578,555.46484375,58.52458953857422,13.5]],"start":38,"text":"两种排序方式"}],"type":5},{"date":"2021-12-06 15:50:32","docid":2,"fillcolor":"ffffed99","id":319,"originaltext":"尽量减少额外的排序，通过索引直接返回有序数据。where 条件和Order by 使用相同的索引，并且Order By 的顺序和索引顺序相同， 并且Order by 的字段都是升序，或者都是降序。否则肯定需要额外的操作，这样就会出现FileSort。","page":36,"textblocks":[{"first":[259.6658630371094,592.1304931640625,9.75408935546875,14.5],"last":[291.3047790527344,622.9421997070312,9.75408935546875,13.5],"length":127,"rects":[[259.6658630371094,592.1304931640625,274.6911926269531,14.5],[52.35793685913086,607.1363525390625,481.95517349243164,14.5],[52.35793685913086,622.9421997070312,248.70093154907227,13.5]],"start":31,"text":"尽量减少额外的排序，通过索引直接返回有序数据。where 条件\n和Order by 使用相同的索引，并且Order By 的顺序和索引顺序相同， 并且Order by 的字段都是升序，或者都是\n降序。否则肯定需要额外的操作，这样就会出现FileSort。"}],"type":5},{"date":"2021-12-06 16:16:55","docid":2,"fillcolor":"ffffed99","folded":true,"id":320,"markups":[{"content":"拿出排序字段，和行指针信息，对排序字段排序，然后根据排序字段的行指针再读取数据","date":"2021-12-06 16:17:04","docid":2,"fillcolor":"ffffed99","id":321,"originaltext":"1） 两次扫描算法","page":36,"textblocks":[{"first":[52.35793685913086,733.0390625,5.579345703125,12.5],"last":[118.99347686767578,733.0390625,9.754096984863281,12.5],"length":9,"rects":[[52.35793685913086,733.0390625,76.3896369934082,12.5]],"start":286,"text":"1） 两次扫描算法"}],"type":5},{"content":"直接提取所有字段信息进行排序","date":"2021-12-06 16:17:09","docid":2,"fillcolor":"ffffed99","folded":false,"id":322,"markups":[{"date":"2021-12-06 16:21:54","docid":2,"fillcolor":"ffffed99","id":323,"originaltext":"MySQL 通过比较系统变量 max_length_for_sort_data 的大小和Query语句取出的字段总大小， 来判定是否那种排序算法，如果max_length_for_sort_data 更大，那么使用第二种优化之后的算法；否则使用第一种。","page":37,"textblocks":[{"first":[52.35793685913086,116.4292984008789,8.80794906616211,14.499992370605469],"last":[474.4846496582031,131.43710327148438,9.75408935546875,14.5],"length":127,"rects":[[52.35793685913086,116.4292984008789,489.4147071838379,14.499992370605469],[52.35793685913086,131.43710327148438,431.880802154541,14.5]],"start":85,"text":"MySQL 通过比较系统变量 max_length_for_sort_data 的大小和Query语句取出的字段总大小， 来判定是否那种排\n序算法，如果max_length_for_sort_data 更大，那么使用第二种优化之后的算法；否则使用第一种。"}],"type":5}],"originaltext":"2）一次扫描算法","page":37,"textblocks":[{"first":[52.35793685913086,56.75390625,5.579345703125,12.5],"last":[116.45970153808594,56.75390625,9.754096984863281,12.5],"length":8,"rects":[[52.35793685913086,56.75390625,73.85586166381836,12.5]],"start":0,"text":"2）一次扫描算法"}],"type":5}],"originaltext":" Filesort 的优化","page":36,"textblocks":[{"first":[74.62655639648438,670.26171875,2.5360641479492188,12.5],"last":[135.82025146484375,670.26171875,9.754104614257812,12.5],"length":13,"rects":[[74.62655639648438,670.26171875,70.94779968261719,12.5]],"start":166,"text":" Filesort 的优化"}],"type":5}],"originaltext":"优化order by语句","page":35,"textblocks":[{"first":[72.92108154296875,171.1046905517578,12.192626953125,16.5],"last":[160.37100219726562,171.1046905517578,12.192626953125,16.5],"length":12,"rects":[[72.92108154296875,171.1046905517578,99.64254760742188,16.5]],"start":6,"text":"优化order by语句"}],"type":5},{"content":"还是会进行排序操作的，只要对排序加入order by null，就不会进行排序，只进行分组\n分组可以通过索引分组，所以只要对分组的字段是有索引的字段即可","date":"2021-12-06 16:22:43","docid":2,"fillcolor":"ffffed99","folded":true,"id":324,"markups":[{"date":"2021-12-06 16:37:44","docid":2,"fillcolor":"ffffed99","id":325,"originaltext":"如果查询包含 group by 但是用户想要避免排序结果的消耗， 则可以执行order by null 禁止排序。","page":37,"textblocks":[{"first":[52.35793685913086,425.91015625,9.754096984863281,12.5],"last":[462.8683166503906,425.91015625,9.75408935546875,12.5],"length":57,"rects":[[52.35793685913086,425.91015625,420.2644691467285,12.5]],"start":460,"text":"如果查询包含 group by 但是用户想要避免排序结果的消耗， 则可以执行order by null 禁止排序。"}],"type":5}],"originaltext":"优化group by 语句","page":37,"textblocks":[{"first":[72.92108154296875,345.17694091796875,12.192626953125,16.5],"last":[165.69932556152344,345.17694091796875,12.192626953125,16.5],"length":13,"rects":[[72.92108154296875,345.17694091796875,104.97087097167969,16.5]],"start":295,"text":"优化group by 语句"}],"type":5},{"content":"对子查询变成多表联查，连接使用join即可","date":"2021-12-06 16:38:39","docid":2,"fillcolor":"ffffed99","folded":true,"id":326,"markups":[{"date":"2021-12-06 16:40:35","docid":2,"fillcolor":"ffffed99","id":327,"originaltext":"使用子查询可以一次性的完成很多逻辑上需要多个步骤才能完成的SQL操作，同时也可以避免事务或者表锁死，并且写起来也很容易。但是，有些情况下，子查询是可以被更高效的连接（JOIN）替代。","page":38,"textblocks":[{"first":[237.68580627441406,281.84765625,9.754104614257812,12.5],"last":[111.64933013916016,311.861328125,9.754096984863281,12.5],"length":93,"rects":[[237.68580627441406,281.84765625,300.8846893310547,12.5],[52.35793685913086,296.85546875,487.70492935180664,12.5],[52.35793685913086,311.861328125,69.04549026489258,12.5]],"start":98,"text":"使用子查询可以一次性的完成很多逻辑上需要多个步骤才能完成的SQL\n操作，同时也可以避免事务或者表锁死，并且写起来也很容易。但是，有些情况下，子查询是可以被更高效的连接\n（JOIN）替代。"}],"type":5}],"originaltext":"优化嵌套查询","page":38,"textblocks":[{"first":[72.92108154296875,240.08203125,12.192626953125,15.5],"last":[133.8842010498047,240.08203125,12.192626953125,15.5],"length":6,"rects":[[72.92108154296875,240.08203125,73.15574645996094,15.5]],"start":13,"text":"优化嵌套查询"}],"type":5},{"date":"2021-12-06 16:43:39","docid":2,"fillcolor":"ffffed99","folded":true,"id":328,"markups":[{"date":"2021-12-06 16:43:59","docid":2,"fillcolor":"ffffed99","id":329,"originaltext":"对于包含OR的查询子句，如果要利用索引，则OR之间的每个条件列都必须用到索引 ， 而且不能使用到复合索引； 如果没有索引，则应该考虑增加索引。","page":39,"textblocks":[{"first":[52.35793685913086,56.755859375,9.754096984863281,12.5],"last":[230.46548461914062,71.76171875,9.754104614257812,12.5],"length":72,"rects":[[52.35793685913086,56.755859375,471.25436782836914,12.5],[52.35793685913086,71.76171875,187.86165237426758,12.5]],"start":0,"text":"对于包含OR的查询子句，如果要利用索引，则OR之间的每个条件列都必须用到索引 ， 而且不能使用到复合索\n引； 如果没有索引，则应该考虑增加索引。"}],"type":5},{"date":"2021-12-06 16:47:03","docid":2,"fillcolor":"ffffed99","id":330,"originaltext":"建议使用 union 替换 or ：","page":39,"textblocks":[{"first":[52.35793685913086,475.181640625,9.754096984863281,12.5],"last":[157.20973205566406,475.181640625,9.754104614257812,12.5],"length":18,"rects":[[52.35793685913086,475.181640625,114.60589981079102,12.5]],"start":96,"text":"建议使用 union 替换 or ："}],"type":5}],"originaltext":" 优化OR条件","page":38,"textblocks":[{"first":[69.75680541992188,746.044921875,3.1700820922851562,12.5],"last":[127.2520751953125,746.044921875,12.192626953125,12.5],"length":7,"rects":[[69.75680541992188,746.044921875,69.68789672851562,12.5]],"start":298,"text":" 优化OR条件"}],"type":5},{"content":"分页查询越往后查询效率越低","date":"2021-12-06 16:47:11","docid":2,"fillcolor":"ffffed99","folded":true,"id":331,"markups":[{"content":"因为聚焦索引带有行记录","date":"2021-12-06 16:48:23","docid":2,"fillcolor":"ffffed99","id":332,"originaltext":"优化思路一","page":40,"textblocks":[{"first":[77.15753936767578,209.068359375,9.754096984863281,12.5],"last":[116.17393493652344,209.068359375,9.754096984863281,12.5],"length":5,"rects":[[77.15753936767578,209.068359375,48.77049255371094,12.5]],"start":149,"text":"优化思路一"}],"type":5},{"content":"limit会进行排序，主键自增的表已经排序好了，那么直接拿大于后面的值即可","date":"2021-12-06 16:48:26","docid":2,"fillcolor":"ffffed99","folded":false,"id":333,"markups":[{"date":"2021-12-06 16:52:44","docid":2,"fillcolor":"ffffed99","id":334,"originaltext":"该方案适用于主键自增的表，可以把Limit 查询转换成某个位置的查询 。","page":40,"textblocks":[{"first":[52.35793685913086,380.890625,9.754096984863281,12.5],"last":[353.0537414550781,380.890625,9.75408935546875,12.5],"length":36,"rects":[[52.35793685913086,380.890625,310.449893951416,12.5]],"start":208,"text":"该方案适用于主键自增的表，可以把Limit 查询转换成某个位置的查询 。"}],"type":5}],"originaltext":" 优化思路二","page":40,"textblocks":[{"first":[74.62655639648438,357.880859375,2.5360641479492188,10.5],"last":[116.17393493652344,357.880859375,9.754096984863281,10.5],"length":6,"rects":[[74.62655639648438,357.880859375,51.301475524902344,10.5]],"start":200,"text":" 优化思路二"}],"type":5}],"originaltext":" 优化分页查询","page":40,"textblocks":[{"first":[69.75680541992188,56.255859375,3.1700820922851562,15.5],"last":[133.8842010498047,56.255859375,12.192626953125,15.5],"length":7,"rects":[[69.75680541992188,56.255859375,76.32002258300781,15.5]],"start":3,"text":" 优化分页查询"}],"type":5},{"date":"2021-12-06 17:07:27","docid":2,"fillcolor":"ffffed99","folded":true,"id":335,"markups":[{"content":"建议使用索引，用在from 表的后面，指定建议使用的索引","date":"2021-12-06 17:07:36","docid":2,"fillcolor":"ffffed99","id":336,"markups":[{"date":"2021-12-06 17:07:42","docid":2,"fillcolor":"ffffed99","id":337,"originaltext":"在查询语句中表名的后面，添加 use index 来提供希望MySQL去参考的索引列表，就可以让MySQL不再考虑其他可用的索引。","page":40,"textblocks":[{"first":[52.35793685913086,586.1285400390625,9.754096984863281,14.5],"last":[101.12842559814453,603.234375,9.754096984863281,12.5],"length":66,"rects":[[52.35793685913086,586.1285400390625,482.6564064025879,14.5],[52.35793685913086,603.234375,58.52458572387695,12.5]],"start":333,"text":"在查询语句中表名的后面，添加 use index 来提供希望MySQL去参考的索引列表，就可以让MySQL不再考虑其他\n可用的索引。"}],"type":5}],"originaltext":"USE INDEX","page":40,"textblocks":[{"first":[77.1626205444336,564.216796875,7.3740997314453125,10.5],"last":[121.74859619140625,564.216796875,6.5059814453125,10.5],"length":9,"rects":[[77.1626205444336,564.216796875,51.091957092285156,10.5]],"start":322,"text":"USE INDEX"}],"type":5},{"content":"用在from 表的后面，指定不使用的索引","date":"2021-12-06 17:07:47","docid":2,"fillcolor":"ffffed99","id":338,"originaltext":"IGNORE INDEX","page":41,"textblocks":[{"first":[77.1626205444336,57.00390625,3.228607177734375,10.5],"last":[141.42262268066406,57.00390625,6.5059814453125,10.5],"length":12,"rects":[[77.1626205444336,57.00390625,70.76598358154297,10.5]],"start":6,"text":"IGNORE INDEX"}],"type":5},{"content":"强制使用索引","date":"2021-12-06 17:11:36","docid":2,"fillcolor":"ffffed99","id":339,"originaltext":"FORCE INDEX","page":41,"textblocks":[{"first":[77.1626205444336,287.3515625,5.355003356933594,10.5],"last":[134.7703094482422,287.3515625,6.5059814453125,10.5],"length":11,"rects":[[77.1626205444336,287.3515625,64.1136703491211,10.5]],"start":82,"text":"FORCE INDEX"}],"type":5}],"originaltext":"使用SQL提示","page":40,"textblocks":[{"first":[72.92108154296875,496.74139404296875,12.192626953125,16.5],"last":[132.80662536621094,496.74139404296875,12.192626953125,16.5],"length":7,"rects":[[72.92108154296875,496.74139404296875,72.07817077636719,16.5]],"start":251,"text":"使用SQL提示"}],"type":5}],"originaltext":" SQL优化","page":32,"textblocks":[{"first":[64.8822021484375,335.873046875,3.8041000366210938,14.5],"last":[111.2825927734375,335.873046875,14.631149291992188,14.5],"length":6,"rects":[[64.8822021484375,335.873046875,61.03153991699219,14.5]],"start":4,"text":" SQL优化"}],"type":5}],"page":-1,"title":"Mysql高级-day02","type":7},{"date":"2021-12-13 16:33:43","folded":false,"id":61,"linecolor":"ffcccedb","markups":[{"date":"2021-12-06 17:42:34","docid":1,"fillcolor":"ffffed99","folded":true,"id":62,"markups":[{"date":"2021-12-06 17:42:38","docid":1,"fillcolor":"ffffed99","id":63,"originaltext":"使用连接池","page":0,"textblocks":[{"first":[72.92108154296875,203.31715393066406,12.192626953125,15.5],"last":[121.69157409667969,203.31715393066406,12.192626953125,15.5],"length":5,"rects":[[72.92108154296875,203.31715393066406,60.96311950683594,15.5]],"start":104,"text":"使用连接池"}],"type":5},{"date":"2021-12-06 18:07:08","docid":1,"fillcolor":"ffffed99","folded":true,"id":64,"markups":[{"content":"问全来，不要问那么多次，很烦的","date":"2021-12-06 18:07:43","docid":1,"fillcolor":"ffffed99","id":65,"originaltext":" 避免对数据进行重复检索","page":0,"textblocks":[{"first":[74.62655639648438,317.86444091796875,2.5360641479492188,12.5],"last":[174.69851684570312,317.86444091796875,9.754104614257812,12.5],"length":12,"rects":[[74.62655639648438,317.86444091796875,109.82606506347656,12.5]],"start":208,"text":" 避免对数据进行重复检索"}],"type":5},{"content":"保存到缓存里面即可","date":"2021-12-06 18:07:58","docid":1,"fillcolor":"ffffed99","id":66,"originaltext":" 增加cache层","page":0,"textblocks":[{"first":[74.62655639648438,607.9364624023438,2.5360641479492188,13.5],"last":[124.76116180419922,607.9364624023438,9.754096984863281,13.5],"length":9,"rects":[[74.62655639648438,607.9364624023438,59.888702392578125,13.5]],"start":413,"text":" 增加cache层"}],"type":5}],"originaltext":"减少对MySQL的访问","page":0,"textblocks":[{"first":[72.92108154296875,291.8543701171875,12.192626953125,14.5],"last":[175.62368774414062,291.8543701171875,12.192626953125,14.5],"length":11,"rects":[[72.92108154296875,291.8543701171875,114.89523315429688,14.5]],"start":190,"text":"减少对MySQL的访问"}],"type":5},{"date":"2021-12-06 18:13:41","docid":1,"fillcolor":"ffffed99","folded":false,"id":67,"markups":[{"date":"2021-12-06 18:13:45","docid":1,"fillcolor":"ffffed99","id":68,"originaltext":"利用MySQL复制分流查询","page":1,"textblocks":[{"first":[77.15753936767578,95.47111511230469,9.754096984863281,13.5],"last":[178.82781982421875,95.47111511230469,9.754104614257812,13.5],"length":13,"rects":[[77.15753936767578,95.47111511230469,111.42438507080078,13.5]],"start":86,"text":"利用MySQL复制分流查询"}],"type":5},{"date":"2021-12-06 18:15:56","docid":1,"fillcolor":"ffffed99","id":69,"originaltext":"采用分布式数据库架构","page":1,"textblocks":[{"first":[77.15753936767578,483.68414306640625,9.754096984863281,12.5],"last":[164.94442749023438,483.68414306640625,9.754104614257812,12.5],"length":10,"rects":[[77.15753936767578,483.68414306640625,97.5409927368164,12.5]],"start":166,"text":"采用分布式数据库架构"}],"type":5}],"originaltext":"负载均衡","page":0,"textblocks":[{"first":[72.92108154296875,730.5390625,12.192626953125,15.5],"last":[109.49894714355469,730.5390625,12.192626953125,15.5],"length":4,"rects":[[72.92108154296875,730.5390625,48.77049255371094,15.5]],"start":599,"text":"负载均衡"}],"type":5}],"originaltext":"应用优化","page":0,"textblocks":[{"first":[68.68223571777344,133.53909301757812,14.631149291992188,17.5],"last":[112.57568359375,133.53909301757812,14.631149291992188,17.5],"length":4,"rects":[[68.68223571777344,133.53909301757812,58.52459716796875,17.5]],"start":18,"text":"应用优化"}],"type":5},{"date":"2021-12-06 19:53:15","docid":1,"fillcolor":"ffffed99","folded":true,"id":70,"markups":[{"content":"1、每次执行查询的时候都会先去缓存中寻找\n2、没有就先去解析器进行分析，预处理，优化器生成执行计划给执行引起\n3、执行引擎执行计划，返回结果的途中，会拷贝一份到缓存中","date":"2021-12-06 19:53:19","docid":1,"fillcolor":"ffffed99","id":71,"originaltext":"操作流程","page":1,"textblocks":[{"first":[72.92108154296875,688.7711791992188,12.192626953125,14.5],"last":[109.49894714355469,688.7711791992188,12.192626953125,14.5],"length":4,"rects":[[72.92108154296875,688.7711791992188,48.77049255371094,14.5]],"start":370,"text":"操作流程"}],"type":5},{"content":"show variables like '%query_cache%';\n即可看到所有的cache东西","date":"2021-12-06 20:36:24","docid":1,"fillcolor":"ffffed99","folded":true,"id":72,"markups":[{"date":"2021-12-06 20:38:31","docid":1,"fillcolor":"ffffed99","id":73,"originaltext":"1. 查看当前的MySQL数据库是否支持查询缓存：","page":2,"textblocks":[{"first":[64.52711486816406,526.1024169921875,5.579345703125,14.5],"last":[262.6671142578125,526.1024169921875,9.75408935546875,14.5],"length":25,"rects":[[64.52711486816406,526.1024169921875,207.8940887451172,14.5]],"start":165,"text":"1. 查看当前的MySQL数据库是否支持查询缓存："}],"type":5},{"content":"默认没有开启缓存","date":"2021-12-06 20:38:33","docid":1,"fillcolor":"ffffed99","id":74,"originaltext":"2. 查看当前MySQL是否开启了查询缓存 ：","page":2,"textblocks":[{"first":[64.52711486816406,651.405029296875,5.579345703125,14.5],"last":[235.93861389160156,651.405029296875,9.754104614257812,14.5],"length":23,"rects":[[64.52711486816406,651.405029296875,181.1656036376953,14.5]],"start":191,"text":"2. 查看当前MySQL是否开启了查询缓存 ："}],"type":5},{"content":"1M","date":"2021-12-06 21:16:28","docid":1,"fillcolor":"ffffed99","id":75,"originaltext":"3. 查看查询缓存的占用大小 ：","page":3,"textblocks":[{"first":[64.52711486816406,56.7548828125,5.579345703125,12.5],"last":[184.69625854492188,56.7548828125,9.754104614257812,12.5],"length":16,"rects":[[64.52711486816406,56.7548828125,129.92324829101562,12.5]],"start":0,"text":"3. 查看查询缓存的占用大小 ："}],"type":5},{"content":"对缓存的具体信息","date":"2021-12-06 21:20:32","docid":1,"fillcolor":"ffffed99","folded":true,"id":76,"markups":[{"date":"2021-12-06 21:35:54","docid":1,"fillcolor":"ffffed99","id":77,"originaltext":"Qcache_hits查询缓存命中数","page":3,"textblocks":[{"first":[85.3718032836914,466.87725830078125,7.598442077636719,13.5],"last":[279.7034606933594,466.87725830078125,9.75408935546875,13.5],"length":18,"rects":[[85.3718032836914,466.87725830078125,204.08574676513672,13.5]],"start":82,"text":"Qcache_hits查询缓存命中数"}],"type":5},{"date":"2021-12-06 21:35:59","docid":1,"fillcolor":"ffffed99","id":78,"originaltext":"Qcache_inserts添加到查询缓存的查询数","page":3,"textblocks":[{"first":[85.3718032836914,492.937744140625,7.598442077636719,12.5],"last":[318.7198486328125,492.937744140625,9.75408935546875,12.5],"length":25,"rects":[[85.3718032836914,492.937744140625,243.10213470458984,12.5]],"start":101,"text":"Qcache_inserts添加到查询缓存的查询数"}],"type":5},{"date":"2021-12-06 21:36:07","docid":1,"fillcolor":"ffffed99","id":79,"originaltext":"Qcache_not_cached非缓存查询的数量（由于 query_cache_type 设置而无法缓存或未缓存）","page":3,"textblocks":[{"first":[85.3718032836914,540.3585205078125,7.598442077636719,14.5],"last":[521.8937377929688,540.3585205078125,9.75408935546875,14.5],"length":58,"rects":[[85.3718032836914,540.3585205078125,446.2760238647461,14.5]],"start":167,"text":"Qcache_not_cached非缓存查询的数量（由于 query_cache_type 设置而无法缓存或未缓存）"}],"type":5}],"originaltext":"4. 查看查询缓存的状态变量：","page":3,"textblocks":[{"first":[64.52711486816406,181.30712890625,5.579345703125,12.5],"last":[182.1624755859375,181.30712890625,9.754104614257812,12.5],"length":15,"rects":[[64.52711486816406,181.30712890625,127.38946533203125,12.5]],"start":290,"text":"4. 查看查询缓存的状态变量："}],"type":5}],"originaltext":"查询缓存配置","page":2,"textblocks":[{"first":[72.92108154296875,499.4420166015625,12.192626953125,15.5],"last":[133.8842010498047,499.4420166015625,12.192626953125,15.5],"length":6,"rects":[[72.92108154296875,499.4420166015625,73.15574645996094,15.5]],"start":157,"text":"查询缓存配置"}],"type":5},{"date":"2021-12-06 21:34:31","docid":1,"fillcolor":"ffffed99","folded":true,"id":80,"markups":[{"date":"2021-12-06 21:42:02","docid":1,"fillcolor":"ffffed99","id":81,"originaltext":"MySQL的查询缓存默认是关闭的，需要手动配置参数 query_cache_type ， 来开启查询缓存。query_cache_type该参数的可取值有三个 ：","page":3,"textblocks":[{"first":[52.35793685913086,648.4039306640625,8.80794906616211,14.5],"last":[152.4326934814453,663.51025390625,9.754104614257812,13.5],"length":82,"rects":[[52.35793685913086,648.4039306640625,484.3180274963379,14.5],[52.35793685913086,663.51025390625,109.82886123657227,13.5]],"start":329,"text":"MySQL的查询缓存默认是关闭的，需要手动配置参数 query_cache_type ， 来开启查询缓存。query_cache_type\n该参数的可取值有三个 ："}],"type":5}],"originaltext":"开启查询缓存","page":3,"textblocks":[{"first":[72.92108154296875,622.743408203125,12.192626953125,14.5],"last":[133.8842010498047,622.743408203125,12.192626953125,14.5],"length":6,"rects":[[72.92108154296875,622.743408203125,73.15574645996094,14.5]],"start":321,"text":"开启查询缓存"}],"type":5},{"date":"2021-12-06 21:58:50","docid":1,"fillcolor":"ffffed99","folded":true,"id":82,"markups":[{"date":"2021-12-06 21:59:01","docid":1,"fillcolor":"ffffed99","id":83,"markups":[{"content":"如果设置为ON也就是开启缓存的状态为1，那么就算是不指定SQL_CACHE也会进行缓存\n只有 DEMAND 才需要进行指定","date":"2021-12-06 21:59:06","docid":1,"fillcolor":"ffffed99","id":84,"originaltext":"SQL_CACHE : 如果查询结果是可缓存的，并且 query_cache_type 系统变量的值为ON或 DEMAND ，则缓存查询结果 。","page":4,"textblocks":[{"first":[52.35793685913086,392.59600830078125,5.354999542236328,13.5],"last":[74.39990997314453,407.90234375,9.754096984863281,12.5],"length":73,"rects":[[52.35793685913086,392.59600830078125,482.18967056274414,13.5],[52.35793685913086,407.90234375,31.796070098876953,12.5]],"start":328,"text":"SQL_CACHE : 如果查询结果是可缓存的，并且 query_cache_type 系统变量的值为ON或 DEMAND ，则缓存查询\n结果 。"}],"type":5},{"content":"不会进行缓存，忽略查询缓存的存在","date":"2021-12-06 21:59:11","docid":1,"fillcolor":"ffffed99","id":85,"originaltext":"SQL_NO_CACHE : 服务器不使用查询缓存。它既不检查查询缓存，也不检查结果是否已缓存，也不缓存查询结果。","page":4,"textblocks":[{"first":[52.35793685913086,430.11187744140625,5.354999542236328,13.5],"last":[532.552001953125,430.11187744140625,9.75408935546875,13.5],"length":57,"rects":[[52.35793685913086,430.11187744140625,489.9481544494629,13.5]],"start":402,"text":"SQL_NO_CACHE : 服务器不使用查询缓存。它既不检查查询缓存，也不检查结果是否已缓存，也不缓存查询结果。"}],"type":5}],"originaltext":"可以在SELECT语句中指定两个与查询缓存相关的选项 ：","page":4,"textblocks":[{"first":[52.35793685913086,369.386474609375,9.754096984863281,13.5],"last":[282.7889709472656,369.386474609375,9.75408935546875,13.5],"length":28,"rects":[[52.35793685913086,369.386474609375,240.18512344360352,13.5]],"start":299,"text":"可以在SELECT语句中指定两个与查询缓存相关的选项 ："}],"type":5}],"originaltext":"查询缓存SELECT选项","page":4,"textblocks":[{"first":[72.92108154296875,344.626220703125,12.192626953125,12.5],"last":[175.97494506835938,344.626220703125,12.192626953125,12.5],"length":12,"rects":[[72.92108154296875,344.626220703125,115.24649047851562,12.5]],"start":285,"text":"查询缓存SELECT选项"}],"type":5},{"content":"1、缓存使用一定要是sql语句一定要是一样的\n2、不查询任何语句不会缓存\n3、mysql系统数据库中的表不会缓存\n4、函数，过程，事件，不会缓存\n5、缓存依托于表存在，表更改，缓存失效","date":"2021-12-06 22:03:11","docid":1,"fillcolor":"ffffed99","folded":true,"id":86,"markups":[{"date":"2021-12-06 22:03:23","docid":1,"fillcolor":"ffffed99","id":87,"originaltext":"1） SQL 语句不一致的情况， 要想命中查询缓存，查询的SQL语句必须一致。","page":4,"textblocks":[{"first":[52.35793685913086,556.1648559570312,5.579345703125,13.5],"last":[374.67657470703125,556.1648559570312,9.75408935546875,13.5],"length":39,"rects":[[52.35793685913086,556.1648559570312,332.07272720336914,13.5]],"start":479,"text":"1） SQL 语句不一致的情况， 要想命中查询缓存，查询的SQL语句必须一致。"}],"type":5},{"date":"2021-12-06 22:03:33","docid":1,"fillcolor":"ffffed99","id":88,"originaltext":"2） 当查询语句中有一些不确定的时，则不会缓存。如 ： now() , current_date() , curdate() , curtime() , rand() ,uuid() , user() , database() 。","page":4,"textblocks":[{"first":[52.35793685913086,632.6968383789062,5.579345703125,13.5],"last":[169.43568420410156,651.003173828125,9.754104614257812,8.5],"length":116,"rects":[[52.35793685913086,632.6968383789062,479.1427345275879,13.5],[52.35793685913086,651.003173828125,126.83185195922852,8.5]],"start":519,"text":"2） 当查询语句中有一些不确定的时，则不会缓存。如 ： now() , current_date() , curdate() , curtime() , rand() ,\nuuid() , user() , database() 。"}],"type":5},{"date":"2021-12-06 22:03:37","docid":1,"fillcolor":"ffffed99","id":89,"originaltext":"3） 不使用任何表查询语句。","page":4,"textblocks":[{"first":[52.35793685913086,739.041015625,5.579345703125,12.5],"last":[167.7639617919922,739.041015625,9.754104614257812,12.5],"length":14,"rects":[[52.35793685913086,739.041015625,125.16012954711914,12.5]],"start":636,"text":"3） 不使用任何表查询语句。"}],"type":5},{"date":"2021-12-06 22:03:49","docid":1,"fillcolor":"ffffed99","id":90,"originaltext":"4） 查询 mysql， information_schema或 performance_schema 数据库中的表时，不会走查询缓存。","page":5,"textblocks":[{"first":[52.35793685913086,92.4202651977539,5.579345703125,14.5],"last":[485.1330261230469,92.4202651977539,9.75408935546875,14.5],"length":68,"rects":[[52.35793685913086,92.4202651977539,442.52917861938477,14.5]],"start":0,"text":"4） 查询 mysql， information_schema或 performance_schema 数据库中的表时，不会走查询缓存。"}],"type":5},{"date":"2021-12-06 22:04:14","docid":1,"fillcolor":"ffffed99","id":91,"originaltext":"5） 在存储的函数，触发器或事件的主体内执行的查询。","page":5,"textblocks":[{"first":[52.35793685913086,155.546630859375,5.579345703125,13.5],"last":[284.8131408691406,155.546630859375,9.75408935546875,13.5],"length":26,"rects":[[52.35793685913086,155.546630859375,242.20929336547852,13.5]],"start":69,"text":"5） 在存储的函数，触发器或事件的主体内执行的查询。"}],"type":5},{"date":"2021-12-06 22:04:19","docid":1,"fillcolor":"ffffed99","id":92,"originaltext":"6） 如果表更改，则使用该表的所有高速缓存查询都将变为无效并从高速缓存中删除。这包括使用MERGE映射到已更改表的表的查询。一个表可以被许多类型的语句，如被改变 INSERT， UPDATE， DELETE， TRUNCATETABLE， ALTER TABLE， DROP TABLE，或 DROP DATABASE 。","page":5,"textblocks":[{"first":[52.35793685913086,180.05615234375,5.579345703125,12.5],"last":[319.6764221191406,210.819091796875,9.75408935546875,10.5],"length":163,"rects":[[52.35793685913086,180.05615234375,480.9754981994629,12.5],[52.35793685913086,195.312744140625,463.1778907775879,12.5],[52.35793685913086,210.819091796875,277.0725746154785,10.5]],"start":96,"text":"6） 如果表更改，则使用该表的所有高速缓存查询都将变为无效并从高速缓存中删除。这包括使用MERGE映射到\n已更改表的表的查询。一个表可以被许多类型的语句，如被改变 INSERT， UPDATE， DELETE， TRUNCATE\nTABLE， ALTER TABLE， DROP TABLE，或 DROP DATABASE 。"}],"type":5}],"originaltext":" 查询缓存失效的情况","page":4,"textblocks":[{"first":[69.75680541992188,529.704345703125,3.1700820922851562,14.5],"last":[170.46206665039062,529.704345703125,12.192626953125,14.5],"length":10,"rects":[[69.75680541992188,529.704345703125,112.89788818359375,14.5]],"start":467,"text":" 查询缓存失效的情况"}],"type":5}],"originaltext":"Mysql中查询缓存优化","page":1,"textblocks":[{"first":[68.68629455566406,593.4320068359375,13.797172546386719,18.5],"last":[199.5838623046875,593.4320068359375,14.631149291992188,18.5],"length":12,"rects":[[68.68629455566406,593.4320068359375,145.52871704101562,18.5]],"start":263,"text":"Mysql中查询缓存优化"}],"type":5},{"date":"2021-12-06 22:04:27","docid":1,"fillcolor":"ffffed99","folded":true,"id":93,"markups":[{"date":"2021-12-06 22:57:12","docid":1,"fillcolor":"ffffed99","folded":true,"id":94,"markups":[{"content":"保证操作系统和其他程序的内存足够的情况，有多少缓存给多少缓存","date":"2021-12-06 22:57:18","docid":1,"fillcolor":"ffffed99","id":95,"originaltext":"1） 将尽量多的内存分配给MySQL做缓存，但要给操作系统和其他程序预留足够内存。","page":5,"textblocks":[{"first":[52.35793685913086,315.11279296875,5.579345703125,12.5],"last":[414.0882873535156,315.11279296875,9.75408935546875,12.5],"length":41,"rects":[[52.35793685913086,315.11279296875,371.4844398498535,12.5]],"start":291,"text":"1） 将尽量多的内存分配给MySQL做缓存，但要给操作系统和其他程序预留足够内存。"}],"type":5},{"content":"MyISAM完全依赖系统的IO缓存，所以更多内存空间要留给操作系统","date":"2021-12-06 22:57:23","docid":1,"fillcolor":"ffffed99","id":96,"originaltext":"2） MyISAM 存储引擎的数据文件读取依赖于操作系统自身的IO缓存，因此，如果有MyISAM表，就要预留更多的内存给操作系统做IO缓存。","page":5,"textblocks":[{"first":[52.35793685913086,335.622314453125,5.579345703125,13.5],"last":[160.21502685546875,351.628662109375,9.754104614257812,12.5],"length":71,"rects":[[52.35793685913086,335.622314453125,484.6710548400879,13.5],[52.35793685913086,351.628662109375,117.6111946105957,12.5]],"start":333,"text":"2） MyISAM 存储引擎的数据文件读取依赖于操作系统自身的IO缓存，因此，如果有MyISAM表，就要预留更多的\n内存给操作系统做IO缓存。"}],"type":5},{"content":"对于排序区和连接区等缓存是根据每个数据库会话进行分配，所以不能设置太大，不得话并发过高，物理内存直接就没有了","date":"2021-12-06 22:57:28","docid":1,"fillcolor":"ffffed99","id":97,"originaltext":"3） 排序区、连接区等缓存是分配给每个数据库会话（session）专用的，其默认值的设置要根据最大连接数合理分配，如果设置太大，不但浪费资源，而且在并发连接较高时会导致物理内存耗尽。","page":5,"textblocks":[{"first":[52.35793685913086,375.888427734375,5.579345703125,12.5],"last":[403.5054626464844,389.894775390625,9.75408935546875,12.5],"length":92,"rects":[[52.35793685913086,375.888427734375,480.82272720336914,12.5],[52.35793685913086,389.894775390625,360.90161514282227,12.5]],"start":405,"text":"3） 排序区、连接区等缓存是分配给每个数据库会话（session）专用的，其默认值的设置要根据最大连接数合理\n分配，如果设置太大，不但浪费资源，而且在并发连接较高时会导致物理内存耗尽。"}],"type":5}],"originaltext":"内存优化原则","page":5,"textblocks":[{"first":[72.92108154296875,287.3525390625,12.192626953125,15.5],"last":[133.8842010498047,287.3525390625,12.192626953125,15.5],"length":6,"rects":[[72.92108154296875,287.3525390625,73.15574645996094,15.5]],"start":283,"text":"内存优化原则"}],"type":5},{"date":"2021-12-06 23:03:36","docid":1,"fillcolor":"ffffed99","folded":true,"id":98,"markups":[{"date":"2021-12-06 23:07:10","docid":1,"fillcolor":"ffffed99","id":99,"originaltext":"myisam存储引擎使用 key_buffer 缓存索引块，加速myisam索引的读写速度。对于myisam表的数据块，mysql没有特别的缓存机制，完全依赖于操作系统的IO缓存。","page":5,"textblocks":[{"first":[52.35793685913086,462.3255310058594,9.071311950683594,14.5],"last":[267.5101013183594,477.431884765625,9.75408935546875,13.5],"length":91,"rects":[[52.35793685913086,462.3255310058594,488.87179946899414,14.5],[52.35793685913086,477.431884765625,224.90625381469727,13.5]],"start":517,"text":"myisam存储引擎使用 key_buffer 缓存索引块，加速myisam索引的读写速度。对于myisam表的数据块，mysql没\n有特别的缓存机制，完全依赖于操作系统的IO缓存。"}],"type":5},{"content":"索引的缓存","date":"2021-12-06 23:07:50","docid":1,"fillcolor":"ffffed99","folded":false,"id":100,"originaltext":"key_buffer_size","page":5,"textblocks":[{"first":[52.35793685913086,527.951416015625,6.047542572021484,8.5],"last":[120.2552261352539,527.951416015625,5.764671325683594,8.5],"length":15,"rects":[[52.35793685913086,527.951416015625,73.66196060180664,8.5]],"start":611,"text":"key_buffer_size"}],"type":5},{"content":"读缓存（独占）","date":"2021-12-06 23:31:40","docid":1,"fillcolor":"ffffed99","folded":false,"id":101,"originaltext":"read_buffer_size","page":5,"textblocks":[{"first":[52.35793685913086,677.264404296875,4.4283599853515625,8.5],"last":[125.34864044189453,677.264404296875,5.764671325683594,8.5],"length":16,"rects":[[52.35793685913086,677.264404296875,78.75537490844727,8.5]],"start":782,"text":"read_buffer_size"}],"type":5},{"content":"读并且排序的缓存（独占）","date":"2021-12-06 23:32:27","docid":1,"fillcolor":"ffffed99","folded":false,"id":102,"originaltext":"read_rnd_buffer_size","page":5,"textblocks":[{"first":[52.35793685913086,761.800048828125,4.4283599853515625,9.5],"last":[146.3687286376953,761.800048828125,5.764678955078125,9.5],"length":20,"rects":[[52.35793685913086,761.800048828125,99.77547073364258,9.5]],"start":908,"text":"read_rnd_buffer_size"}],"type":5}],"originaltext":" MyISAM 内存优化","page":5,"textblocks":[{"first":[69.75680541992188,437.665283203125,3.1700820922851562,12.5],"last":[161.75814819335938,437.665283203125,12.192626953125,12.5],"length":12,"rects":[[69.75680541992188,437.665283203125,104.1939697265625,12.5]],"start":503,"text":" MyISAM 内存优化"}],"type":5},{"date":"2021-12-06 23:32:51","docid":1,"fillcolor":"ffffed99","folded":true,"id":103,"markups":[{"content":"缓存池里面存储了索引块和数据块","date":"2021-12-06 23:40:58","docid":1,"fillcolor":"ffffed99","id":104,"originaltext":"innodb用一块内存区做IO缓存池，该缓存池不仅用来缓存innodb的索引块，而且也用来缓存innodb的数据块。","page":6,"textblocks":[{"first":[52.35793685913086,159.9983367919922,2.467784881591797,13.5],"last":[520.4356079101562,159.9983367919922,9.75408935546875,13.5],"length":58,"rects":[[52.35793685913086,159.9983367919922,477.83176040649414,13.5]],"start":163,"text":"innodb用一块内存区做IO缓存池，该缓存池不仅用来缓存innodb的索引块，而且也用来缓存innodb的数据块。"}],"type":5},{"content":"扩大缓存池，默认128M","date":"2021-12-06 23:41:27","docid":1,"fillcolor":"ffffed99","id":105,"originaltext":"innodb_buffer_pool_size","page":6,"textblocks":[{"first":[52.35793685913086,207.2683563232422,2.9749984741210938,13.5],"last":[162.6962890625,207.2683563232422,5.764678955078125,13.5],"length":23,"rects":[[52.35793685913086,207.2683563232422,116.10303115844727,13.5]],"start":224,"text":"innodb_buffer_pool_size"}],"type":5},{"content":"保证执行事务的时候不会讲log日志放入了磁盘","date":"2021-12-06 23:41:33","docid":1,"fillcolor":"ffffed99","id":106,"originaltext":"innodb_log_buffer_size","page":6,"textblocks":[{"first":[52.35793685913086,350.62744140625,2.9749984741210938,9.5],"last":[155.99522399902344,350.62744140625,5.764678955078125,9.5],"length":22,"rects":[[52.35793685913086,350.62744140625,109.4019660949707,9.5]],"start":379,"text":"innodb_log_buffer_size"}],"type":5}],"originaltext":" InnoDB 内存优化","page":6,"textblocks":[{"first":[69.75680541992188,133.63809204101562,3.1700820922851562,15.5],"last":[157.49549865722656,133.63809204101562,12.192626953125,15.5],"length":12,"rects":[[69.75680541992188,133.63809204101562,99.93132019042969,15.5]],"start":149,"text":" InnoDB 内存优化"}],"type":5}],"originaltext":" Mysql内存管理及优化","page":5,"textblocks":[{"first":[64.8822021484375,257.2410583496094,3.8041000366210938,19.5],"last":[199.5838623046875,257.2410583496094,14.631149291992188,19.5],"length":13,"rects":[[64.8822021484375,257.2410583496094,149.3328094482422,19.5]],"start":264,"text":" Mysql内存管理及优化"}],"type":5},{"date":"2021-12-06 23:45:50","docid":1,"fillcolor":"ffffed99","folded":true,"id":107,"markups":[{"date":"2021-12-06 23:46:14","docid":1,"fillcolor":"ffffed99","id":108,"markups":[{"date":"2021-12-06 23:47:09","docid":1,"fillcolor":"ffffed99","id":109,"originaltext":"采用max_connections 控制允许连接到MySQL数据库的最大数量，默认值是 151。","page":6,"textblocks":[{"first":[52.35793685913086,585.3775634765625,9.754096984863281,14.5],"last":[399.5285949707031,585.3775634765625,9.75408935546875,14.5],"length":48,"rects":[[52.35793685913086,585.3775634765625,356.924747467041,14.5]],"start":695,"text":"采用max_connections 控制允许连接到MySQL数据库的最大数量，默认值是 151。"}],"type":5}],"originaltext":"max_connections","page":6,"textblocks":[{"first":[72.92688751220703,562.71728515625,11.973152160644531,10.5],"last":[172.19923400878906,562.71728515625,6.0597381591796875,10.5],"length":15,"rects":[[72.92688751220703,562.71728515625,105.33208465576172,10.5]],"start":678,"text":"max_connections"}],"type":5},{"content":"阻塞队列的最大值","date":"2021-12-06 23:46:17","docid":1,"fillcolor":"ffffed99","id":110,"markups":[{"date":"2021-12-07 00:36:34","docid":1,"fillcolor":"ffffed99","id":111,"originaltext":"之后的版本默认为 50 +（max_connections / 5）， 但最大不超过900。","page":7,"textblocks":[{"first":[378.6629943847656,86.767578125,9.75408935546875,12.5],"last":[252.68368530273438,102.27392578125,9.75408935546875,12.5],"length":47,"rects":[[378.6629943847656,86.767578125,99.84292602539062,12.5],[52.35793685913086,102.27392578125,210.07983779907227,12.5]],"start":166,"text":"之后的版本默认为 50 +\n（max_connections / 5）， 但最大不超过900。"}],"type":5}],"originaltext":"back_log","page":6,"textblocks":[{"first":[72.92688751220703,716.6331787109375,7.717933654785156,15.5],"last":[118.11274719238281,716.6331787109375,6.888832092285156,15.5],"length":8,"rects":[[72.92688751220703,716.6331787109375,52.07469177246094,15.5]],"start":990,"text":"back_log"}],"type":5},{"content":"表的缓存","date":"2021-12-06 23:46:22","docid":1,"fillcolor":"ffffed99","id":112,"originaltext":"table_open_cache","page":7,"textblocks":[{"first":[72.92688751220703,174.80419921875,5.291595458984375,10.5],"last":[172.63815307617188,174.80419921875,7.205841064453125,10.5],"length":16,"rects":[[72.92688751220703,174.80419921875,106.91710662841797,10.5]],"start":265,"text":"table_open_cache"}],"type":5},{"content":"核心线程","date":"2021-12-06 23:46:26","docid":1,"fillcolor":"ffffed99","id":113,"originaltext":"thread_cache_size","page":7,"textblocks":[{"first":[72.92688751220703,299.5074157714844,5.291595458984375,14.5],"last":[174.6732940673828,299.5074157714844,7.205841064453125,14.5],"length":17,"rects":[[72.92688751220703,299.5074157714844,108.9522476196289,14.5]],"start":438,"text":"thread_cache_size"}],"type":5},{"content":"行锁的超时时间","date":"2021-12-06 23:46:32","docid":1,"fillcolor":"ffffed99","id":114,"originaltext":" innodb_lock_wait_timeout","page":7,"textblocks":[{"first":[69.75680541992188,388.0445251464844,3.1700820922851562,14.5],"last":[226.33448791503906,388.0445251464844,5.291595458984375,14.5],"length":25,"rects":[[69.75680541992188,388.0445251464844,161.86927795410156,14.5]],"start":547,"text":" innodb_lock_wait_timeout"}],"type":5}],"originaltext":"Mysql并发参数调整","page":6,"textblocks":[{"first":[68.68629455566406,475.9326171875,13.797172546386719,17.5],"last":[184.9527130126953,475.9326171875,14.631149291992188,17.5],"length":11,"rects":[[68.68629455566406,475.9326171875,130.89756774902344,17.5]],"start":506,"text":"Mysql并发参数调整"}],"type":5},{"date":"2021-12-07 16:03:55","docid":1,"fillcolor":"ffffed99","folded":false,"id":115,"markups":[{"date":"2021-12-07 16:04:02","docid":1,"fillcolor":"ffffed99","folded":false,"id":116,"markups":[{"date":"2021-12-07 16:05:18","docid":1,"fillcolor":"ffffed99","id":117,"originaltext":"锁是计算机协调多个进程或线程并发访问某一资源的机制（避免争抢）。","page":7,"textblocks":[{"first":[52.35793685913086,546.4609375,9.754096984863281,13.5],"last":[354.7349853515625,546.4609375,9.75408935546875,13.5],"length":32,"rects":[[52.35793685913086,546.4609375,312.1311378479004,13.5]],"start":733,"text":"锁是计算机协调多个进程或线程并发访问某一资源的机制（避免争抢）。"}],"type":5}],"originaltext":"锁概述","page":7,"textblocks":[{"first":[72.92108154296875,520.70068359375,12.192626953125,14.5],"last":[97.30632781982422,520.70068359375,12.192619323730469,14.5],"length":3,"rects":[[72.92108154296875,520.70068359375,36.57786560058594,14.5]],"start":728,"text":"锁概述"}],"type":5},{"date":"2021-12-07 16:05:24","docid":1,"fillcolor":"ffffed99","folded":false,"id":118,"markups":[{"date":"2021-12-07 16:05:29","docid":1,"fillcolor":"ffffed99","id":119,"markups":[{"date":"2021-12-07 16:05:34","docid":1,"fillcolor":"ffffed99","id":120,"originaltext":"1） 表锁：操作时，会锁定整个表。","page":7,"textblocks":[{"first":[52.35793685913086,696.52392578125,5.579345703125,13.5],"last":[197.02626037597656,696.52392578125,9.754104614257812,13.5],"length":17,"rects":[[52.35793685913086,696.52392578125,154.42242813110352,13.5]],"start":933,"text":"1） 表锁：操作时，会锁定整个表。"}],"type":5},{"date":"2021-12-07 16:05:39","docid":1,"fillcolor":"ffffed99","id":121,"originaltext":"2） 行锁：操作时，会锁定当前操作行。","page":7,"textblocks":[{"first":[52.35793685913086,721.03369140625,5.579345703125,12.5],"last":[216.53445434570312,721.03369140625,9.754104614257812,12.5],"length":19,"rects":[[52.35793685913086,721.03369140625,173.93062210083008,12.5]],"start":951,"text":"2） 行锁：操作时，会锁定当前操作行。"}],"type":5}],"originaltext":"从对数据操作的粒度分 ：","page":7,"textblocks":[{"first":[52.35793685913086,673.9641723632812,9.754096984863281,13.5],"last":[152.4326934814453,673.9641723632812,9.754104614257812,13.5],"length":12,"rects":[[52.35793685913086,673.9641723632812,109.82886123657227,13.5]],"start":920,"text":"从对数据操作的粒度分 ："}],"type":5},{"date":"2021-12-07 16:05:43","docid":1,"fillcolor":"ffffed99","id":122,"markups":[{"content":"共享锁","date":"2021-12-07 16:05:58","docid":1,"fillcolor":"ffffed99","id":123,"originaltext":"1） 读锁（共享锁）：针对同一份数据，多个读操作可以同时进行而不会互相影响。","page":7,"textblocks":[{"first":[52.35793685913086,765.802734375,5.579345703125,12.5],"last":[401.8623352050781,765.802734375,9.75408935546875,12.5],"length":38,"rects":[[52.35793685913086,765.802734375,359.258487701416,12.5]],"start":983,"text":"1） 读锁（共享锁）：针对同一份数据，多个读操作可以同时进行而不会互相影响。"}],"type":5},{"content":"独占锁","date":"2021-12-07 16:06:02","docid":1,"fillcolor":"ffffed99","id":124,"originaltext":"2） 写锁（排它锁）：当前操作没有完成之前，它会阻断其他写锁和读锁。","page":8,"textblocks":[{"first":[52.35793685913086,56.7548828125,5.579345703125,12.5],"last":[362.845947265625,56.7548828125,9.75408935546875,12.5],"length":34,"rects":[[52.35793685913086,56.7548828125,320.2420997619629,12.5]],"start":244,"text":"2） 写锁（排它锁）：当前操作没有完成之前，它会阻断其他写锁和读锁。"}],"type":5}],"originaltext":"从对数据操作的类型分：","page":7,"textblocks":[{"first":[52.35793685913086,741.54296875,9.754096984863281,13.5],"last":[149.89892578125,741.54296875,9.754104614257812,13.5],"length":11,"rects":[[52.35793685913086,741.54296875,107.29509353637695,13.5]],"start":971,"text":"从对数据操作的类型分："}],"type":5}],"originaltext":" 锁分类","page":7,"textblocks":[{"first":[69.75680541992188,646.50390625,3.1700820922851562,15.5],"last":[97.30632781982422,646.50390625,12.192619323730469,15.5],"length":4,"rects":[[69.75680541992188,646.50390625,39.74214172363281,15.5]],"start":914,"text":" 锁分类"}],"type":5}],"originaltext":" Mysql锁问题","page":7,"textblocks":[{"first":[64.8822021484375,492.689453125,3.8041000366210938,14.5],"last":[141.05926513671875,492.689453125,14.631149291992188,14.5],"length":9,"rects":[[64.8822021484375,492.689453125,90.80821228027344,14.5]],"start":713,"text":" Mysql锁问题"}],"type":5},{"date":"2021-12-07 16:06:18","docid":1,"fillcolor":"ffffed99","folded":false,"id":125,"markups":[{"date":"2021-12-07 16:06:38","docid":1,"fillcolor":"ffffed99","id":126,"originaltext":"InnoDB支持支持不支持","page":8,"textblocks":[{"first":[62.86235046386719,227.576171875,2.7213897705078125,12.5],"last":[456.7778625488281,227.576171875,9.75408935546875,12.5],"length":13,"rects":[[62.86235046386719,227.576171875,403.6696014404297,12.5]],"start":29,"text":"InnoDB支持支持不支持"}],"type":5},{"content":"开销，加锁快慢，死锁，锁粒度","date":"2021-12-07 16:06:43","docid":1,"fillcolor":"ffffed99","folded":true,"id":127,"markups":[{"date":"2021-12-07 16:07:17","docid":1,"fillcolor":"ffffed99","id":128,"originaltext":"表级锁偏向MyISAM 存储引擎，开销小，加锁快；不会出现死锁；锁定粒度大，发生锁冲突的概率最高,并发度最低。","page":8,"textblocks":[{"first":[62.86235046386719,380.140625,9.754096984863281,13.5],"last":[145.39703369140625,395.14697265625,9.754104614257812,13.5],"length":58,"rects":[[62.86235046386719,380.140625,19.508193969726562,13.5],[62.86235046386719,395.14697265625,9.754096984863281,13.5],[106.38063049316406,379.0406188964844,422.10765075683594,14.5],[106.38063049316406,395.14697265625,48.7705078125,13.5]],"start":77,"text":"表级\n锁\n偏向MyISAM 存储引擎，开销小，加锁快；不会出现死锁；锁定粒度大，发生锁冲突的概率最高,并\n发度最低。"}],"type":5},{"date":"2021-12-07 16:07:21","docid":1,"fillcolor":"ffffed99","id":129,"originaltext":"行级锁偏向InnoDB 存储引擎，开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低,并发度也最高。","page":8,"textblocks":[{"first":[62.86235046386719,419.9072265625,9.754096984863281,12.5],"last":[155.151123046875,434.91357421875,9.754104614257812,12.5],"length":59,"rects":[[62.86235046386719,419.9072265625,19.508193969726562,12.5],[62.86235046386719,434.91357421875,9.754096984863281,12.5],[106.38063049316406,419.9072265625,419.3500213623047,12.5],[106.38063049316406,434.91357421875,58.52459716796875,12.5]],"start":136,"text":"行级\n锁\n偏向InnoDB 存储引擎，开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低,并\n发度也最高。"}],"type":5},{"date":"2021-12-07 16:07:24","docid":1,"fillcolor":"ffffed99","id":130,"originaltext":"页面锁开销和加锁时间界于表锁和行锁之间；会出现死锁；锁定粒度界于表锁和行锁之间，并发度一般。","page":8,"textblocks":[{"first":[62.86235046386719,459.67431640625,9.754096984863281,12.5],"last":[516.052734375,467.17724609375,9.75408935546875,13.5],"length":47,"rects":[[62.86235046386719,459.67431640625,19.508193969726562,12.5],[62.86235046386719,467.17724609375,462.94447326660156,13.5]],"start":196,"text":"页面\n锁开销和加锁时间界于表锁和行锁之间；会出现死锁；锁定粒度界于表锁和行锁之间，并发度一般。"}],"type":5},{"date":"2021-12-07 16:23:40","docid":1,"fillcolor":"ffffed99","folded":true,"id":131,"markups":[{"date":"2021-12-07 16:23:48","docid":1,"fillcolor":"ffffed99","id":132,"originaltext":"表级锁更适合于以查询为主，只有少量按索引条件更新数据的应用","page":8,"textblocks":[{"first":[520.5546264648438,506.94384765625,9.75408935546875,12.5],"last":[305.9644775390625,521.9501953125,9.75408935546875,12.5],"length":30,"rects":[[520.5546264648438,506.94384765625,19.50823974609375,12.5],[52.35793685913086,521.9501953125,263.3606300354004,12.5]],"start":434,"text":"表级\n锁更适合于以查询为主，只有少量按索引条件更新数据的应用"}],"type":5},{"date":"2021-12-07 16:23:34","docid":1,"fillcolor":"ffffed99","id":133,"originaltext":"而行级锁则更适合于有大量按索引条件并发更新少量不同数据，同时又有并查询的应用","page":8,"textblocks":[{"first":[387.307373046875,521.9501953125,9.75408935546875,12.5],"last":[266.9480895996094,536.95654296875,9.75408935546875,12.5],"length":39,"rects":[[387.307373046875,521.9501953125,146.31146240234375,12.5],[52.35793685913086,536.95654296875,224.34424209594727,12.5]],"start":473,"text":"而行级锁则更适合于有大量按索引\n条件并发更新少量不同数据，同时又有并查询的应用"}],"type":5}],"originaltext":"从上述特点可见","page":8,"textblocks":[{"first":[52.35793685913086,506.94384765625,9.754096984863281,12.5],"last":[110.88252258300781,506.94384765625,9.754096984863281,12.5],"length":7,"rects":[[52.35793685913086,506.94384765625,68.27868270874023,12.5]],"start":386,"text":"从上述特点可见"}],"type":5}],"originaltext":"MySQL这3种锁的特性可大致归纳如下 ：","page":8,"textblocks":[{"first":[52.35793685913086,308.86083984375,8.80794906616211,12.5],"last":[219.00631713867188,308.86083984375,9.754104614257812,12.5],"length":21,"rects":[[52.35793685913086,308.86083984375,176.40248489379883,12.5]],"start":364,"text":"MySQL这3种锁的特性可大致归纳如下 ："}],"type":5},{"date":"2021-12-07 16:23:58","docid":1,"fillcolor":"ffffed99","folded":false,"id":134,"markups":[{"date":"2021-12-07 16:30:08","docid":1,"fillcolor":"ffffed99","folded":true,"id":135,"markups":[{"content":"自动加读写锁，加锁后要解锁，不得话不能对另外的表加锁","date":"2021-12-07 16:30:18","docid":1,"fillcolor":"ffffed99","id":136,"originaltext":"MyISAM 在执行查询语句（SELECT）前，会自动给涉及的所有表加读锁，在执行更新操作（UPDATE、DELETE、INSERT 等）前，会自动给涉及的表加写锁，这个过程并不需要用户干预，因此，用户一般不需要直接用 LOCKTABLE 命令给 MyISAM 表显式加锁。","page":8,"textblocks":[{"first":[52.35793685913086,681.767578125,8.80794906616211,12.5],"last":[202.46055603027344,712.7802734375,9.754104614257812,10.5],"length":139,"rects":[[52.35793685913086,681.767578125,483.5613136291504,12.5],[52.35793685913086,696.77392578125,471.6266212463379,12.5],[52.35793685913086,712.7802734375,159.8567237854004,10.5]],"start":606,"text":"MyISAM 在执行查询语句（SELECT）前，会自动给涉及的所有表加读锁，在执行更新操作（UPDATE、DELETE、\nINSERT 等）前，会自动给涉及的表加写锁，这个过程并不需要用户干预，因此，用户一般不需要直接用 LOCK\nTABLE 命令给 MyISAM 表显式加锁。"}],"type":5},{"date":"2021-12-07 16:30:39","docid":1,"fillcolor":"ffffed99","id":137,"originaltext":"显示加表锁语法：","page":8,"textblocks":[{"first":[52.35793685913086,734.28955078125,9.754096984863281,13.5],"last":[120.63662719726562,734.28955078125,9.754104614257812,13.5],"length":8,"rects":[[52.35793685913086,734.28955078125,78.03279495239258,13.5]],"start":746,"text":"显示加表锁语法："}],"type":5},{"date":"2021-12-07 16:35:42","docid":1,"fillcolor":"ffffed99","id":138,"originaltext":"读锁案例","page":9,"textblocks":[{"first":[77.15753936767578,144.2415008544922,9.754096984863281,13.5],"last":[106.41983795166016,144.2415008544922,9.754096984863281,13.5],"length":4,"rects":[[77.15753936767578,144.2415008544922,39.016395568847656,13.5]],"start":8,"text":"读锁案例"}],"type":5}],"originaltext":" 如何加表锁","page":8,"textblocks":[{"first":[74.62655639648438,657.75732421875,2.5360641479492188,12.5],"last":[116.17393493652344,657.75732421875,9.754096984863281,12.5],"length":6,"rects":[[74.62655639648438,657.75732421875,51.301475524902344,12.5]],"start":598,"text":" 如何加表锁"}],"type":5},{"date":"2021-12-07 16:38:31","docid":1,"fillcolor":"ffffed99","folded":false,"id":139,"markups":[{"content":"读写分开了，\n读的时候，其他线程不能写\n写的时候，其他线程不能写也不能读","date":"2021-12-07 16:38:26","docid":1,"fillcolor":"ffffed99","folded":false,"id":140,"markups":[{"date":"2021-12-07 16:38:29","docid":1,"fillcolor":"ffffed99","id":141,"originaltext":"1） 对MyISAM 表的读操作，不会阻塞其他用户对同一表的读请求，但会阻塞对同一表的写请求；","page":12,"textblocks":[{"first":[52.35793685913086,579.974609375,5.579345703125,12.5],"last":[460.67742919921875,579.974609375,9.75408935546875,12.5],"length":47,"rects":[[52.35793685913086,579.974609375,418.07358169555664,12.5]],"start":124,"text":"1） 对MyISAM 表的读操作，不会阻塞其他用户对同一表的读请求，但会阻塞对同一表的写请求；"}],"type":5},{"date":"2021-12-07 16:38:44","docid":1,"fillcolor":"ffffed99","id":142,"originaltext":"2） 对MyISAM 表的写操作，则会阻塞其他用户对同一表的读和写操作；","page":12,"textblocks":[{"first":[52.35793685913086,601.1343994140625,5.579345703125,14.5],"last":[353.3823547363281,601.1343994140625,9.75408935546875,14.5],"length":36,"rects":[[52.35793685913086,601.1343994140625,310.778507232666,14.5]],"start":172,"text":"2） 对MyISAM 表的写操作，则会阻塞其他用户对同一表的读和写操作；"}],"type":5}],"originaltext":"由上表可见：","page":12,"textblocks":[{"first":[52.35793685913086,556.1648559570312,9.754096984863281,13.5],"last":[101.12842559814453,556.1648559570312,9.754096984863281,13.5],"length":6,"rects":[[52.35793685913086,556.1648559570312,58.52458572387695,13.5]],"start":117,"text":"由上表可见："}],"type":5},{"date":"2021-12-07 16:38:53","docid":1,"fillcolor":"ffffed99","id":143,"originaltext":"读锁会阻塞写，但是不会阻塞读。而写锁，则既会阻塞读，又会阻塞写。","page":12,"textblocks":[{"first":[120.63662719726562,624.744140625,9.754104614257812,12.5],"last":[423.013671875,624.744140625,9.75408935546875,12.5],"length":32,"rects":[[120.63662719726562,624.744140625,312.1311340332031,12.5]],"start":216,"text":"读锁会阻塞写，但是不会阻塞读。而写锁，则既会阻塞读，又会阻塞写。"}],"type":5},{"content":"同一时刻有线程抢夺读锁和写锁，写锁优先","date":"2021-12-07 16:40:54","docid":1,"fillcolor":"ffffed99","id":144,"originaltext":"MyISAM 的读写锁调度是写优先，这也是MyISAM不适合做写为主的表的存储引擎的原因。","page":12,"textblocks":[{"first":[81.62023162841797,669.4127197265625,8.807952880859375,14.5],"last":[460.07733154296875,669.4127197265625,9.75408935546875,14.5],"length":45,"rects":[[81.62023162841797,669.4127197265625,388.21118927001953,14.5]],"start":254,"text":"MyISAM 的读写锁调度是写优先，这也是MyISAM不适合做写为主的表的存储引擎的原因。"}],"type":5}],"originaltext":" 结论","page":12,"textblocks":[{"first":[74.62655639648438,421.10821533203125,2.5360641479492188,13.5],"last":[86.91163635253906,421.10821533203125,9.754096984863281,13.5],"length":3,"rects":[[74.62655639648438,421.10821533203125,22.03917694091797,13.5]],"start":96,"text":" 结论"}],"type":5},{"date":"2021-12-07 16:41:42","docid":1,"fillcolor":"ffffed99","folded":true,"id":145,"markups":[{"content":"可以查看当前那张表在使用","date":"2021-12-07 16:47:11","docid":1,"fillcolor":"ffffed99","id":146,"originaltext":"show open tables；","page":12,"textblocks":[{"first":[80.11959838867188,765.6248168945312,5.293548583984375,8.7786865234375],"last":[164.75152587890625,765.6248168945312,8.7786865234375,8.7786865234375],"length":17,"rects":[[80.11959838867188,765.6248168945312,93.41061401367188,8.7786865234375]],"start":386,"text":"show open tables；"}],"type":5},{"date":"2021-12-07 16:47:54","docid":1,"fillcolor":"ffffed99","folded":false,"id":147,"markups":[{"content":"立即获取锁的次数","date":"2021-12-07 16:48:48","docid":1,"fillcolor":"ffffed99","id":148,"originaltext":"Table_locks_immediate ： 指的是能够立即获得表级锁的次数，每立即获取锁，值加1。","page":13,"textblocks":[{"first":[52.35793685913086,417.40625,5.394016265869141,12.5],"last":[420.9561767578125,417.40625,9.75408935546875,12.5],"length":51,"rects":[[52.35793685913086,417.40625,378.3523292541504,12.5]],"start":92,"text":"Table_locks_immediate ： 指的是能够立即获得表级锁的次数，每立即获取锁，值加1。"}],"type":5},{"content":"锁竞争的次数，就是竞争没有获取到锁，等待的次数","date":"2021-12-07 16:48:50","docid":1,"fillcolor":"ffffed99","id":149,"originaltext":"Table_locks_waited ： 指的是不能立即获取表级锁而需要等待的次数，每等待一次，该值加1，此值高说明存在着较为严重的表级锁争用情况。","page":13,"textblocks":[{"first":[52.35793685913086,439.86602783203125,5.394016265869141,13.5],"last":[169.40711975097656,455.171875,9.754104614257812,12.5],"length":75,"rects":[[52.35793685913086,439.86602783203125,486.65707778930664,13.5],[52.35793685913086,455.171875,126.80328750610352,12.5]],"start":144,"text":"Table_locks_waited ： 指的是不能立即获取表级锁而需要等待的次数，每等待一次，该值加1，此值高说明存在着\n较为严重的表级锁争用情况。"}],"type":5}],"originaltext":"show status like 'Table_locks%';","page":13,"textblocks":[{"first":[80.11959838867188,317.68536376953125,5.293548583984375,8.7786865234375],"last":[244.09388732910156,317.68536376953125,5.293548583984375,8.7786865234375],"length":32,"rects":[[80.11959838867188,317.68536376953125,169.26783752441406,8.7786865234375]],"start":424,"text":"show status like 'Table_locks%';"}],"type":5}],"originaltext":" 查看锁的争用情况","page":12,"textblocks":[{"first":[74.62655639648438,732.0390625,2.5360641479492188,12.5],"last":[145.4362335205078,732.0390625,9.754104614257812,12.5],"length":9,"rects":[[74.62655639648438,732.0390625,80.56378173828125,12.5]],"start":350,"text":" 查看锁的争用情况"}],"type":5}],"originaltext":"MyISAM 表锁","page":8,"textblocks":[{"first":[72.92688751220703,584.72705078125,11.497642517089844,12.5],"last":[137.37290954589844,584.72705078125,12.192626953125,12.5],"length":9,"rects":[[72.92688751220703,584.72705078125,76.6386489868164,12.5]],"start":538,"text":"MyISAM 表锁"}],"type":5},{"content":"写的时候其他线程拿不到读和写锁\n读的时候其他线程拿不到写锁\n对于select可以不经过锁","date":"2021-12-07 16:28:52","docid":1,"fillcolor":"ffffed99","folded":false,"id":150,"markups":[{"date":"2021-12-07 16:49:59","docid":1,"fillcolor":"ffffed99","folded":true,"id":151,"markups":[{"date":"2021-12-07 16:50:22","docid":1,"fillcolor":"ffffed99","id":152,"originaltext":"InnoDB 与 MyISAM 的最大不同有两点：一是支持事务；二是 采用了行级锁。","page":13,"textblocks":[{"first":[52.35793685913086,589.1285400390625,2.721393585205078,14.5],"last":[377.1341552734375,589.1285400390625,9.75408935546875,14.5],"length":42,"rects":[[52.35793685913086,589.1285400390625,334.5303077697754,14.5]],"start":310,"text":"InnoDB 与 MyISAM 的最大不同有两点：一是支持事务；二是 采用了行级锁。"}],"type":5}],"originaltext":"行锁介绍","page":13,"textblocks":[{"first":[77.15753936767578,527.9521484375,9.754096984863281,12.5],"last":[106.41983795166016,527.9521484375,9.754096984863281,12.5],"length":4,"rects":[[77.15753936767578,527.9521484375,39.016395568847656,12.5]],"start":243,"text":"行锁介绍"}],"type":5},{"date":"2021-12-07 16:50:27","docid":1,"fillcolor":"ffffed99","folded":false,"id":153,"markups":[{"date":"2021-12-07 16:50:32","docid":1,"fillcolor":"ffffed99","folded":false,"id":154,"markups":[{"date":"2021-12-07 16:50:47","docid":1,"fillcolor":"ffffed99","folded":false,"id":155,"markups":[{"content":"要么全部成功要么全部失败","date":"2021-12-07 16:51:23","docid":1,"fillcolor":"ffffed99","id":156,"originaltext":"原子性（Atomicity）事务是一个原子操作单元，其对数据的修改，要么全部成功，要么全部失败。","page":14,"textblocks":[{"first":[62.86235046386719,86.767578125,9.754096984863281,12.5],"last":[492.7929992675781,94.2705078125,9.75408935546875,13.5],"length":50,"rects":[[62.86235046386719,86.767578125,29.262290954589844,12.5],[62.86235046386719,102.7744140625,62.02519989013672,10.5],[170.90774536132812,94.2705078125,331.63934326171875,13.5]],"start":9,"text":"原子性\n（Atomicity）\n事务是一个原子操作单元，其对数据的修改，要么全部成功，要么全部失败。"}],"type":5},{"content":"数据状态的一致","date":"2021-12-07 16:51:28","docid":1,"fillcolor":"ffffed99","id":157,"originaltext":"一致性（Consistent）在事务开始和完成时，数据都必须保持一致状态。","page":14,"textblocks":[{"first":[62.86235046386719,125.5341796875,9.754096984863281,13.5],"last":[375.7438049316406,134.037109375,9.75408935546875,12.5],"length":39,"rects":[[62.86235046386719,125.5341796875,29.262290954589844,13.5],[62.86235046386719,142.041015625,67.65953063964844,12.5],[170.90774536132812,134.037109375,214.59014892578125,12.5]],"start":60,"text":"一致性\n（Consistent）\n在事务开始和完成时，数据都必须保持一致状态。"}],"type":5},{"content":"隔离并发的环境","date":"2021-12-07 16:51:42","docid":1,"fillcolor":"ffffed99","id":158,"originaltext":"隔离性（Isolation）数据库系统提供一定的隔离机制，保证事务在不受外部并发操作影响的 “独立” 环境下运行。","page":14,"textblocks":[{"first":[62.86235046386719,174.3046875,9.754096984863281,12.5],"last":[200.1700439453125,181.3076171875,9.754104614257812,12.5],"length":59,"rects":[[62.86235046386719,174.3046875,87.7154541015625,12.5],[170.90774536132812,166.30078125,353.2907409667969,13.5],[170.90774536132812,181.3076171875,39.01640319824219,12.5]],"start":100,"text":"隔离性（Isolation）\n数据库系统提供一定的隔离机制，保证事务在不受外部并发操作影响的 “独立” 环境\n下运行。"}],"type":5},{"content":"数据永久的保存","date":"2021-12-07 16:51:51","docid":1,"fillcolor":"ffffed99","id":159,"originaltext":"持久性（Durable）事务完成之后，对于数据的修改是永久的。","page":14,"textblocks":[{"first":[62.86235046386719,206.0673828125,9.754096984863281,12.5],"last":[346.48150634765625,206.0673828125,9.75408935546875,12.5],"length":31,"rects":[[62.86235046386719,206.0673828125,293.3732452392578,12.5]],"start":160,"text":"持久性（Durable）事务完成之后，对于数据的修改是永久的。"}],"type":5}],"originaltext":"事务具有以下4个特性，简称为事务ACID属性","page":13,"textblocks":[{"first":[52.35793685913086,705.52734375,9.754096984863281,13.5],"last":[235.96168518066406,705.52734375,9.754104614257812,13.5],"length":22,"rects":[[52.35793685913086,705.52734375,193.35785293579102,13.5]],"start":400,"text":"事务具有以下4个特性，简称为事务ACID属性"}],"type":5}],"originaltext":"事务及其ACID属性","page":13,"textblocks":[{"first":[52.35793685913086,660.7587890625,9.754096984863281,12.5],"last":[124.32775115966797,660.7587890625,9.754096984863281,12.5],"length":10,"rects":[[52.35793685913086,660.7587890625,81.72391128540039,12.5]],"start":367,"text":"事务及其ACID属性"}],"type":5},{"date":"2021-12-07 16:52:59","docid":1,"fillcolor":"ffffed99","folded":false,"id":160,"markups":[{"content":"后提交的值会覆盖前面提交的值","date":"2021-12-07 16:53:05","docid":1,"fillcolor":"ffffed99","id":161,"originaltext":"丢失更新（LostUpdate）当两个或多个事务选择同一行，最初的事务修改的值，会被后面的事务修改的值覆盖。","page":14,"textblocks":[{"first":[62.86235046386719,317.865234375,9.754096984863281,12.5],"last":[182.1624755859375,332.87109375,9.754104614257812,12.5],"length":57,"rects":[[62.86235046386719,317.865234375,67.82025146484375,12.5],[62.86235046386719,332.57110595703125,43.15045166015625,13.5],[172.4083709716797,317.865234375,351.1475372314453,12.5],[172.4083709716797,332.87109375,19.508209228515625,12.5]],"start":197,"text":"丢失更新（Lost\nUpdate）\n当两个或多个事务选择同一行，最初的事务修改的值，会被后面的事务修改的值覆\n盖。"}],"type":5},{"content":"访问到还来不及提交的值","date":"2021-12-07 16:53:09","docid":1,"fillcolor":"ffffed99","id":162,"originaltext":"脏读（DirtyReads）当一个事务正在访问数据，并且对数据进行了修改，而这种修改还没有提交到数据库中，这时，另外一个事务也访问这个数据，然后使用了这个数据。","page":14,"textblocks":[{"first":[62.86235046386719,358.6318359375,9.754096984863281,10.5],"last":[455.2772216796875,372.6376953125,9.75408935546875,12.5],"length":83,"rects":[[62.86235046386719,358.6318359375,51.17976379394531,10.5],[62.86235046386719,374.6376953125,37.31132507324219,9.5],[172.4083709716797,357.6318359375,351.1475372314453,12.5],[172.4083709716797,372.6376953125,292.62294006347656,12.5]],"start":255,"text":"脏读（Dirty\nReads）\n当一个事务正在访问数据，并且对数据进行了修改，而这种修改还没有提交到数据\n库中，这时，另外一个事务也访问这个数据，然后使用了这个数据。"}],"type":5},{"content":"同一个事务查询相同的变量得到不同的值","date":"2021-12-07 16:53:14","docid":1,"fillcolor":"ffffed99","id":163,"originaltext":"不可重复读（Non-RepeatableReads）一个事务在读取某些数据后的某个时间，再次读取以前读过的数据，却发现和以前读出的数据不一致。","page":14,"textblocks":[{"first":[62.86235046386719,397.09844970703125,9.754096984863281,13.5],"last":[250.441162109375,419.9072265625,9.75408935546875,12.5],"length":75,"rects":[[62.86235046386719,397.09844970703125,80.90049743652344,13.5],[62.86235046386719,413.404296875,51.160240173339844,9.5],[62.86235046386719,428.4111328125,37.31132507324219,9.5],[172.4083709716797,404.9013671875,351.1475372314453,12.5],[172.4083709716797,419.9072265625,87.78688049316406,12.5]],"start":339,"text":"不可重复读（Non-\nRepeatable\nReads）\n一个事务在读取某些数据后的某个时间，再次读取以前读过的数据，却发现和以前\n读出的数据不一致。"}],"type":5},{"content":"同一个事务查询相同的变量得到多了一部分的值，","date":"2021-12-07 16:53:18","docid":1,"fillcolor":"ffffed99","id":164,"originaltext":"幻读（PhantomReads）一个事务按照相同的查询条件重新读取以前查询过的数据，却发现其他事务插入了满足其查询条件的新数据。","page":14,"textblocks":[{"first":[62.86235046386719,451.87091064453125,9.754096984863281,13.5],"last":[279.7034606933594,467.177734375,9.75408935546875,12.5],"length":67,"rects":[[62.86235046386719,451.87091064453125,70.94155883789062,13.5],[62.86235046386719,470.177734375,37.31132507324219,8.5],[172.4083709716797,452.1708984375,351.1475372314453,12.5],[172.4083709716797,467.177734375,117.04917907714844,12.5]],"start":415,"text":"幻读（Phantom\nReads）\n一个事务按照相同的查询条件重新读取以前查询过的数据，却发现其他事务插入了\n满足其查询条件的新数据。"}],"type":5}],"originaltext":"并发事务处理带来的问题","page":14,"textblocks":[{"first":[52.35793685913086,260.8408203125,9.754096984863281,12.5],"last":[149.89892578125,260.8408203125,9.754104614257812,12.5],"length":11,"rects":[[52.35793685913086,260.8408203125,107.29509353637695,12.5]],"start":584,"text":"并发事务处理带来的问题"}],"type":5},{"date":"2021-12-07 16:53:43","docid":1,"fillcolor":"ffffed99","folded":false,"id":165,"markups":[{"content":"读未提交\n读已提交\n可重复读\n串行化","date":"2021-12-07 17:12:09","docid":1,"fillcolor":"ffffed99","id":166,"originaltext":"由低到高依次为Read uncommitted、Read committed、Repeatable read、Serializable","page":14,"textblocks":[{"first":[165.23019409179688,596.6824340820312,9.754104614257812,13.5],"last":[98.42654418945312,611.98828125,5.4720458984375,12.5],"length":68,"rects":[[165.23019409179688,596.6824340820312,333.71588134765625,13.5],[52.35793685913086,611.98828125,51.540653228759766,12.5]],"start":733,"text":"由低到高依次为Read uncommitted、Read committed、Repeatable read、\nSerializable"}],"type":5}],"originaltext":"事务隔离级别","page":14,"textblocks":[{"first":[52.35793685913086,521.9501953125,9.754096984863281,12.5],"last":[101.12842559814453,521.9501953125,9.754096984863281,12.5],"length":6,"rects":[[52.35793685913086,521.9501953125,58.52458572387695,12.5]],"start":598,"text":"事务隔离级别"}],"type":5},{"date":"2021-12-07 16:54:15","docid":1,"fillcolor":"ffffed99","id":167,"originaltext":"Mysql 的数据库的默认隔离级别为 Repeatable read ， 查看方式：","page":15,"textblocks":[{"first":[52.35793685913086,78.1636734008789,8.80794906616211,14.5],"last":[329.4876708984375,78.1636734008789,9.75408935546875,14.5],"length":42,"rects":[[52.35793685913086,78.1636734008789,286.8838233947754,14.5]],"start":27,"text":"Mysql 的数据库的默认隔离级别为 Repeatable read ， 查看方式："}],"type":5}],"originaltext":"背景知识","page":13,"textblocks":[{"first":[77.15753936767578,637.248046875,9.754096984863281,12.5],"last":[106.41983795166016,637.248046875,9.754096984863281,12.5],"length":4,"rects":[[77.15753936767578,637.248046875,39.016395568847656,12.5]],"start":361,"text":"背景知识"}],"type":5},{"date":"2021-12-07 17:33:03","docid":1,"fillcolor":"ffffed99","folded":false,"id":168,"markups":[{"content":"","date":"2021-12-07 17:33:09","docid":1,"fillcolor":"ffffed99","folded":false,"id":169,"markups":[{"date":"2021-12-07 17:35:04","docid":1,"fillcolor":"ffffed99","id":170,"originaltext":"对于UPDATE、DELETE和INSERT语句，InnoDB会自动给涉及数据集加排他锁（X)；","page":15,"textblocks":[{"first":[52.35793685913086,367.134765625,9.754096984863281,12.5],"last":[402.0480651855469,367.134765625,9.75408935546875,12.5],"length":48,"rects":[[52.35793685913086,367.134765625,359.44421768188477,12.5]],"start":278,"text":"对于UPDATE、DELETE和INSERT语句，InnoDB会自动给涉及数据集加排他锁（X)；"}],"type":5},{"date":"2021-12-07 17:35:09","docid":1,"fillcolor":"ffffed99","id":171,"originaltext":"对于普通SELECT语句，InnoDB不会加任何锁；","page":15,"textblocks":[{"first":[52.35793685913086,388.84454345703125,9.754096984863281,13.5],"last":[245.9920196533203,388.84454345703125,9.754104614257812,13.5],"length":26,"rects":[[52.35793685913086,388.84454345703125,203.38818740844727,13.5]],"start":327,"text":"对于普通SELECT语句，InnoDB不会加任何锁；"}],"type":5},{"date":"2021-12-07 19:51:49","docid":1,"fillcolor":"ffffed99","id":172,"originaltext":"共享锁（S）：又称为读锁","page":15,"textblocks":[{"first":[74.86739349365234,284.099609375,9.754096984863281,12.5],"last":[177.76170349121094,284.099609375,9.754104614257812,12.5],"length":12,"rects":[[74.86739349365234,284.099609375,112.6484146118164,12.5]],"start":113,"text":"共享锁（S）：又称为读锁"}],"type":5},{"date":"2021-12-07 19:51:51","docid":1,"fillcolor":"ffffed99","id":173,"originaltext":"排他锁（X）：又称为写锁","page":15,"textblocks":[{"first":[74.86739349365234,314.1123046875,9.754096984863281,12.5],"last":[178.03793334960938,314.1123046875,9.754104614257812,12.5],"length":12,"rects":[[74.86739349365234,314.1123046875,112.92464447021484,12.5]],"start":174,"text":"排他锁（X）：又称为写锁"}],"type":5}],"originaltext":"InnoDB 实现了以下两种类型的行锁。","page":15,"textblocks":[{"first":[52.35793685913086,260.83984375,2.721393585205078,12.5],"last":[205.94981384277344,260.83984375,9.754104614257812,12.5],"length":20,"rects":[[52.35793685913086,260.83984375,163.3459815979004,12.5]],"start":92,"text":"InnoDB 实现了以下两种类型的行锁。"}],"type":5},{"content":"加了独占锁，其他线程看都不能看这行数据\n\n对于释放锁，只要commit提交事务，就会释放锁\n\n就算是select也会开启 事务，未提交之前，对于当前线程数据都是一致的\n\n开启事务的时候缓存了当前数据库的情况，所以不管怎select，都是当前状态","date":"2021-12-07 17:35:55","docid":1,"fillcolor":"ffffed99","id":174,"originaltext":"可以通过以下语句显示给记录集加共享锁或排他锁 。","page":15,"textblocks":[{"first":[52.35793685913086,434.9130859375,9.754096984863281,12.5],"last":[269.48187255859375,434.9130859375,9.75408935546875,12.5],"length":24,"rects":[[52.35793685913086,434.9130859375,226.87802505493164,12.5]],"start":356,"text":"可以通过以下语句显示给记录集加共享锁或排他锁 。"}],"type":5}],"originaltext":"InnoDB 的行锁模式","page":15,"textblocks":[{"first":[77.1626205444336,237.330078125,3.228607177734375,12.5],"last":[154.5711669921875,237.330078125,9.754104614257812,12.5],"length":12,"rects":[[77.1626205444336,237.330078125,87.16265106201172,12.5]],"start":78,"text":"InnoDB 的行锁模式"}],"type":5},{"content":"","date":"2021-12-07 17:57:10","docid":1,"fillcolor":"ffffed99","folded":false,"id":175,"markups":[{"date":"2021-12-07 19:21:57","docid":1,"fillcolor":"ffffed99","id":176,"originaltext":"如果不通过索引条件检索数据，那么InnoDB将对表中的所有记录加锁，实际效果跟表锁一样。","page":16,"textblocks":[{"first":[52.35793685913086,718.9832153320312,9.754096984863281,13.5],"last":[447.27508544921875,718.9832153320312,9.75408935546875,13.5],"length":44,"rects":[[52.35793685913086,718.9832153320312,404.67123794555664,13.5]],"start":279,"text":"如果不通过索引条件检索数据，那么InnoDB将对表中的所有记录加锁，实际效果跟表锁一样。"}],"type":5}],"originaltext":"无索引行锁升级为表锁","page":16,"textblocks":[{"first":[77.15753936767578,694.9734497070312,9.754096984863281,13.5],"last":[164.94442749023438,694.9734497070312,9.754104614257812,13.5],"length":10,"rects":[[77.15753936767578,694.9734497070312,97.5409927368164,13.5]],"start":267,"text":"无索引行锁升级为表锁"}],"type":5},{"content":"也就是对没有存在的记录也进行加锁\n\n对条件范围内加锁 就算是不存在的记录 也会进行加锁，这个时候不在记录中，但是加了锁，只有commit放弃写锁，才能添加的进去\n\n避开间隙加锁","date":"2021-12-07 19:33:05","docid":1,"fillcolor":"ffffed99","folded":false,"id":177,"markups":[{"date":"2021-12-07 19:45:21","docid":1,"fillcolor":"ffffed99","id":178,"originaltext":"对于键值在条件范围内但并不存在的记录，叫做 \"间隙（GAP）\" ， InnoDB也会对这个 \"间隙\" 加锁，这种锁机制就是所谓的 间隙锁（Next-Key锁） 。","page":17,"textblocks":[{"first":[93.90811157226562,646.9529418945312,9.754096984863281,13.5],"last":[244.2393341064453,661.1588134765625,9.754104614257812,14.5],"length":82,"rects":[[93.90811157226562,646.9529418945312,442.3731384277344,13.5],[52.35793685913086,661.1588134765625,201.63550186157227,14.5]],"start":233,"text":"对于键值在条件范围内但并不存在的记录，叫做 \"间隙（GAP）\" ， InnoDB也会对这个 \"间隙\" 加锁，这\n种锁机制就是所谓的 间隙锁（Next-Key锁） 。"}],"type":5}],"originaltext":"间隙锁危害","page":17,"textblocks":[{"first":[77.15753936767578,607.9363403320312,9.754096984863281,13.5],"last":[116.17393493652344,607.9363403320312,9.754096984863281,13.5],"length":5,"rects":[[77.15753936767578,607.9363403320312,48.77049255371094,13.5]],"start":168,"text":"间隙锁危害"}],"type":5},{"date":"2021-12-07 19:49:47","docid":1,"fillcolor":"ffffed99","folded":false,"id":179,"markups":[{"date":"2021-12-07 19:51:26","docid":1,"fillcolor":"ffffed99","id":180,"originaltext":"show  status like 'innodb_row_lock%';","page":18,"textblocks":[{"first":[80.11959838867188,403.22247314453125,5.293548583984375,8.7786865234375],"last":[270.5238037109375,403.22247314453125,5.293548583984375,8.7786865234375],"length":37,"rects":[[80.11959838867188,403.22247314453125,195.69775390625,8.7786865234375]],"start":140,"text":"show  status like 'innodb_row_lock%';"}],"type":5}],"originaltext":" InnoDB 行锁争用情况","page":18,"textblocks":[{"first":[74.62655639648438,370.13671875,2.5360641479492188,12.5],"last":[164.3252716064453,370.13671875,9.754104614257812,12.5],"length":14,"rects":[[74.62655639648438,370.13671875,99.45281982421875,12.5]],"start":112,"text":" InnoDB 行锁争用情况"}],"type":5},{"date":"2021-12-07 19:53:34","docid":1,"fillcolor":"ffffed99","folded":false,"id":181,"markups":[{"date":"2021-12-07 19:54:18","docid":1,"fillcolor":"ffffed99","id":182,"originaltext":"优化建议","page":19,"textblocks":[{"first":[52.35793685913086,170.0517578125,9.754096984863281,12.5],"last":[81.62023162841797,170.0517578125,9.754096984863281,12.5],"length":4,"rects":[[52.35793685913086,170.0517578125,39.01639175415039,12.5]],"start":202,"text":"优化建议"}],"type":5}],"originaltext":"总结","page":18,"textblocks":[{"first":[77.15753936767578,769.2546997070312,9.754096984863281,13.5],"last":[86.91163635253906,769.2546997070312,9.754096984863281,13.5],"length":2,"rects":[[77.15753936767578,769.2546997070312,19.508193969726562,13.5]],"start":136,"text":"总结"}],"type":5}],"originaltext":"InnoDB 行锁","page":13,"textblocks":[{"first":[72.92688751220703,502.9423828125,4.035758972167969,12.5],"last":[133.11024475097656,502.9423828125,12.192626953125,12.5],"length":9,"rects":[[72.92688751220703,502.9423828125,72.37598419189453,12.5]],"start":226,"text":"InnoDB 行锁"}],"type":5}],"originaltext":"Mysql 锁","page":8,"textblocks":[{"first":[72.92688751220703,104.525390625,11.497642517089844,12.5],"last":[112.01725006103516,104.525390625,12.192619323730469,12.5],"length":7,"rects":[[72.92688751220703,104.525390625,51.282981872558594,12.5]],"start":285,"text":"Mysql 锁"}],"type":5},{"date":"2021-12-07 19:54:58","docid":1,"fillcolor":"ffffed99","folded":true,"id":183,"markups":[{"date":"2021-12-07 21:12:18","docid":1,"fillcolor":"ffffed99","id":184,"originaltext":"SQL执行顺序","page":19,"textblocks":[{"first":[72.92688751220703,330.2201232910156,6.718132019042969,15.5],"last":[132.80662536621094,330.2201232910156,12.192626953125,15.5],"length":7,"rects":[[72.92688751220703,330.2201232910156,72.0723648071289,15.5]],"start":346,"text":"SQL执行顺序"}],"type":5},{"date":"2021-12-07 21:12:25","docid":1,"fillcolor":"ffffed99","id":185,"originaltext":"正则表达式使用","page":20,"textblocks":[{"first":[72.92108154296875,205.66836547851562,12.192626953125,15.5],"last":[146.07681274414062,205.66836547851562,12.192626953125,15.5],"length":7,"rects":[[72.92108154296875,205.66836547851562,85.34835815429688,15.5]],"start":223,"text":"正则表达式使用"}],"type":5},{"date":"2021-12-07 21:14:58","docid":1,"fillcolor":"ffffed99","id":186,"originaltext":"MySQL 常用函数","page":20,"textblocks":[{"first":[72.92688751220703,757.0997924804688,11.497642517089844,16.5],"last":[154.40567016601562,757.0997924804688,12.192626953125,16.5],"length":10,"rects":[[72.92688751220703,757.0997924804688,93.6714096069336,16.5]],"start":298,"text":"MySQL 常用函数"}],"type":5}],"originaltext":"常用SQL技巧","page":19,"textblocks":[{"first":[68.68223571777344,301.1083984375,14.631149291992188,17.5],"last":[140.54489135742188,301.1083984375,14.631149291992188,17.5],"length":7,"rects":[[68.68223571777344,301.1083984375,86.49380493164062,17.5]],"start":333,"text":"常用SQL技巧"}],"type":5}],"page":-1,"title":"Mysql高级-day03","type":7},{"date":"2021-12-13 16:33:43","folded":false,"id":1,"linecolor":"ffcccedb","markups":[{"date":"2021-12-08 13:54:02","docid":0,"fillcolor":"ffffed99","folded":true,"id":2,"markups":[{"content":"登录","date":"2021-12-08 13:54:09","docid":0,"fillcolor":"ffffed99","folded":true,"id":3,"markups":[{"date":"2021-12-08 13:54:16","docid":0,"fillcolor":"ffffed99","id":4,"originaltext":"连接选项","page":0,"textblocks":[{"first":[77.15753936767578,275.0964660644531,9.754096984863281,12.5],"last":[106.41983795166016,275.0964660644531,9.754096984863281,12.5],"length":4,"rects":[[77.15753936767578,275.0964660644531,39.016395568847656,12.5]],"start":85,"text":"连接选项"}],"type":5},{"date":"2021-12-08 13:54:31","docid":0,"fillcolor":"ffffed99","id":5,"originaltext":"执行选项","page":0,"textblocks":[{"first":[77.15753936767578,472.1790466308594,9.754096984863281,12.5],"last":[106.41983795166016,472.1790466308594,9.754096984863281,12.5],"length":4,"rects":[[77.15753936767578,472.1790466308594,39.016395568847656,12.5]],"start":97,"text":"执行选项"}],"type":5}],"originaltext":"mysql","page":0,"textblocks":[{"first":[72.92688751220703,163.65045166015625,11.973152160644531,15.5],"last":[105.61531066894531,163.65045166015625,3.71875,15.5],"length":5,"rects":[[72.92688751220703,163.65045166015625,36.40717315673828,15.5]],"start":34,"text":"mysql"}],"type":5},{"date":"2021-12-08 13:55:15","docid":0,"fillcolor":"ffffed99","folded":true,"id":6,"markups":[{"date":"2021-12-08 13:57:26","docid":0,"fillcolor":"ffffed99","id":7,"originaltext":"mysqladmin 是一个执行管理操作的客户端程序。可以用它来检查服务器的配置和当前状态、创建并删除数据库等。","page":1,"textblocks":[{"first":[52.35793685913086,56.7547607421875,9.071311950683594,12.5],"last":[62.11203384399414,71.76104736328125,9.754100799560547,12.5],"length":57,"rects":[[52.35793685913086,56.7547607421875,477.9746437072754,12.5],[52.35793685913086,71.76104736328125,19.508197784423828,12.5]],"start":0,"text":"mysqladmin 是一个执行管理操作的客户端程序。可以用它来检查服务器的配置和当前状态、创建并删除数据库\n等。"}],"type":5}],"originaltext":"mysqladmin","page":0,"textblocks":[{"first":[72.92688751220703,757.1497802734375,11.973152160644531,15.5],"last":[140.10824584960938,757.1497802734375,8.01055908203125,15.5],"length":10,"rects":[[72.92688751220703,757.1497802734375,75.1919174194336,15.5]],"start":170,"text":"mysqladmin"}],"type":5},{"date":"2021-12-08 13:57:31","docid":0,"fillcolor":"ffffed99","folded":true,"id":8,"markups":[{"date":"2021-12-08 13:59:34","docid":0,"fillcolor":"ffffed99","id":9,"originaltext":"由于服务器生成的二进制日志文件以二进制格式保存，所以如果想要检查这些文本的文本格式，就会使用到mysqlbinlog 日志管理工具。","page":1,"textblocks":[{"first":[52.35793685913086,463.8759765625,9.754096984863281,13.5],"last":[168.6355438232422,478.0821838378906,9.754104614257812,14.5],"length":67,"rects":[[52.35793685913086,463.8759765625,458.44260025024414,13.5],[52.35793685913086,478.0821838378906,126.03171157836914,14.5]],"start":111,"text":"由于服务器生成的二进制日志文件以二进制格式保存，所以如果想要检查这些文本的文本格式，就会使用到\nmysqlbinlog 日志管理工具。"}],"type":5}],"originaltext":"mysqlbinlog","page":1,"textblocks":[{"first":[72.92688751220703,438.41546630859375,11.973152160644531,12.5],"last":[140.0472869873047,438.41546630859375,6.8888397216796875,12.5],"length":11,"rects":[[72.92688751220703,438.41546630859375,74.00923919677734,12.5]],"start":98,"text":"mysqlbinlog"}],"type":5},{"date":"2021-12-08 13:59:39","docid":0,"fillcolor":"ffffed99","folded":true,"id":10,"markups":[{"date":"2021-12-08 13:59:50","docid":0,"fillcolor":"ffffed99","id":11,"originaltext":"mysqldump 客户端工具用来备份数据库或在不同数据库之间进行数据迁移。","page":2,"textblocks":[{"first":[52.35793685913086,83.0157470703125,9.071311950683594,12.5],"last":[372.35235595703125,83.0157470703125,9.75408935546875,12.5],"length":38,"rects":[[52.35793685913086,83.0157470703125,329.74850845336914,12.5]],"start":15,"text":"mysqldump 客户端工具用来备份数据库或在不同数据库之间进行数据迁移。"}],"type":5},{"content":"a.sql","date":"2021-12-08 14:19:49","docid":0,"fillcolor":"ffffed99","id":12,"originaltext":"mysqldump -uroot -p2143 db01 tb_book --add-drop-database --add-drop-table > a","page":2,"textblocks":[{"first":[101.26911163330078,596.0529174804688,5.293548583984375,8.7786865234375],"last":[503.2701416015625,596.0529174804688,5.293548583984375,8.7786865234375],"length":77,"rects":[[101.26911163330078,596.0529174804688,407.2945785522461,8.7786865234375]],"start":924,"text":"mysqldump -uroot -p2143 db01 tb_book --add-drop-database --add-drop-table > a"}],"type":5},{"content":"输出.sql表结构，.txt存储的数据文件\n-T后面接存放的位置，最后哪个数据库哪个表","date":"2021-12-08 14:20:18","docid":0,"fillcolor":"ffffed99","id":13,"originaltext":"mysqldump -uroot -p2143 -T /tmp test city","page":2,"textblocks":[{"first":[101.26911163330078,623.0642700195312,5.293548583984375,8.7786865234375],"last":[312.8487243652344,623.0642700195312,5.293548583984375,8.7786865234375],"length":41,"rects":[[101.26911163330078,623.0642700195312,216.87316131591797,8.7786865234375]],"start":1011,"text":"mysqldump -uroot -p2143 -T /tmp test city"}],"type":5}],"originaltext":"mysqldump","page":2,"textblocks":[{"first":[72.92688751220703,56.355369567871094,11.973152160644531,15.5],"last":[137.03570556640625,56.355369567871094,7.717926025390625,15.5],"length":9,"rects":[[72.92688751220703,56.355369567871094,71.82674407958984,15.5]],"start":4,"text":"mysqldump"}],"type":5},{"date":"2021-12-08 14:12:44","docid":0,"fillcolor":"ffffed99","folded":true,"id":14,"markups":[{"content":"导入txt的数据文件","date":"2021-12-08 14:14:26","docid":0,"fillcolor":"ffffed99","id":15,"originaltext":"mysqlimport 是客户端数据导入工具，用来导入mysqldump 加 -T 参数后导出的文本文件。","page":2,"textblocks":[{"first":[52.35793685913086,726.7862548828125,9.071311950683594,12.5],"last":[436.26361083984375,726.7862548828125,9.75408935546875,12.5],"length":53,"rects":[[52.35793685913086,726.7862548828125,393.65976333618164,12.5]],"start":135,"text":"mysqlimport 是客户端数据导入工具，用来导入mysqldump 加 -T 参数后导出的文本文件。"}],"type":5},{"content":"导入sql文件","date":"2021-12-08 14:14:56","docid":0,"fillcolor":"ffffed99","id":16,"originaltext":"如果需要导入sql文件,可以使用mysql中的source 指令 :","page":3,"textblocks":[{"first":[52.35793685913086,178.7561492919922,9.754096984863281,13.5],"last":[286.5014343261719,178.7561492919922,2.5946044921875,13.5],"length":34,"rects":[[52.35793685913086,178.7561492919922,236.73810195922852,13.5]],"start":6,"text":"如果需要导入sql文件,可以使用mysql中的source 指令 :"}],"type":5}],"originaltext":"mysqlimport/source","page":2,"textblocks":[{"first":[72.92688751220703,703.0257568359375,11.973152160644531,10.5],"last":[189.3324737548828,703.0257568359375,7.205841064453125,10.5],"length":18,"rects":[[72.92688751220703,703.0257568359375,123.6114273071289,10.5]],"start":115,"text":"mysqlimport/source"}],"type":5},{"date":"2021-12-08 14:12:50","docid":0,"fillcolor":"ffffed99","folded":true,"id":17,"markups":[{"content":"简略信息，有多少的表，有多少的记录","date":"2021-12-08 14:18:15","docid":0,"fillcolor":"ffffed99","id":18,"originaltext":"--count     显示数据库及表的统计信息（数据库，表 均可以不指定）","page":3,"textblocks":[{"first":[80.11959838867188,410.6533203125,5.293548583984375,12.5],"last":[359.5578918457031,410.6533203125,8.7786865234375,12.5],"length":38,"rects":[[80.11959838867188,410.6533203125,288.21697998046875,12.5]],"start":475,"text":"--count     显示数据库及表的统计信息（数据库，表 均可以不指定）"}],"type":5},{"content":"细节信息","date":"2021-12-08 14:18:41","docid":0,"fillcolor":"ffffed99","id":19,"originaltext":"-i          显示指定数据库或者指定表的状态信息","page":3,"textblocks":[{"first":[80.11959838867188,438.16455078125,5.293548583984375,11.5],"last":[284.0271911621094,438.16455078125,8.7786865234375,11.5],"length":29,"rects":[[80.11959838867188,438.16455078125,212.686279296875,11.5]],"start":516,"text":"-i          显示指定数据库或者指定表的状态信息"}],"type":5}],"originaltext":"mysqlshow","page":3,"textblocks":[{"first":[72.92688751220703,266.4437561035156,11.973152160644531,15.5],"last":[130.70506286621094,266.4437561035156,10.4368896484375,15.5],"length":9,"rects":[[72.92688751220703,266.4437561035156,68.2150650024414,15.5]],"start":47,"text":"mysqlshow"}],"type":5}],"originaltext":"MySql中常用工具","page":0,"textblocks":[{"first":[68.68629455566406,133.4390869140625,13.797172546386719,19.5],"last":[171.10740661621094,133.4390869140625,14.631149291992188,19.5],"length":10,"rects":[[68.68629455566406,133.4390869140625,117.05226135253906,19.5]],"start":18,"text":"MySql中常用工具"}],"type":5},{"date":"2021-12-08 14:22:04","docid":0,"fillcolor":"ffffed99","folded":false,"id":20,"markups":[{"date":"2021-12-08 14:23:30","docid":0,"fillcolor":"ffffed99","id":21,"originaltext":"在 MySQL 中，有 4 种不同的日志，分别是错误日志、二进制日志（BINLOG 日志）、查询日志和慢查询日志","page":3,"textblocks":[{"first":[232.93734741210938,732.788818359375,9.754104614257812,12.5],"last":[227.40780639648438,747.795166015625,9.754104614257812,12.5],"length":57,"rects":[[232.93734741210938,732.788818359375,281.5448303222656,12.5],[52.35793685913086,747.795166015625,184.80397415161133,12.5]],"start":211,"text":"在 MySQL 中，有 4 种不同的日志，分别是错误日志、二进制日志\n（BINLOG 日志）、查询日志和慢查询日志"}],"type":5},{"content":"默认开启\n无法正常使用优先查看错误日志","date":"2021-12-08 14:23:35","docid":0,"fillcolor":"ffffed99","id":22,"originaltext":"错误日志","page":4,"textblocks":[{"first":[72.92108154296875,56.25537109375,12.192626953125,15.5],"last":[109.49894714355469,56.25537109375,12.192626953125,15.5],"length":4,"rects":[[72.92108154296875,56.25537109375,48.77049255371094,15.5]],"start":4,"text":"错误日志"}],"type":5},{"content":"默认没有开启\n封装了所有DDL和DML语句\n注意：查询不会存储","date":"2021-12-08 14:31:35","docid":0,"fillcolor":"ffffed99","folded":true,"id":23,"markups":[{"date":"2021-12-08 14:36:02","docid":0,"fillcolor":"ffffed99","folded":true,"id":24,"markups":[{"content":"记录sql语句形式的日志","date":"2021-12-08 14:36:53","docid":0,"fillcolor":"ffffed99","id":25,"originaltext":"STATEMENT","page":5,"textblocks":[{"first":[52.35793685913086,105.77490234375,5.374507904052734,10.5],"last":[102.44695281982422,105.77490234375,5.647621154785156,10.5],"length":9,"rects":[[52.35793685913086,105.77490234375,55.736637115478516,10.5]],"start":14,"text":"STATEMENT"}],"type":5},{"content":"记录的是每一行的变更","date":"2021-12-08 14:37:20","docid":0,"fillcolor":"ffffed99","id":26,"originaltext":"ROW","page":5,"textblocks":[{"first":[52.35793685913086,204.066162109375,6.437705993652344,10.5],"last":[66.46517944335938,204.066162109375,9.432212829589844,10.5],"length":3,"rects":[[52.35793685913086,204.066162109375,23.53945541381836,10.5]],"start":166,"text":"ROW"}],"type":5},{"content":"使用到了两种格式","date":"2021-12-08 14:37:43","docid":0,"fillcolor":"ffffed99","id":27,"originaltext":"MIXED","page":5,"textblocks":[{"first":[52.35793685913086,302.357421875,9.198116302490234,10.5],"last":[76.75293731689453,302.357421875,7.2180328369140625,10.5],"length":5,"rects":[[52.35793685913086,302.357421875,31.613033294677734,10.5]],"start":343,"text":"MIXED"}],"type":5}],"originaltext":" 日志格式","page":5,"textblocks":[{"first":[74.62655639648438,81.264892578125,2.5360641479492188,12.5],"last":[106.41983795166016,81.264892578125,9.754096984863281,12.5],"length":5,"rects":[[74.62655639648438,81.264892578125,41.54737854003906,12.5]],"start":7,"text":" 日志格式"}],"type":5},{"date":"2021-12-11 17:17:14","docid":0,"fillcolor":"ffffed99","folded":true,"id":28,"markups":[{"content":"默认存储再/var 下的mysql目录\n\n由于是二进制文件直接打开是看不懂的，要使用mysqlbinlog","date":"2021-12-11 17:25:34","docid":0,"fillcolor":"ffffed99","id":29,"originaltext":"查看STATEMENT格式日志","page":5,"textblocks":[{"first":[52.35793685913086,510.945068359375,9.754096984863281,10.5],"last":[156.86680603027344,510.945068359375,9.754104614257812,10.5],"length":15,"rects":[[52.35793685913086,510.945068359375,114.26297378540039,10.5]],"start":523,"text":"查看STATEMENT格式日志"}],"type":5},{"date":"2021-12-11 17:31:08","docid":0,"fillcolor":"ffffed99","id":30,"markups":[{"date":"2021-12-11 17:31:53","docid":0,"fillcolor":"ffffed99","id":31,"originaltext":"log_bin=mysqlbin #配置二进制日志的格式binlog_format=ROW","page":6,"textblocks":[{"first":[80.11959838867188,424.98126220703125,5.293548583984375,8.7786865234375],"last":[164.75152587890625,465.49835205078125,5.293548583984375,8.7786865234375],"length":48,"rects":[[80.11959838867188,424.98126220703125,84.635986328125,8.7786865234375],[80.11959838867188,438.48712158203125,5.293548583984375,8.7786865234375],[80.11959838867188,448.91943359375,93.07635498046875,12.5],[80.11959838867188,465.49835205078125,89.92547607421875,8.7786865234375]],"start":165,"text":"log_bin=mysqlbin\n \n#配置二进制日志的格式\nbinlog_format=ROW"}],"type":5},{"date":"2021-12-11 17:32:29","docid":0,"fillcolor":"ffffed99","id":32,"originaltext":" 可以在mysqlbinlog 后面加上参数 -vv","page":6,"textblocks":[{"first":[282.8282775878906,570.720703125,2.53607177734375,12.5],"last":[441.4644470214844,570.720703125,4.886810302734375,12.5],"length":26,"rects":[[282.8282775878906,570.720703125,163.52297973632812,12.5]],"start":55,"text":" 可以在mysqlbinlog 后面加上参数 -vv"}],"type":5}],"originaltext":"查看ROW格式日志","page":6,"textblocks":[{"first":[52.35793685913086,341.12451171875,9.754096984863281,12.5],"last":[124.66590118408203,341.12451171875,9.754096984863281,12.5],"length":9,"rects":[[52.35793685913086,341.12451171875,82.06206130981445,12.5]],"start":2,"text":"查看ROW格式日志"}],"type":5}],"originaltext":"日志读取","page":5,"textblocks":[{"first":[77.15753936767578,385.84307861328125,9.754096984863281,13.5],"last":[106.41983795166016,385.84307861328125,9.754096984863281,13.5],"length":4,"rects":[[77.15753936767578,385.84307861328125,39.016395568847656,13.5]],"start":468,"text":"日志读取"}],"type":5},{"content":"在mysql中使用","date":"2021-12-11 17:35:09","docid":0,"fillcolor":"ffffed99","folded":true,"id":33,"markups":[{"content":"干掉全部的日志","date":"2021-12-11 17:35:34","docid":0,"fillcolor":"ffffed99","id":34,"markups":[{"content":"","date":"2021-12-11 17:35:39","docid":0,"fillcolor":"ffffed99","id":35,"originaltext":"通过 Reset Master 指令删除全部 binlog 日志，删除之后，日志编号，将从 xxxx.000001重新开始 。","page":7,"textblocks":[{"first":[52.35793685913086,334.82208251953125,9.754096984863281,13.5],"last":[474.9418640136719,334.82208251953125,9.75408935546875,13.5],"length":63,"rects":[[52.35793685913086,334.82208251953125,432.33801651000977,13.5]],"start":88,"text":"通过 Reset Master 指令删除全部 binlog 日志，删除之后，日志编号，将从 xxxx.000001重新开始 。"}],"type":5}],"originaltext":"方式一","page":7,"textblocks":[{"first":[52.35793685913086,311.6123046875,9.754096984863281,13.5],"last":[71.86613464355469,311.6123046875,9.754096984863281,13.5],"length":3,"rects":[[52.35793685913086,311.6123046875,29.26229476928711,13.5]],"start":84,"text":"方式一"}],"type":5},{"content":"删除一部分，是指定编号之前","date":"2021-12-11 17:36:30","docid":0,"fillcolor":"ffffed99","id":36,"originaltext":"方式二","page":7,"textblocks":[{"first":[52.35793685913086,599.23291015625,9.754096984863281,13.5],"last":[71.86613464355469,599.23291015625,9.754096984863281,13.5],"length":3,"rects":[[52.35793685913086,599.23291015625,29.26229476928711,13.5]],"start":196,"text":"方式二"}],"type":5},{"content":"删除一部分，是指定编号之前","date":"2021-12-11 17:38:43","docid":0,"fillcolor":"ffffed99","id":37,"originaltext":"方式三","page":7,"textblocks":[{"first":[52.35793685913086,668.26171875,9.754096984863281,13.5],"last":[71.86613464355469,668.26171875,9.754096984863281,13.5],"length":3,"rects":[[52.35793685913086,668.26171875,29.26229476928711,13.5]],"start":272,"text":"方式三"}],"type":5},{"content":"设置过期时间","date":"2021-12-11 17:38:59","docid":0,"fillcolor":"ffffed99","id":38,"originaltext":"方式四","page":7,"textblocks":[{"first":[52.35793685913086,752.29736328125,9.754096984863281,13.5],"last":[71.86613464355469,752.29736328125,9.754096984863281,13.5],"length":3,"rects":[[52.35793685913086,752.29736328125,29.26229476928711,13.5]],"start":379,"text":"方式四"}],"type":5}],"originaltext":"日志删除","page":7,"textblocks":[{"first":[77.15753936767578,250.0364227294922,9.754096984863281,13.500015258789062],"last":[106.41983795166016,250.0364227294922,9.754096984863281,13.500015258789062],"length":4,"rects":[[77.15753936767578,250.0364227294922,39.016395568847656,13.500015258789062]],"start":8,"text":"日志删除"}],"type":5}],"originaltext":" 二进制日志","page":4,"textblocks":[{"first":[69.75680541992188,496.0401916503906,3.1700820922851562,15.5],"last":[121.69157409667969,496.0401916503906,12.192626953125,15.5],"length":6,"rects":[[69.75680541992188,496.0401916503906,64.12739562988281,15.5]],"start":223,"text":" 二进制日志"}],"type":5},{"content":"查询日志记录所有操作，二进制不包含查询select语句，但是不止包含查询日志，还又所有的操作语句，默认不开启，和二进制一样占内存\n\n\n存储在mysql的数据目录下","date":"2021-12-11 17:41:44","docid":0,"fillcolor":"ffffed99","id":39,"originaltext":"查询日志","page":8,"textblocks":[{"first":[72.92108154296875,189.56201171875,12.192626953125,15.5],"last":[109.49894714355469,189.56201171875,12.192626953125,15.5],"length":4,"rects":[[72.92108154296875,189.56201171875,48.77049255371094,15.5]],"start":99,"text":"查询日志"}],"type":5},{"content":"查询持续时间过长，并且不止查了一次的所有sql语句\n\n默认关闭","date":"2021-12-11 17:45:40","docid":0,"fillcolor":"ffffed99","folded":true,"id":40,"markups":[{"date":"2021-12-11 17:50:35","docid":0,"fillcolor":"ffffed99","id":41,"originaltext":"文件位置和格式","page":9,"textblocks":[{"first":[77.15753936767578,326.8681640625,9.754096984863281,12.5],"last":[135.68212890625,326.8681640625,9.754104614257812,12.5],"length":7,"rects":[[77.15753936767578,326.8681640625,68.27869415283203,12.5]],"start":148,"text":"文件位置和格式"}],"type":5},{"content":"实时记录在文件的尾部","date":"2021-12-11 17:51:16","docid":0,"fillcolor":"ffffed99","id":42,"markups":[{"date":"2021-12-11 17:58:58","docid":0,"fillcolor":"ffffed99","id":43,"originaltext":"如果慢查询日志内容很多， 直接查看文件，比较麻烦， 这个时候可以借助于mysql自带的 mysqldumpslow 工具， 来对慢查询日志进行分类汇总。","page":10,"textblocks":[{"first":[52.35793685913086,477.681640625,9.754096984863281,12.5],"last":[201.20318603515625,492.68798828125,9.754104614257812,12.5],"length":77,"rects":[[52.35793685913086,477.681640625,472.62607192993164,12.5],[52.35793685913086,492.68798828125,158.5993537902832,12.5]],"start":119,"text":"如果慢查询日志内容很多， 直接查看文件，比较麻烦， 这个时候可以借助于mysql自带的 mysqldumpslow 工\n具， 来对慢查询日志进行分类汇总。"}],"type":5}],"originaltext":"日志的读取","page":9,"textblocks":[{"first":[77.15753936767578,545.96044921875,9.754096984863281,12.5],"last":[116.17393493652344,545.96044921875,9.754096984863281,12.5],"length":5,"rects":[[77.15753936767578,545.96044921875,48.77049255371094,12.5]],"start":197,"text":"日志的读取"}],"type":5}],"originaltext":"慢查询日志","page":9,"textblocks":[{"first":[72.92108154296875,222.57568359375,12.192626953125,15.5],"last":[121.69157409667969,222.57568359375,12.192626953125,15.5],"length":5,"rects":[[72.92108154296875,222.57568359375,60.96311950683594,15.5]],"start":6,"text":"慢查询日志"}],"type":5}],"originaltext":"Mysql 日志","page":3,"textblocks":[{"first":[68.68629455566406,687.1719970703125,13.797172546386719,19.5],"last":[130.22879028320312,687.1719970703125,14.631149291992188,19.5],"length":8,"rects":[[68.68629455566406,687.1719970703125,76.17364501953125,19.5]],"start":129,"text":"Mysql 日志"}],"type":5},{"date":"2021-12-11 17:57:38","docid":0,"fillcolor":"ffffed99","folded":true,"id":44,"markups":[{"date":"2021-12-11 18:00:47","docid":0,"fillcolor":"ffffed99","id":45,"originaltext":"复制概述","page":10,"textblocks":[{"first":[72.92108154296875,625.74462890625,12.192626953125,14.5],"last":[109.49894714355469,625.74462890625,12.192626953125,14.5],"length":4,"rects":[[72.92108154296875,625.74462890625,48.77049255371094,14.5]],"start":215,"text":"复制概述"}],"type":5},{"date":"2021-12-11 18:01:55","docid":0,"fillcolor":"ffffed99","folded":false,"id":46,"markups":[{"date":"2021-12-11 18:02:00","docid":0,"fillcolor":"ffffed99","id":47,"markups":[{"content":"注意：是主库事务提交的时候","date":"2021-12-11 18:02:08","docid":0,"fillcolor":"ffffed99","id":48,"originaltext":"Master 主库在事务提交时，会把数据变更作为时间 Events 记录在二进制日志文件 Binlog 中。","page":11,"textblocks":[{"first":[74.86739349365234,341.8740234375,8.807952880859375,12.5],"last":[470.2846374511719,341.8740234375,9.75408935546875,12.5],"length":54,"rects":[[74.86739349365234,341.8740234375,405.1713333129883,12.5]],"start":14,"text":"Master 主库在事务提交时，会把数据变更作为时间 Events 记录在二进制日志文件 Binlog 中。"}],"type":5},{"content":"主库推送二进制日志给从库，从库开启一个线程一直等待，有了就写到中继日志中","date":"2021-12-11 18:02:12","docid":0,"fillcolor":"ffffed99","id":49,"originaltext":"主库推送二进制日志文件 Binlog 中的日志事件到从库的中继日志 Relay Log 。","page":11,"textblocks":[{"first":[74.86739349365234,356.880859375,9.754096984863281,12.5],"last":[400.47235107421875,356.880859375,9.75408935546875,12.5],"length":45,"rects":[[74.86739349365234,356.880859375,335.35904693603516,12.5]],"start":69,"text":"主库推送二进制日志文件 Binlog 中的日志事件到从库的中继日志 Relay Log 。"}],"type":5},{"content":"从库会去看中继日志","date":"2021-12-11 18:02:19","docid":0,"fillcolor":"ffffed99","id":50,"originaltext":"slave重做中继日志中的事件，将改变反映它自己的数据。","page":11,"textblocks":[{"first":[74.86739349365234,371.88671875,4.652702331542969,12.5],"last":[312.361572265625,371.88671875,9.75408935546875,12.5],"length":28,"rects":[[74.86739349365234,371.88671875,247.2482681274414,12.5]],"start":115,"text":"slave重做中继日志中的事件，将改变反映它自己的数据。"}],"type":5}],"originaltext":"从上层来看，复制分成三步：","page":11,"textblocks":[{"first":[52.35793685913086,318.31427001953125,9.754096984863281,13.5],"last":[169.40711975097656,318.31427001953125,9.754104614257812,13.5],"length":13,"rects":[[52.35793685913086,318.31427001953125,126.80328750610352,13.5]],"start":0,"text":"从上层来看，复制分成三步："}],"type":5}],"originaltext":"复制原理","page":10,"textblocks":[{"first":[72.92108154296875,737.6414794921875,12.192626953125,15.5],"last":[109.49894714355469,737.6414794921875,12.192626953125,15.5],"length":4,"rects":[[72.92108154296875,737.6414794921875,48.77049255371094,15.5]],"start":357,"text":"复制原理"}],"type":5},{"date":"2021-12-11 18:06:54","docid":0,"fillcolor":"ffffed99","folded":true,"id":51,"markups":[{"date":"2021-12-11 18:07:03","docid":0,"fillcolor":"ffffed99","id":52,"markups":[{"date":"2021-12-11 18:07:10","docid":0,"fillcolor":"ffffed99","id":53,"originaltext":"主库出现问题，可以快速切换到从库提供服务。","page":11,"textblocks":[{"first":[74.86739349365234,468.677734375,9.754096984863281,12.5],"last":[269.9493713378906,468.677734375,9.75408935546875,12.5],"length":21,"rects":[[74.86739349365234,468.677734375,204.83606719970703,12.5]],"start":179,"text":"主库出现问题，可以快速切换到从库提供服务。"}],"type":5},{"date":"2021-12-11 18:07:13","docid":0,"fillcolor":"ffffed99","id":54,"originaltext":"可以在从库上执行查询操作，从主库中更新，实现读写分离，降低主库的访问压力。","page":11,"textblocks":[{"first":[74.86739349365234,483.6845703125,9.754096984863281,12.5],"last":[426.0149230957031,483.6845703125,9.75408935546875,12.5],"length":37,"rects":[[74.86739349365234,483.6845703125,360.90161895751953,12.5]],"start":201,"text":"可以在从库上执行查询操作，从主库中更新，实现读写分离，降低主库的访问压力。"}],"type":5},{"date":"2021-12-11 18:07:19","docid":0,"fillcolor":"ffffed99","id":55,"originaltext":"可以在从库中执行备份，以避免备份期间影响主库的服务。","page":11,"textblocks":[{"first":[74.86739349365234,498.6904296875,9.754096984863281,12.5],"last":[318.7198486328125,498.6904296875,9.75408935546875,12.5],"length":26,"rects":[[74.86739349365234,498.6904296875,253.6065444946289,12.5]],"start":239,"text":"可以在从库中执行备份，以避免备份期间影响主库的服务。"}],"type":5}],"originaltext":"MySQL 复制的有点主要包含以下三个方面：","page":11,"textblocks":[{"first":[52.35793685913086,444.3179626464844,8.80794906616211,14.5],"last":[232.93734741210938,444.3179626464844,9.754104614257812,14.5],"length":22,"rects":[[52.35793685913086,444.3179626464844,190.33351516723633,14.5]],"start":156,"text":"MySQL 复制的有点主要包含以下三个方面："}],"type":5}],"originaltext":"复制优势","page":11,"textblocks":[{"first":[72.92108154296875,418.6572265625,12.192626953125,14.5],"last":[109.49894714355469,418.6572265625,12.192626953125,14.5],"length":4,"rects":[[72.92108154296875,418.6572265625,48.77049255371094,14.5]],"start":150,"text":"复制优势"}],"type":5},{"date":"2021-12-11 18:12:14","docid":0,"fillcolor":"ffffed99","folded":true,"id":56,"markups":[{"date":"2021-12-11 18:12:22","docid":0,"fillcolor":"ffffed99","id":57,"originaltext":"master","page":11,"textblocks":[{"first":[77.1626205444336,572.470703125,9.578521728515625,9.5],"last":[107.47835540771484,572.470703125,4.4283599853515625,9.5],"length":6,"rects":[[77.1626205444336,572.470703125,34.74409484863281,9.5]],"start":284,"text":"master"}],"type":5},{"date":"2021-12-11 18:35:26","docid":0,"fillcolor":"ffffed99","id":58,"originaltext":"slave","page":12,"textblocks":[{"first":[77.1626205444336,692.8214721679688,4.847785949707031,11.5],"last":[96.42695617675781,692.8214721679688,5.764671325683594,11.5],"length":5,"rects":[[77.1626205444336,692.8214721679688,25.029006958007812,11.5]],"start":73,"text":"slave"}],"type":5},{"date":"2021-12-11 18:40:46","docid":0,"fillcolor":"ffffed99","id":59,"originaltext":"验证同步操作","page":13,"textblocks":[{"first":[77.15753936767578,619.9412231445312,9.754096984863281,13.5],"last":[125.92803192138672,619.9412231445312,9.754096984863281,13.5],"length":6,"rects":[[77.15753936767578,619.9412231445312,58.52458953857422,13.5]],"start":109,"text":"验证同步操作"}],"type":5}],"originaltext":"搭建步骤","page":11,"textblocks":[{"first":[72.92108154296875,544.4609375,12.192626953125,15.5],"last":[109.49894714355469,544.4609375,12.192626953125,15.5],"length":4,"rects":[[72.92108154296875,544.4609375,48.77049255371094,15.5]],"start":272,"text":"搭建步骤"}],"type":5}],"originaltext":" Mysql复制","page":10,"textblocks":[{"first":[64.8822021484375,597.7333984375,3.8041000366210938,14.5],"last":[126.42811584472656,597.7333984375,14.631149291992188,14.5],"length":8,"rects":[[64.8822021484375,597.7333984375,76.17706298828125,14.5]],"start":201,"text":" Mysql复制"}],"type":5},{"date":"2021-12-11 18:41:27","docid":0,"fillcolor":"ffffed99","id":60,"originaltext":" 综合案例","page":14,"textblocks":[{"first":[64.8822021484375,443.6689453125,3.8041000366210938,17.5],"last":[112.57568359375,443.6689453125,14.631149291992188,17.5],"length":5,"rects":[[64.8822021484375,443.6689453125,62.32463073730469,17.5]],"start":63,"text":" 综合案例"}],"type":5}],"page":-1,"title":"Mysql高级-day04","type":7}],"maxid":433,"notelinks":[],"title":"Mysql高级","unimportant":[]}
{"EpubVersion":2,"filepath":"","floatingtheme":[],"folded":false,"markups":[{"content":"最根本的sql到数据库","date":"2021-12-23 15:40:53","docid":0,"fillcolor":"ffffed99","folded":true,"id":1,"markups":[{"content":"与Hibernate的持久层框架的区别，将编写sql交给程序员\n\nJavabean -> 编写sql -> 预编译 -> 设置参数 -> 执行sql -> 封装结果 \n\n对持久层框架执行sql框架的，一定要对 ? 进行参数的设置","date":"2021-12-23 15:46:48","docid":0,"fillcolor":"ffffed99","id":7,"originaltext":"sql和java编码分开，功能边界清晰，一个专注业务、一个专注数据。","page":4,"textblocks":[{"first":[48,455.52801513671875,13.979999542236328,33.5],"last":[216.3800048828125,489.427978515625,27.959991455078125,28.5],"length":35,"rects":[[48,455.52801513671875,647.443359375,33.5],[48,489.427978515625,196.33999633789062,28.5]],"start":249,"text":"sql和java编码分开，功能边界清晰，一个专注业务、\n一个专注数据。"}],"type":5}],"originaltext":"一、MyBatis简介","page":2,"textblocks":[{"first":[239.02000427246094,82.67999267578125,32.03999328613281,37.5],"last":[449.0400085449219,82.67999267578125,32.040008544921875,37.5],"length":11,"rects":[[239.02000427246094,82.67999267578125,242.0600128173828,37.5]],"start":180,"text":"一、MyBatis简介"}],"type":5},{"content":"mybatis中sql到数据库的细节","date":"2021-12-23 15:41:04","docid":0,"fillcolor":"ffffed99","folded":true,"id":2,"markups":[{"content":"现在：\n使用接口定义，将命名空间定义到接口，不在是定义到普通的类\n\n填入参数，将文件和接口进行绑定\nSqlSession直接获取这个接口，创建一个实现类\n对这个实现类进行调用方法放入参数即可\n\n其实底层根据 配置文件 和 接口 创建了一个代理对象proxy","date":"2021-12-23 15:58:26","docid":0,"fillcolor":"ffffed99","id":8,"originaltext":"MyBatis操作数据库","page":9,"textblocks":[{"first":[206.02000427246094,80.91999816894531,29.988006591796875,41.5],"last":[478.0799865722656,80.91999816894531,35.999969482421875,41.5],"length":12,"rects":[[206.02000427246094,80.91999816894531,308.05995178222656,41.5]],"start":0,"text":"MyBatis操作数据库"}],"type":5},{"date":"2021-12-23 16:24:28","docid":0,"fillcolor":"ffffed99","id":9,"originaltext":"SqlSession","page":14,"textblocks":[{"first":[269.8599853515625,84.1199951171875,24.011993408203125,37.5],"last":[429.9879455566406,84.1199951171875,20.0159912109375,37.5],"length":10,"rects":[[269.8599853515625,84.1199951171875,180.14395141601562,37.5]],"start":0,"text":"SqlSession"}],"type":5}],"originaltext":"二、MyBatis-HelloWorld","page":8,"textblocks":[{"first":[187.50999450683594,85.87998962402344,32.03999328613281,33.5],"last":[514.869140625,85.87998962402344,17.814208984375,33.5],"length":20,"rects":[[187.50999450683594,85.87998962402344,345.17335510253906,33.5]],"start":71,"text":"二、MyBatis-HelloWorld"}],"type":5},{"date":"2021-12-23 15:41:09","docid":0,"fillcolor":"ffffed99","folded":false,"id":3,"markups":[{"date":"2021-12-23 16:27:35","docid":0,"fillcolor":"ffffed99","folded":false,"id":10,"markups":[{"content":"引入properties文件\nresource引入类路径\nurl引入指定路径","date":"2021-12-23 16:34:24","docid":0,"fillcolor":"ffffed99","id":11,"originaltext":"properties属性","page":17,"textblocks":[{"first":[243.82000732421875,81.7199935913086,20.0159912109375,40.5],"last":[440.1600036621094,81.7199935913086,36,40.5],"length":12,"rects":[[243.82000732421875,81.7199935913086,232.33999633789062,40.5]],"start":186,"text":"properties属性"}],"type":5},{"date":"2021-12-23 16:47:35","docid":0,"fillcolor":"ffffed99","id":12,"originaltext":"settings设置","page":18,"textblocks":[{"first":[261.82000732421875,81.7199935913086,18,40.5],"last":[422.1600036621094,81.7199935913086,36,40.5],"length":10,"rects":[[261.82000732421875,81.7199935913086,196.33999633789062,40.5]],"start":46,"text":"settings设置"}],"type":5},{"content":"可以使用typeAlias标签起别名\n可以使用package对包里面的所有类起别名\n可以使用@Alias对类起别名","date":"2021-12-23 16:49:53","docid":0,"fillcolor":"ffffed99","id":13,"originaltext":"typeAliases别名处理器","page":19,"textblocks":[{"first":[166.8699951171875,79.43998718261719,14.904006958007812,43.5],"last":[517.2000122070312,79.43998718261719,36,43.5],"length":16,"rects":[[166.8699951171875,79.43998718261719,386.33001708984375,43.5]],"start":39,"text":"typeAliases别名处理器"}],"type":5},{"date":"2021-12-23 17:11:54","docid":0,"fillcolor":"ffffed99","id":14,"originaltext":"typeHandlers类型处理器","page":21,"textblocks":[{"first":[163.75,80.91999816894531,10.00799560546875,41.5],"last":[520.2000122070312,80.91999816894531,36,41.5],"length":17,"rects":[[163.75,80.91999816894531,392.45001220703125,41.5]],"start":698,"text":"typeHandlers类型处理器"}],"type":5},{"content":"使用代理实现","date":"2021-12-23 17:18:02","docid":0,"fillcolor":"ffffed99","folded":true,"id":15,"markups":[{"content":"执行sql时期使用的","date":"2021-12-23 17:20:32","docid":0,"fillcolor":"ffffed99","id":17,"originaltext":"Executor (update, query, flushStatements, commit, rollback, getTransaction, close, isClosed)","page":25,"textblocks":[{"first":[70.2239990234375,323.3866271972656,13.366683959960938,23.141693115234375],"last":[348.07861328125,343.1000061035156,6.673309326171875,22.5],"length":93,"rects":[[70.2239990234375,323.3866271972656,534.0531616210938,23.141693115234375],[70.2239990234375,343.1000061035156,284.5279235839844,22.5]],"start":116,"text":"Executor (update, query, flushStatements, commit, rollback, \ngetTransaction, close, isClosed)"}],"type":5},{"content":"设置参数时期需要使用的","date":"2021-12-23 17:19:49","docid":0,"fillcolor":"ffffed99","id":16,"originaltext":"ParameterHandler (getParameterObject, setParameters)","page":25,"textblocks":[{"first":[70.2239990234375,390.5866394042969,13.366683959960938,23.141693115234375],"last":[565.82177734375,390.5866394042969,6.67333984375,23.141693115234375],"length":52,"rects":[[70.2239990234375,390.5866394042969,502.2711181640625,23.141693115234375]],"start":211,"text":"ParameterHandler (getParameterObject, setParameters)"}],"type":5},{"content":"封装结果需要使用的","date":"2021-12-23 17:20:47","docid":0,"fillcolor":"ffffed99","id":18,"originaltext":"ResultSetHandler (handleResultSets, handleOutputParameters)","page":25,"textblocks":[{"first":[70.2239990234375,438.6146240234375,14.468879699707031,23.141693115234375],"last":[630.8242797851562,438.6146240234375,6.67333984375,23.141693115234375],"length":59,"rects":[[70.2239990234375,438.6146240234375,567.2736206054688,23.141693115234375]],"start":266,"text":"ResultSetHandler (handleResultSets, handleOutputParameters)"}],"type":5},{"content":"预编译时期sql语句的处理","date":"2021-12-23 17:21:06","docid":0,"fillcolor":"ffffed99","id":19,"originaltext":"StatementHandler (prepare, parameterize, batch, update, query)","page":25,"textblocks":[{"first":[70.2239990234375,491.62799072265625,13.366683959960938,14.5],"last":[633.4403686523438,491.62799072265625,6.67333984375,14.5],"length":62,"rects":[[70.2239990234375,491.62799072265625,569.8897094726562,14.5]],"start":328,"text":"StatementHandler (prepare, parameterize, batch, update, query)"}],"type":5}],"originaltext":"plugins插件","page":25,"textblocks":[{"first":[266.8599853515625,80.91999816894531,20.0159912109375,41.5],"last":[417.239990234375,80.91999816894531,36,41.5],"length":9,"rects":[[266.8599853515625,80.91999816894531,186.3800048828125,41.5]],"start":392,"text":"plugins插件"}],"type":5},{"content":"数据库的具体连接default指定运行的环境，\n\n需要配置environment指定 事务控制 和 数据源 ","date":"2021-12-23 17:25:00","docid":0,"fillcolor":"ffffed99","id":20,"originaltext":"environments环境","page":26,"textblocks":[{"first":[215.86000061035156,85.7199935913086,20.016006469726562,35.5],"last":[468.239990234375,85.7199935913086,36,35.5],"length":14,"rects":[[215.86000061035156,85.7199935913086,288.37998962402344,35.5]],"start":129,"text":"environments环境"}],"type":5},{"content":"定义后mapper文件就可以指定的数据库环境\n\n只要在mapper文件上的sql指定需要使用的数据库，就可以做到替换环境自动替换对应的数据库查询语句","date":"2021-12-23 17:29:57","docid":0,"fillcolor":"ffffed99","id":21,"originaltext":"databaseIdProvider环境","page":30,"textblocks":[{"first":[167.8300018310547,85.7199935913086,20.016006469726562,35.5],"last":[516.2639770507812,85.7199935913086,36,35.5],"length":20,"rects":[[167.8300018310547,85.7199935913086,384.43397521972656,35.5]],"start":204,"text":"databaseIdProvider环境"}],"type":5},{"content":"其中的类名注册最好用于注解的形式","date":"2021-12-23 17:43:40","docid":0,"fillcolor":"ffffed99","id":22,"originaltext":"mapper映射","page":32,"textblocks":[{"first":[262.8999938964844,80.91999816894531,29.988006591796875,41.5],"last":[421.0799865722656,80.91999816894531,36,41.5],"length":8,"rects":[[262.8999938964844,80.91999816894531,194.17999267578125,41.5]],"start":65,"text":"mapper映射"}],"type":5}],"originaltext":"configuration 配置","page":15,"textblocks":[{"first":[70.10399627685547,252.52001953125,8.519996643066406,20.5],"last":[189.53001403808594,252.52001953125,17.039993286132812,20.5],"length":16,"rects":[[70.10399627685547,252.52001953125,136.46601104736328,20.5]],"start":78,"text":"configuration 配置"}],"type":5}],"originaltext":"三、MyBatis-全局配置文件","page":15,"textblocks":[{"first":[169.6300048828125,82.67999267578125,32.040008544921875,37.5],"last":[518.391845703125,82.67999267578125,32.03997802734375,37.5],"length":16,"rects":[[169.6300048828125,82.67999267578125,380.80181884765625,37.5]],"start":314,"text":"三、MyBatis-全局配置文件"}],"type":5},{"content":"1、insert等中的主键生成","date":"2021-12-23 15:41:20","docid":0,"fillcolor":"ffffed99","folded":false,"id":4,"markups":[{"content":"对于基础数据类型可以不写\n\n获取插入数据库中的主键","date":"2021-12-23 18:21:15","docid":0,"fillcolor":"ffffed99","folded":false,"id":27,"markups":[{"content":"useGeneratedKeys=”true”：使用自增主键获取主键值策略\nkeyProperty：将这个值封装给Javabean中的一个属性","date":"2021-12-23 18:35:36","docid":0,"fillcolor":"ffffed99","id":28,"originaltext":"主键生成方式","page":35,"textblocks":[{"first":[251.86000061035156,81.6199951171875,35.99998474121094,35.5],"last":[432.239990234375,81.6199951171875,36,35.5],"length":6,"rects":[[251.86000061035156,81.6199951171875,216.37998962402344,35.5]],"start":0,"text":"主键生成方式"}],"type":5},{"content":"因为Oracle不支持自增，但是支持序列\n而selectKey可以做到先运行select语句获取序列再设置\n\n可以做到先执行或者后执行对返回值中的属性进行修改","date":"2021-12-23 19:18:50","docid":0,"fillcolor":"ffffed99","id":29,"originaltext":"主键生成方式","page":36,"textblocks":[{"first":[251.86000061035156,81.6199951171875,35.99998474121094,35.5],"last":[432.239990234375,81.6199951171875,36,35.5],"length":6,"rects":[[251.86000061035156,81.6199951171875,216.37998962402344,35.5]],"start":0,"text":"主键生成方式"}],"type":5}],"originaltext":"insert、update、delete元素","page":34,"textblocks":[{"first":[139.75,80.91999816894531,7.99200439453125,41.5],"last":[544.219970703125,80.91999816894531,36,41.5],"length":22,"rects":[[139.75,80.91999816894531,440.469970703125,41.5]],"start":0,"text":"insert、update、delete元素"}],"type":5},{"content":"对于多个参数，mybatis会将这些参数封装到map集合中，其中的key就是param1，param2等等进行，获取只能通过这个\n\n但是使用@Param可以设置这个key\n\n如果传的是一个map，那mybatis就会直接把这个map存起来，推荐还是直接存到对象，变成一个TO\n\n注意对于：对于Collection集合，也会处理变成Map集合\n拿的话\nCollection集合：list[下标]\n数组：array[下标]","date":"2021-12-23 19:30:03","docid":0,"fillcolor":"ffffed99","id":30,"originaltext":"参数（Parameters）传递","page":38,"textblocks":[{"first":[158.8300018310547,80.91999816894531,36,41.5],"last":[525.2639770507812,80.91999816894531,36,41.5],"length":16,"rects":[[158.8300018310547,80.91999816894531,402.43397521972656,41.5]],"start":0,"text":"参数（Parameters）传递"}],"type":5},{"content":"使用两个map\n使用names集合中的value当，最终map中的key，使用names集合的key最终集合中value中的args下标","date":"2021-12-23 19:51:46","docid":0,"fillcolor":"ffffed99","folded":false,"id":31,"markups":[{"content":"以预编译的形式，也就是变成？来放置参数，等设置参数阶段替换\n\n使用在sql语句的参数位置上","date":"2021-12-23 20:02:12","docid":0,"fillcolor":"ffffed99","id":32,"originaltext":"#{key}：获取参数的值，预编译到SQL中。安全。","page":40,"textblocks":[{"first":[42.672000885009766,390.55999755859375,15.545757293701172,33.5],"last":[625.1839599609375,390.55999755859375,27.96002197265625,33.5],"length":26,"rects":[[42.672000885009766,390.55999755859375,610.471981048584,33.5]],"start":132,"text":"#{key}：获取参数的值，预编译到SQL中。安全。"}],"type":5},{"content":"直接替换，将参数直接放到语句上面，用在分表、排序等情况上\n不能使用在参数语句上","date":"2021-12-23 20:02:17","docid":0,"fillcolor":"ffffed99","id":33,"originaltext":"${key}：获取参数的值，拼接到SQL中。有SQL注入问题。ORDER BY ${name}","page":40,"textblocks":[{"first":[42.672000885009766,430.8800048828125,15.545757293701172,33.5],"last":[348.29107666015625,466.10400390625,9.338653564453125,31.5],"length":48,"rects":[[42.672000885009766,430.8800048828125,666.661922454834,33.5],[42.672000885009766,466.10400390625,314.9577293395996,31.5]],"start":161,"text":"${key}：获取参数的值，拼接到SQL中。有SQL注入问\n题。ORDER BY ${name}"}],"type":5},{"content":" jdbcType用于为传递nul值，因为jbdc会默认将null指定为other","date":"2021-12-23 23:19:22","docid":0,"fillcolor":"ffffed99","id":37,"originaltext":"javaType 通常可以从参数对象中来去确定– 如果 null 被当作值来传递，对于所有可能为空的列，jdbcType 需要被设置","page":39,"textblocks":[{"first":[65.76000213623047,261.8599853515625,5.7808837890625,31.5],"last":[282.9381408691406,331.3299865722656,26.040008544921875,30.5],"length":68,"rects":[[65.76000213623047,261.8599853515625,477.2396926879883,31.5],[43.20000076293945,300.4813537597656,624.1063346862793,30.0233154296875],[65.76000213623047,331.3299865722656,243.21814727783203,30.5]],"start":27,"text":"javaType 通常可以从参数对象中来去确定\n– 如果 null 被当作值来传递，对于所有可能为空的列，\njdbcType 需要被设置"}],"type":5}],"originaltext":"参数处理","page":39,"textblocks":[{"first":[287.8599853515625,81.6199951171875,36,35.5],"last":[396.239990234375,81.6199951171875,36,35.5],"length":4,"rects":[[287.8599853515625,81.6199951171875,144.3800048828125,35.5]],"start":0,"text":"参数处理"}],"type":5},{"content":"resultType(用于自动封装)\nlist：类型写list集合中的元素\n单条记录map：类型可以直接写map\n多条记录map：写value的类型，且中的key可以使用@MapKey指定key类型\n\nresultMap(用于手动封装)\n","date":"2021-12-23 20:21:26","docid":0,"fillcolor":"ffffed99","folded":true,"id":35,"markups":[{"date":"2021-12-23 20:03:19","docid":0,"fillcolor":"ffffed99","id":34,"originaltext":"自动映射","page":43,"textblocks":[{"first":[287.8599853515625,80.6199951171875,36,36.5],"last":[396.219970703125,80.6199951171875,36,36.5],"length":4,"rects":[[287.8599853515625,80.6199951171875,144.3599853515625,36.5]],"start":0,"text":"自动映射"}],"type":5},{"content":"注意没有映射的字段会自动映射\n\n级联属性\n1、resultMap里面使用resultMap即可\n2、association指定联合属性，以及它的类型，注意property一定指的是Javabean中的属性\n\n其中的association和Collection都是使用到resultMap，加上的操作，对于分段返回类型给最里面的\n\n对于级联属性推荐用 .  ","date":"2021-12-23 23:38:21","docid":0,"fillcolor":"ffffed99","folded":true,"id":38,"markups":[{"content":"级联属性\n1、resultMap里面使用resultMap即可\n2、association指定联合属性，以及它的类型，注意property一定指的是Javabean中的属性\n\n\n","date":"2021-12-24 00:30:16","docid":0,"fillcolor":"ffffed99","folded":true,"id":39,"markups":[{"content":"对应peoperty和类JavaType\n\n对应单个关联属性","date":"2021-12-24 00:30:51","docid":0,"fillcolor":"ffffed99","id":40,"originaltext":"association-嵌套结果集","page":47,"textblocks":[{"first":[173.8300018310547,84.91999816894531,20.016006469726562,36.5],"last":[510.239990234375,84.91999816894531,36,36.5],"length":17,"rects":[[173.8300018310547,84.91999816894531,372.4099884033203,36.5]],"start":0,"text":"association-嵌套结果集"}],"type":5},{"content":"会先进行最外面的查询，再进行里面的查询\n1、第二段查询一定返回的属性一定要对应association中设置的属性给\n2、第二段查询可以使用column拿到第一段查询返回的值\n\n拿第一段查询的字段column使用select查询返回给property","date":"2021-12-24 00:31:01","docid":0,"fillcolor":"ffffed99","id":41,"originaltext":"association-分段查询","page":48,"textblocks":[{"first":[191.8300018310547,84.91999816894531,20.016006469726562,36.5],"last":[492.239990234375,84.91999816894531,36,36.5],"length":16,"rects":[[191.8300018310547,84.91999816894531,336.4099884033203,36.5]],"start":0,"text":"association-分段查询"}],"type":5},{"content":"延迟使用到的时候再去查询","date":"2021-12-24 00:44:53","docid":0,"fillcolor":"ffffed99","id":42,"originaltext":"association-分段查询&延迟加载","page":49,"textblocks":[{"first":[107.83000183105469,84.91999816894531,20.01599884033203,36.5],"last":[576.3119506835938,84.91999816894531,36,36.5],"length":21,"rects":[[107.83000183105469,84.91999816894531,504.48194885253906,36.5]],"start":0,"text":"association-分段查询&延迟加载"}],"type":5}],"originaltext":"association","page":46,"textblocks":[{"first":[269.8599853515625,91.6199951171875,20.0159912109375,23.5],"last":[430.095947265625,91.6199951171875,20.0159912109375,23.5],"length":11,"rects":[[269.8599853515625,91.6199951171875,180.251953125,23.5]],"start":0,"text":"association"}],"type":5},{"content":"对应多个关联属性\n其他跟association一样","date":"2021-12-24 00:45:21","docid":0,"fillcolor":"ffffed99","folded":false,"id":43,"markups":[{"content":"底层封装的还是map","date":"2021-12-24 00:49:18","docid":0,"fillcolor":"ffffed99","id":45,"originaltext":"Collection-分步查询&延迟加载","page":51,"textblocks":[{"first":[118.75,84.91999816894531,25.99200439453125,36.5],"last":[565.2000122070312,84.91999816894531,36,36.5],"length":20,"rects":[[118.75,84.91999816894531,482.45001220703125,36.5]],"start":0,"text":"Collection-分步查询&延迟加载"}],"type":5}],"originaltext":"Collection-集合类型&嵌套结果集","page":50,"textblocks":[{"first":[100.75,84.91999816894531,25.99200439453125,36.5],"last":[583.2000122070312,84.91999816894531,36,36.5],"length":21,"rects":[[100.75,84.91999816894531,518.4500122070312,36.5]],"start":0,"text":"Collection-集合类型&嵌套结果集"}],"type":5},{"content":"底层封装的还是map","date":"2021-12-24 00:45:40","docid":0,"fillcolor":"ffffed99","id":44,"originaltext":"扩展-多列值封装map传递","page":52,"textblocks":[{"first":[156.7899932861328,81.6199951171875,36,35.5],"last":[527.1840209960938,81.6199951171875,36,35.5],"length":13,"rects":[[156.7899932861328,81.6199951171875,406.39402770996094,35.5]],"start":0,"text":"扩展-多列值封装map传递"}],"type":5}],"originaltext":"resultMap","page":44,"textblocks":[{"first":[280.7799987792969,84.91999816894531,11.988006591796875,36.5],"last":[419.0199890136719,84.91999816894531,20.0159912109375,36.5],"length":9,"rects":[[280.7799987792969,84.91999816894531,158.2559814453125,36.5]],"start":0,"text":"resultMap"}],"type":5}],"originaltext":"select元素","page":41,"textblocks":[{"first":[276.82000732421875,91.6199951171875,18,23.5],"last":[407.1600036621094,91.6199951171875,36,23.5],"length":8,"rects":[[276.82000732421875,91.6199951171875,166.33999633789062,23.5]],"start":177,"text":"select元素"}],"type":5}],"originaltext":"四、MyBatis-映射文件","page":33,"textblocks":[{"first":[201.6999969482422,82.67999267578125,32.03999328613281,37.5],"last":[486.4800109863281,82.67999267578125,32.040008544921875,37.5],"length":14,"rects":[[201.6999969482422,82.67999267578125,316.8200225830078,37.5]],"start":224,"text":"四、MyBatis-映射文件"}],"type":5},{"content":"sql 和 include 标签配合即可抽出重复的\n一般抽出查询列表用include插入\ninclude也可以用来定义变量","date":"2021-12-23 15:41:32","docid":0,"fillcolor":"ffffed99","folded":false,"id":5,"markups":[{"content":"根据查询条件进行查询\n\n会进行字符串的自动转换\n\n对于if直接拼\n\n","date":"2021-12-24 15:34:32","docid":0,"fillcolor":"ffffed99","id":46,"originaltext":"if","page":54,"textblocks":[{"first":[350.8800048828125,84.6199951171875,7.99200439453125,29.5],"last":[359.0400085449219,84.6199951171875,10.00799560546875,29.5],"length":2,"rects":[[350.8800048828125,84.6199951171875,18.167999267578125,29.5]],"start":0,"text":"if"}],"type":5},{"content":"choose 中选择 when 的条件test为条件\n\n otherwise \n","date":"2021-12-24 15:46:52","docid":0,"fillcolor":"ffffed99","id":47,"originaltext":"choose (when, otherwise)","page":55,"textblocks":[{"first":[154.75,84.1199951171875,18,37.5],"last":[553.219970703125,84.1199951171875,11.98797607421875,37.5],"length":24,"rects":[[154.75,84.1199951171875,410.45794677734375,37.5]],"start":0,"text":"choose (when, otherwise)"}],"type":5},{"content":"where（前面）\n添加where 并且\n会将语句前面多的and 或者 or 去掉\n\ntrim\n进行拼接，可以选择添加或者覆盖前后缀\n\nset（后面）\n专门用于解决插入后面多余的，逗号\n\n配合if使用","date":"2021-12-24 15:49:29","docid":0,"fillcolor":"ffffed99","id":48,"originaltext":"trim (where, set)","page":56,"textblocks":[{"first":[249.6699981689453,84.1199951171875,10.008010864257812,37.5],"last":[498.1199951171875,84.1199951171875,11.988006591796875,37.5],"length":17,"rects":[[249.6699981689453,84.1199951171875,260.43800354003906,37.5]],"start":0,"text":"trim (where, set)"}],"type":5},{"content":"专门用于参数传递的是一个集合\n\n注意遍历的是map还是list\nlist：item才是实际的值\nmap：index是键item才是实际的值","date":"2021-12-24 16:09:12","docid":0,"fillcolor":"ffffed99","id":51,"originaltext":"foreach","page":59,"textblocks":[{"first":[299.8599853515625,91.6199951171875,10.00799560546875,23.5],"last":[400.19195556640625,91.6199951171875,20.0159912109375,23.5],"length":7,"rects":[[299.8599853515625,91.6199951171875,120.34796142578125,23.5]],"start":0,"text":"foreach"}],"type":5},{"content":"对%_之类的模糊查询使用的","date":"2021-12-24 16:20:46","docid":0,"fillcolor":"ffffed99","id":53,"originaltext":"bind","page":60,"textblocks":[{"first":[325.7799987792969,85.6199951171875,20.0159912109375,29.5],"last":[374.0920104980469,85.6199951171875,20.0159912109375,29.5],"length":4,"rects":[[325.7799987792969,85.6199951171875,68.3280029296875,29.5]],"start":0,"text":"bind"}],"type":5},{"date":"2021-12-24 16:19:18","docid":0,"fillcolor":"ffffed99","id":52,"originaltext":"Multi-db vendor support","page":61,"textblocks":[{"first":[187.8000030517578,72.1199951171875,29.988006591796875,22.5],"last":[556.0819702148438,72.1199951171875,10.00799560546875,22.5],"length":23,"rects":[[187.8000030517578,72.1199951171875,378.2899627685547,22.5]],"start":0,"text":"Multi-db vendor support"}],"type":5}],"originaltext":"五、MyBatis-动态SQL","page":53,"textblocks":[{"first":[201.6999969482422,82.67999267578125,32.03999328613281,37.5],"last":[500.73779296875,82.67999267578125,17.814208984375,37.5],"length":15,"rects":[[201.6999969482422,82.67999267578125,316.8520050048828,37.5]],"start":182,"text":"五、MyBatis-动态SQL"}],"type":5},{"content":"使用顺序：\n1、二级缓存\n2、一级缓存\n3、查数据库","date":"2021-12-23 15:41:39","docid":0,"fillcolor":"ffffed99","folded":false,"id":6,"markups":[{"date":"2021-12-24 17:09:41","docid":0,"fillcolor":"ffffed99","folded":true,"id":54,"markups":[{"date":"2021-12-24 17:09:50","docid":0,"fillcolor":"ffffed99","id":55,"originaltext":"一级缓存和二级缓存。","page":63,"textblocks":[{"first":[70.2239990234375,308.1600036621094,26.040000915527344,27.5],"last":[304.6099853515625,308.1600036621094,26.040008544921875,27.5],"length":10,"rects":[[70.2239990234375,308.1600036621094,260.4259948730469,27.5]],"start":81,"text":"一级缓存和二级缓存。"}],"type":5}],"originaltext":"MyBatis系统中默认定义了两级缓存。","page":63,"textblocks":[{"first":[70.2239990234375,270.8000183105469,21.691322326660156,30.5],"last":[475.1499938964844,270.8000183105469,26.040008544921875,30.5],"length":20,"rects":[[70.2239990234375,270.8000183105469,430.96600341796875,30.5]],"start":58,"text":"MyBatis系统中默认定义了两级缓存。"}],"type":5},{"content":"对一次sqlsession里面的缓存\n只要在sql语句sqlsession中重复了就会使用到这个缓存\n它把封装好的结果对象直接返回了\n\n不能关闭\n可以使用clearCache()清空\n\n可以配置\n","date":"2021-12-24 17:10:18","docid":0,"fillcolor":"ffffed99","folded":false,"id":56,"markups":[{"content":"一定要保证 \n同一个SqlSession中两次查询没有增\n删改间隔，没有清空缓存\n\n原理\n保存在当前SqlSession的一个map中","date":"2021-12-24 17:24:31","docid":0,"fillcolor":"ffffed99","id":57,"originaltext":"一级缓存演示&失效情况","page":65,"textblocks":[{"first":[167.8300018310547,84.91999816894531,36,36.5],"last":[516.239990234375,84.91999816894531,36,36.5],"length":11,"rects":[[167.8300018310547,84.91999816894531,384.4099884033203,36.5]],"start":0,"text":"一级缓存演示&失效情况"}],"type":5},{"content":"一级缓存中保存的map情况","date":"2021-12-24 17:26:44","docid":0,"fillcolor":"ffffed99","id":58,"originaltext":"key:hashCode+查询的SqlId+编写的sql查询语句+参数","page":65,"textblocks":[{"first":[133.22000122070312,235.8800048828125,10.020004272460938,24.5],"last":[587.6199951171875,235.8800048828125,20.03997802734375,24.5],"length":35,"rects":[[133.22000122070312,235.8800048828125,474.4399719238281,24.5]],"start":57,"text":"key:hashCode+查询的SqlId+编写的sql查询语句+参数"}],"title":"一级缓存实际存储情况","type":5}],"originaltext":"一级缓存","page":64,"textblocks":[{"first":[287.8599853515625,81.6199951171875,36,35.5],"last":[396.239990234375,81.6199951171875,36,35.5],"length":4,"rects":[[287.8599853515625,81.6199951171875,144.3800048828125,35.5]],"start":0,"text":"一级缓存"}],"type":5},{"content":"原理：\n依靠一级缓存的SqlSession\n当一级缓存的SqlSession关闭或者提交，缓存中数据会被保存到二级缓存的对应的mapper中，也就是代理对象\n\n注意：开启二级缓存需要保证实体类POJO实现序列化接口\n因为对于读写操作会拷贝缓存中的对象，进行操作，拷贝操作使用反序列化\n\n二级缓存的开启不止配置文件中要开启，映射文件也需要开启","date":"2021-12-24 17:27:31","docid":0,"fillcolor":"ffffed99","id":59,"originaltext":"二级缓存","page":66,"textblocks":[{"first":[287.8599853515625,81.6199951171875,36,35.5],"last":[396.239990234375,81.6199951171875,36,35.5],"length":4,"rects":[[287.8599853515625,81.6199951171875,144.3800048828125,35.5]],"start":0,"text":"二级缓存"}],"type":5},{"content":"定义在映射文件中\n对于缓存的细致设置\n\n对于设置了\n只读：直接返回缓存中的引用\n读写：返回缓存对象的拷贝","date":"2021-12-24 18:58:13","docid":0,"fillcolor":"ffffed99","id":60,"originaltext":"缓存相关属性","page":67,"textblocks":[{"first":[251.86000061035156,81.6199951171875,35.99998474121094,35.5],"last":[432.0759582519531,81.6199951171875,36,35.5],"length":6,"rects":[[251.86000061035156,81.6199951171875,216.21595764160156,35.5]],"start":0,"text":"缓存相关属性"}],"type":5},{"content":"sql标签中的配置\n并且失效情况\n\n就是进行增删改操作统会同时刷新一二级缓存，其中由flushCache管理，true进行操作后就会刷新","date":"2021-12-24 19:32:05","docid":0,"fillcolor":"ffffed99","id":61,"originaltext":"缓存有关设置","page":68,"textblocks":[{"first":[251.86000061035156,81.6199951171875,35.99998474121094,35.5],"last":[432.2080078125,81.6199951171875,36,35.5],"length":6,"rects":[[251.86000061035156,81.6199951171875,216.34800720214844,35.5]],"start":0,"text":"缓存有关设置"}],"type":5},{"content":"mybatis太简陋了可以使用redis\n可以实现Cache接口对getObject和setObject存入redis数据库\n\n也可以使用EhCache直接替代它的管理\n\n注意\nmybatis里面有对redis连接mybatis缓存数据库的实现\n只需要使用cache type引入这个类，其他所有的配置可以配置到redis中\n然后cache ref在其他的mapper引用即可","date":"2021-12-24 19:32:47","docid":0,"fillcolor":"ffffed99","id":62,"originaltext":"第三方缓存整合","page":69,"textblocks":[{"first":[233.86000061035156,84.91999816894531,35.99998474121094,36.5],"last":[450.239990234375,84.91999816894531,36,36.5],"length":7,"rects":[[233.86000061035156,84.91999816894531,252.37998962402344,36.5]],"start":0,"text":"第三方缓存整合"}],"type":5}],"originaltext":"六、MyBatis-缓存机制","page":63,"textblocks":[{"first":[201.6999969482422,82.67999267578125,32.03999328613281,37.5],"last":[486.5039978027344,82.67999267578125,32.040008544921875,37.5],"length":14,"rects":[[201.6999969482422,82.67999267578125,316.84400939941406,37.5]],"start":234,"text":"六、MyBatis-缓存机制"}],"type":5},{"date":"2021-12-23 17:49:03","docid":0,"fillcolor":"ffffed99","id":23,"originaltext":"七、MyBatis-Spring整合","page":71,"textblocks":[{"first":[187.38999938964844,81.87998962402344,32.03999328613281,38.5],"last":[500.54400634765625,81.87998962402344,32.03997802734375,38.5],"length":18,"rects":[[187.38999938964844,81.87998962402344,345.19398498535156,38.5]],"start":175,"text":"七、MyBatis-Spring整合"}],"type":5},{"date":"2021-12-23 17:49:08","docid":0,"fillcolor":"ffffed99","id":24,"originaltext":"八、MyBatis-逆向工程","page":73,"textblocks":[{"first":[201.6999969482422,82.67999267578125,32.03999328613281,37.5],"last":[486.4800109863281,82.67999267578125,32.040008544921875,37.5],"length":14,"rects":[[201.6999969482422,82.67999267578125,316.8200225830078,37.5]],"start":240,"text":"八、MyBatis-逆向工程"}],"type":5},{"content":"mybatis运行原理：\n1.通过加载mybatis全局配置文件以及mapper映射文件初始化configuration对象 \n   和Executor对象（通过全局配置文件中的defaultExecutorType初始化）；\n2.创建一个defaultSqlSession对象，将configuration对象和Executor对象注入给 \n   defaulSqlSession对象中；\n3.defaulSqlSession通过getMapper()获取mapper接口的代理对象mapperProxy \n  （mapperProxy中包含defaultSQLSession对象）\n4.执行增删改查：\n    1）通过defaulSqlSession中的属性Executor创建statementHandler对象；\n    2）创建statementHandler对象的同时也创建parameterHandler和 \n         resultSetHandler；\n    3） 通过parameterHandler设置预编译参数及参数值；\n    4）调用statementHandler执行增删改查；\n    5）通过resultsetHandler封装查询结果\n（其中parameterHandler和resultsetHandler都是调用TypeHandler来类型转换）","date":"2021-12-23 17:49:16","docid":0,"fillcolor":"ffffed99","id":25,"originaltext":"九、MyBatis-工作原理","page":78,"textblocks":[{"first":[201.6999969482422,82.67999267578125,32.03999328613281,37.5],"last":[486.5039978027344,82.67999267578125,32.040008544921875,37.5],"length":14,"rects":[[201.6999969482422,82.67999267578125,316.84400939941406,37.5]],"start":0,"text":"九、MyBatis-工作原理"}],"type":5},{"date":"2021-12-24 21:16:22","docid":0,"fillcolor":"ffffed99","folded":false,"id":63,"markups":[{"content":"执行器（sql执行阶段）","date":"2021-12-24 21:16:31","docid":0,"fillcolor":"ffffed99","id":64,"originaltext":"Executor (update, query, flushStatements, commit, rollback, getTransaction, close, isClosed)","page":79,"textblocks":[{"first":[133.22000122070312,382.20001220703125,12.646316528320312,13.5],"last":[397.44647216796875,396.5400085449219,6.313690185546875,20.5],"length":93,"rects":[[133.22000122070312,382.20001220703125,508.9715881347656,13.5],[133.22000122070312,396.5400085449219,270.5401611328125,20.5]],"start":155,"text":"Executor (update, query, flushStatements, commit, rollback, \ngetTransaction, close, isClosed)"}],"type":5},{"content":"参数处理器（设置参数阶段）","date":"2021-12-24 21:16:33","docid":0,"fillcolor":"ffffed99","id":65,"originaltext":"ParameterHandler (getParameterObject, setParameters)","page":79,"textblocks":[{"first":[133.22000122070312,423.239990234375,12.662322998046875,13.5],"last":[605.102294921875,423.239990234375,6.3216552734375,13.5],"length":52,"rects":[[133.22000122070312,423.239990234375,478.2039489746094,13.5]],"start":252,"text":"ParameterHandler (getParameterObject, setParameters)"}],"type":5},{"content":"结果集处理器（封装结果集阶段）","date":"2021-12-24 21:16:35","docid":0,"fillcolor":"ffffed99","id":66,"originaltext":"ResultSetHandler (handleResultSets, handleOutputParameters)","page":79,"textblocks":[{"first":[133.22000122070312,440.8368225097656,13.689117431640625,22.163970947265625],"last":[666.3143310546875,440.8368225097656,6.31365966796875,22.163970947265625],"length":59,"rects":[[133.22000122070312,440.8368225097656,539.4079895019531,22.163970947265625]],"start":308,"text":"ResultSetHandler (handleResultSets, handleOutputParameters)"}],"type":5},{"content":"sql语句处理器（预处理阶段）","date":"2021-12-24 21:16:37","docid":0,"fillcolor":"ffffed99","id":67,"originaltext":"StatementHandler (prepare, parameterize, batch, update, query)","page":79,"textblocks":[{"first":[133.22000122070312,468.8680114746094,12.646316528320312,13.5],"last":[670.173095703125,468.8680114746094,6.31365966796875,13.5],"length":62,"rects":[[133.22000122070312,468.8680114746094,543.2667541503906,13.5]],"start":371,"text":"StatementHandler (prepare, parameterize, batch, update, query)"}],"type":5}],"originaltext":"十、MyBatis-插件开发","page":79,"textblocks":[{"first":[201.6999969482422,82.67999267578125,32.03999328613281,37.5],"last":[486.5039978027344,82.67999267578125,32.040008544921875,37.5],"length":14,"rects":[[201.6999969482422,82.67999267578125,316.84400939941406,37.5]],"start":435,"text":"十、MyBatis-插件开发"}],"type":5},{"date":"2021-12-23 17:49:22","docid":0,"fillcolor":"ffffed99","id":26,"originaltext":"扩展：MyBatis实用场景","page":84,"textblocks":[{"first":[190.8699951171875,82.67999267578125,32.040008544921875,37.5],"last":[497.0400390625,82.67999267578125,32.03997802734375,37.5],"length":14,"rects":[[190.8699951171875,82.67999267578125,338.21002197265625,37.5]],"start":63,"text":"扩展：MyBatis实用场景"}],"type":5}],"maxid":70,"notelinks":[],"title":"MyBatis","unimportant":[]}